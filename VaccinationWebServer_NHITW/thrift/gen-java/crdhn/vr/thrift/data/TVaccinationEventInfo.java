/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package crdhn.vr.thrift.data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TVaccinationEventInfo implements org.apache.thrift.TBase<TVaccinationEventInfo, TVaccinationEventInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TVaccinationEventInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TVaccinationEventInfo");

  private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EVENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("eventName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EVENT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("eventStatus", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField START_TIME_REGISTRATION_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimeRegistration", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField START_TIME_INJECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimeInjection", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_OF_DOSES_FIELD_DESC = new org.apache.thrift.protocol.TField("totalOfDoses", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_INJECTIONS_PER_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfInjectionsPerDay", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_REGISTRATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfRegistrations", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_VACCINATED_CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfVaccinatedChildren", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField VACCINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vaccineId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CENTRE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("centreId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField REGISTRATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("registrations", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField INJECTION_ORDER_NUMBER_COUNTER_FIELD_DESC = new org.apache.thrift.protocol.TField("injectionOrderNumberCounter", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField WORKING_SHIFT_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("workingShiftNames", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField END_TIME_REGISTRATION_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimeRegistration", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField EXTENDED_REGISTRATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("extendedRegistrations", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_WEEKEND_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfWeekendDays", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField VACATION_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("vacationDays", org.apache.thrift.protocol.TType.SET, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TVaccinationEventInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TVaccinationEventInfoTupleSchemeFactory());
  }

  public int eventId; // required
  public String eventName; // required
  public int eventStatus; // required
  public long startTimeRegistration; // required
  public long startTimeInjection; // required
  public int totalOfDoses; // required
  public int numberOfInjectionsPerDay; // required
  public int numberOfRegistrations; // required
  public int numberOfVaccinatedChildren; // required
  public int vaccineId; // required
  public int centreId; // required
  public List<Long> registrations; // required
  public int injectionOrderNumberCounter; // required
  public List<String> workingShiftNames; // required
  public long endTimeRegistration; // required
  public List<Long> extendedRegistrations; // required
  public int numberOfWeekendDays; // required
  public Set<String> vacationDays; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EVENT_ID((short)1, "eventId"),
    EVENT_NAME((short)2, "eventName"),
    EVENT_STATUS((short)3, "eventStatus"),
    START_TIME_REGISTRATION((short)4, "startTimeRegistration"),
    START_TIME_INJECTION((short)5, "startTimeInjection"),
    TOTAL_OF_DOSES((short)6, "totalOfDoses"),
    NUMBER_OF_INJECTIONS_PER_DAY((short)7, "numberOfInjectionsPerDay"),
    NUMBER_OF_REGISTRATIONS((short)8, "numberOfRegistrations"),
    NUMBER_OF_VACCINATED_CHILDREN((short)9, "numberOfVaccinatedChildren"),
    VACCINE_ID((short)10, "vaccineId"),
    CENTRE_ID((short)11, "centreId"),
    REGISTRATIONS((short)12, "registrations"),
    INJECTION_ORDER_NUMBER_COUNTER((short)13, "injectionOrderNumberCounter"),
    WORKING_SHIFT_NAMES((short)14, "workingShiftNames"),
    END_TIME_REGISTRATION((short)15, "endTimeRegistration"),
    EXTENDED_REGISTRATIONS((short)16, "extendedRegistrations"),
    NUMBER_OF_WEEKEND_DAYS((short)17, "numberOfWeekendDays"),
    VACATION_DAYS((short)18, "vacationDays");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EVENT_ID
          return EVENT_ID;
        case 2: // EVENT_NAME
          return EVENT_NAME;
        case 3: // EVENT_STATUS
          return EVENT_STATUS;
        case 4: // START_TIME_REGISTRATION
          return START_TIME_REGISTRATION;
        case 5: // START_TIME_INJECTION
          return START_TIME_INJECTION;
        case 6: // TOTAL_OF_DOSES
          return TOTAL_OF_DOSES;
        case 7: // NUMBER_OF_INJECTIONS_PER_DAY
          return NUMBER_OF_INJECTIONS_PER_DAY;
        case 8: // NUMBER_OF_REGISTRATIONS
          return NUMBER_OF_REGISTRATIONS;
        case 9: // NUMBER_OF_VACCINATED_CHILDREN
          return NUMBER_OF_VACCINATED_CHILDREN;
        case 10: // VACCINE_ID
          return VACCINE_ID;
        case 11: // CENTRE_ID
          return CENTRE_ID;
        case 12: // REGISTRATIONS
          return REGISTRATIONS;
        case 13: // INJECTION_ORDER_NUMBER_COUNTER
          return INJECTION_ORDER_NUMBER_COUNTER;
        case 14: // WORKING_SHIFT_NAMES
          return WORKING_SHIFT_NAMES;
        case 15: // END_TIME_REGISTRATION
          return END_TIME_REGISTRATION;
        case 16: // EXTENDED_REGISTRATIONS
          return EXTENDED_REGISTRATIONS;
        case 17: // NUMBER_OF_WEEKEND_DAYS
          return NUMBER_OF_WEEKEND_DAYS;
        case 18: // VACATION_DAYS
          return VACATION_DAYS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVENTID_ISSET_ID = 0;
  private static final int __EVENTSTATUS_ISSET_ID = 1;
  private static final int __STARTTIMEREGISTRATION_ISSET_ID = 2;
  private static final int __STARTTIMEINJECTION_ISSET_ID = 3;
  private static final int __TOTALOFDOSES_ISSET_ID = 4;
  private static final int __NUMBEROFINJECTIONSPERDAY_ISSET_ID = 5;
  private static final int __NUMBEROFREGISTRATIONS_ISSET_ID = 6;
  private static final int __NUMBEROFVACCINATEDCHILDREN_ISSET_ID = 7;
  private static final int __VACCINEID_ISSET_ID = 8;
  private static final int __CENTREID_ISSET_ID = 9;
  private static final int __INJECTIONORDERNUMBERCOUNTER_ISSET_ID = 10;
  private static final int __ENDTIMEREGISTRATION_ISSET_ID = 11;
  private static final int __NUMBEROFWEEKENDDAYS_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TVEID")));
    tmpMap.put(_Fields.EVENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("eventName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("eventStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME_REGISTRATION, new org.apache.thrift.meta_data.FieldMetaData("startTimeRegistration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTIME")));
    tmpMap.put(_Fields.START_TIME_INJECTION, new org.apache.thrift.meta_data.FieldMetaData("startTimeInjection", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTIME")));
    tmpMap.put(_Fields.TOTAL_OF_DOSES, new org.apache.thrift.meta_data.FieldMetaData("totalOfDoses", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER_OF_INJECTIONS_PER_DAY, new org.apache.thrift.meta_data.FieldMetaData("numberOfInjectionsPerDay", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER_OF_REGISTRATIONS, new org.apache.thrift.meta_data.FieldMetaData("numberOfRegistrations", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER_OF_VACCINATED_CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("numberOfVaccinatedChildren", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VACCINE_ID, new org.apache.thrift.meta_data.FieldMetaData("vaccineId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TVID")));
    tmpMap.put(_Fields.CENTRE_ID, new org.apache.thrift.meta_data.FieldMetaData("centreId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TCID")));
    tmpMap.put(_Fields.REGISTRATIONS, new org.apache.thrift.meta_data.FieldMetaData("registrations", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "TRID"))));
    tmpMap.put(_Fields.INJECTION_ORDER_NUMBER_COUNTER, new org.apache.thrift.meta_data.FieldMetaData("injectionOrderNumberCounter", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WORKING_SHIFT_NAMES, new org.apache.thrift.meta_data.FieldMetaData("workingShiftNames", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.END_TIME_REGISTRATION, new org.apache.thrift.meta_data.FieldMetaData("endTimeRegistration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTIME")));
    tmpMap.put(_Fields.EXTENDED_REGISTRATIONS, new org.apache.thrift.meta_data.FieldMetaData("extendedRegistrations", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "TRID"))));
    tmpMap.put(_Fields.NUMBER_OF_WEEKEND_DAYS, new org.apache.thrift.meta_data.FieldMetaData("numberOfWeekendDays", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VACATION_DAYS, new org.apache.thrift.meta_data.FieldMetaData("vacationDays", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TVaccinationEventInfo.class, metaDataMap);
  }

  public TVaccinationEventInfo() {
    this.eventId = -1;

    this.eventName = "";

    this.eventStatus = 2;

    this.startTimeRegistration = -1L;

    this.startTimeInjection = -1L;

    this.totalOfDoses = 0;

    this.numberOfInjectionsPerDay = 0;

    this.numberOfRegistrations = 0;

    this.numberOfVaccinatedChildren = 0;

    this.vaccineId = -1;

    this.centreId = -1;

    this.injectionOrderNumberCounter = 0;

    this.endTimeRegistration = -1L;

    this.numberOfWeekendDays = 0;

  }

  public TVaccinationEventInfo(
    int eventId,
    String eventName,
    int eventStatus,
    long startTimeRegistration,
    long startTimeInjection,
    int totalOfDoses,
    int numberOfInjectionsPerDay,
    int numberOfRegistrations,
    int numberOfVaccinatedChildren,
    int vaccineId,
    int centreId,
    List<Long> registrations,
    int injectionOrderNumberCounter,
    List<String> workingShiftNames,
    long endTimeRegistration,
    List<Long> extendedRegistrations,
    int numberOfWeekendDays,
    Set<String> vacationDays)
  {
    this();
    this.eventId = eventId;
    setEventIdIsSet(true);
    this.eventName = eventName;
    this.eventStatus = eventStatus;
    setEventStatusIsSet(true);
    this.startTimeRegistration = startTimeRegistration;
    setStartTimeRegistrationIsSet(true);
    this.startTimeInjection = startTimeInjection;
    setStartTimeInjectionIsSet(true);
    this.totalOfDoses = totalOfDoses;
    setTotalOfDosesIsSet(true);
    this.numberOfInjectionsPerDay = numberOfInjectionsPerDay;
    setNumberOfInjectionsPerDayIsSet(true);
    this.numberOfRegistrations = numberOfRegistrations;
    setNumberOfRegistrationsIsSet(true);
    this.numberOfVaccinatedChildren = numberOfVaccinatedChildren;
    setNumberOfVaccinatedChildrenIsSet(true);
    this.vaccineId = vaccineId;
    setVaccineIdIsSet(true);
    this.centreId = centreId;
    setCentreIdIsSet(true);
    this.registrations = registrations;
    this.injectionOrderNumberCounter = injectionOrderNumberCounter;
    setInjectionOrderNumberCounterIsSet(true);
    this.workingShiftNames = workingShiftNames;
    this.endTimeRegistration = endTimeRegistration;
    setEndTimeRegistrationIsSet(true);
    this.extendedRegistrations = extendedRegistrations;
    this.numberOfWeekendDays = numberOfWeekendDays;
    setNumberOfWeekendDaysIsSet(true);
    this.vacationDays = vacationDays;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TVaccinationEventInfo(TVaccinationEventInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.eventId = other.eventId;
    if (other.isSetEventName()) {
      this.eventName = other.eventName;
    }
    this.eventStatus = other.eventStatus;
    this.startTimeRegistration = other.startTimeRegistration;
    this.startTimeInjection = other.startTimeInjection;
    this.totalOfDoses = other.totalOfDoses;
    this.numberOfInjectionsPerDay = other.numberOfInjectionsPerDay;
    this.numberOfRegistrations = other.numberOfRegistrations;
    this.numberOfVaccinatedChildren = other.numberOfVaccinatedChildren;
    this.vaccineId = other.vaccineId;
    this.centreId = other.centreId;
    if (other.isSetRegistrations()) {
      List<Long> __this__registrations = new ArrayList<Long>(other.registrations.size());
      for (Long other_element : other.registrations) {
        __this__registrations.add(other_element);
      }
      this.registrations = __this__registrations;
    }
    this.injectionOrderNumberCounter = other.injectionOrderNumberCounter;
    if (other.isSetWorkingShiftNames()) {
      List<String> __this__workingShiftNames = new ArrayList<String>(other.workingShiftNames);
      this.workingShiftNames = __this__workingShiftNames;
    }
    this.endTimeRegistration = other.endTimeRegistration;
    if (other.isSetExtendedRegistrations()) {
      List<Long> __this__extendedRegistrations = new ArrayList<Long>(other.extendedRegistrations.size());
      for (Long other_element : other.extendedRegistrations) {
        __this__extendedRegistrations.add(other_element);
      }
      this.extendedRegistrations = __this__extendedRegistrations;
    }
    this.numberOfWeekendDays = other.numberOfWeekendDays;
    if (other.isSetVacationDays()) {
      Set<String> __this__vacationDays = new HashSet<String>(other.vacationDays);
      this.vacationDays = __this__vacationDays;
    }
  }

  public TVaccinationEventInfo deepCopy() {
    return new TVaccinationEventInfo(this);
  }

  @Override
  public void clear() {
    this.eventId = -1;

    this.eventName = "";

    this.eventStatus = 2;

    this.startTimeRegistration = -1L;

    this.startTimeInjection = -1L;

    this.totalOfDoses = 0;

    this.numberOfInjectionsPerDay = 0;

    this.numberOfRegistrations = 0;

    this.numberOfVaccinatedChildren = 0;

    this.vaccineId = -1;

    this.centreId = -1;

    this.registrations = null;
    this.injectionOrderNumberCounter = 0;

    this.workingShiftNames = null;
    this.endTimeRegistration = -1L;

    this.extendedRegistrations = null;
    this.numberOfWeekendDays = 0;

    this.vacationDays = null;
  }

  public int getEventId() {
    return this.eventId;
  }

  public TVaccinationEventInfo setEventId(int eventId) {
    this.eventId = eventId;
    setEventIdIsSet(true);
    return this;
  }

  public void unsetEventId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
  public boolean isSetEventId() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  public void setEventIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTID_ISSET_ID, value);
  }

  public String getEventName() {
    return this.eventName;
  }

  public TVaccinationEventInfo setEventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

  public void unsetEventName() {
    this.eventName = null;
  }

  /** Returns true if field eventName is set (has been assigned a value) and false otherwise */
  public boolean isSetEventName() {
    return this.eventName != null;
  }

  public void setEventNameIsSet(boolean value) {
    if (!value) {
      this.eventName = null;
    }
  }

  public int getEventStatus() {
    return this.eventStatus;
  }

  public TVaccinationEventInfo setEventStatus(int eventStatus) {
    this.eventStatus = eventStatus;
    setEventStatusIsSet(true);
    return this;
  }

  public void unsetEventStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTSTATUS_ISSET_ID);
  }

  /** Returns true if field eventStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetEventStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTSTATUS_ISSET_ID);
  }

  public void setEventStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTSTATUS_ISSET_ID, value);
  }

  public long getStartTimeRegistration() {
    return this.startTimeRegistration;
  }

  public TVaccinationEventInfo setStartTimeRegistration(long startTimeRegistration) {
    this.startTimeRegistration = startTimeRegistration;
    setStartTimeRegistrationIsSet(true);
    return this;
  }

  public void unsetStartTimeRegistration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIMEREGISTRATION_ISSET_ID);
  }

  /** Returns true if field startTimeRegistration is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimeRegistration() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIMEREGISTRATION_ISSET_ID);
  }

  public void setStartTimeRegistrationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIMEREGISTRATION_ISSET_ID, value);
  }

  public long getStartTimeInjection() {
    return this.startTimeInjection;
  }

  public TVaccinationEventInfo setStartTimeInjection(long startTimeInjection) {
    this.startTimeInjection = startTimeInjection;
    setStartTimeInjectionIsSet(true);
    return this;
  }

  public void unsetStartTimeInjection() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIMEINJECTION_ISSET_ID);
  }

  /** Returns true if field startTimeInjection is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimeInjection() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIMEINJECTION_ISSET_ID);
  }

  public void setStartTimeInjectionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIMEINJECTION_ISSET_ID, value);
  }

  public int getTotalOfDoses() {
    return this.totalOfDoses;
  }

  public TVaccinationEventInfo setTotalOfDoses(int totalOfDoses) {
    this.totalOfDoses = totalOfDoses;
    setTotalOfDosesIsSet(true);
    return this;
  }

  public void unsetTotalOfDoses() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALOFDOSES_ISSET_ID);
  }

  /** Returns true if field totalOfDoses is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalOfDoses() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALOFDOSES_ISSET_ID);
  }

  public void setTotalOfDosesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALOFDOSES_ISSET_ID, value);
  }

  public int getNumberOfInjectionsPerDay() {
    return this.numberOfInjectionsPerDay;
  }

  public TVaccinationEventInfo setNumberOfInjectionsPerDay(int numberOfInjectionsPerDay) {
    this.numberOfInjectionsPerDay = numberOfInjectionsPerDay;
    setNumberOfInjectionsPerDayIsSet(true);
    return this;
  }

  public void unsetNumberOfInjectionsPerDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFINJECTIONSPERDAY_ISSET_ID);
  }

  /** Returns true if field numberOfInjectionsPerDay is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfInjectionsPerDay() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBEROFINJECTIONSPERDAY_ISSET_ID);
  }

  public void setNumberOfInjectionsPerDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEROFINJECTIONSPERDAY_ISSET_ID, value);
  }

  public int getNumberOfRegistrations() {
    return this.numberOfRegistrations;
  }

  public TVaccinationEventInfo setNumberOfRegistrations(int numberOfRegistrations) {
    this.numberOfRegistrations = numberOfRegistrations;
    setNumberOfRegistrationsIsSet(true);
    return this;
  }

  public void unsetNumberOfRegistrations() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFREGISTRATIONS_ISSET_ID);
  }

  /** Returns true if field numberOfRegistrations is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfRegistrations() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBEROFREGISTRATIONS_ISSET_ID);
  }

  public void setNumberOfRegistrationsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEROFREGISTRATIONS_ISSET_ID, value);
  }

  public int getNumberOfVaccinatedChildren() {
    return this.numberOfVaccinatedChildren;
  }

  public TVaccinationEventInfo setNumberOfVaccinatedChildren(int numberOfVaccinatedChildren) {
    this.numberOfVaccinatedChildren = numberOfVaccinatedChildren;
    setNumberOfVaccinatedChildrenIsSet(true);
    return this;
  }

  public void unsetNumberOfVaccinatedChildren() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFVACCINATEDCHILDREN_ISSET_ID);
  }

  /** Returns true if field numberOfVaccinatedChildren is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfVaccinatedChildren() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBEROFVACCINATEDCHILDREN_ISSET_ID);
  }

  public void setNumberOfVaccinatedChildrenIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEROFVACCINATEDCHILDREN_ISSET_ID, value);
  }

  public int getVaccineId() {
    return this.vaccineId;
  }

  public TVaccinationEventInfo setVaccineId(int vaccineId) {
    this.vaccineId = vaccineId;
    setVaccineIdIsSet(true);
    return this;
  }

  public void unsetVaccineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VACCINEID_ISSET_ID);
  }

  /** Returns true if field vaccineId is set (has been assigned a value) and false otherwise */
  public boolean isSetVaccineId() {
    return EncodingUtils.testBit(__isset_bitfield, __VACCINEID_ISSET_ID);
  }

  public void setVaccineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VACCINEID_ISSET_ID, value);
  }

  public int getCentreId() {
    return this.centreId;
  }

  public TVaccinationEventInfo setCentreId(int centreId) {
    this.centreId = centreId;
    setCentreIdIsSet(true);
    return this;
  }

  public void unsetCentreId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CENTREID_ISSET_ID);
  }

  /** Returns true if field centreId is set (has been assigned a value) and false otherwise */
  public boolean isSetCentreId() {
    return EncodingUtils.testBit(__isset_bitfield, __CENTREID_ISSET_ID);
  }

  public void setCentreIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CENTREID_ISSET_ID, value);
  }

  public int getRegistrationsSize() {
    return (this.registrations == null) ? 0 : this.registrations.size();
  }

  public java.util.Iterator<Long> getRegistrationsIterator() {
    return (this.registrations == null) ? null : this.registrations.iterator();
  }

  public void addToRegistrations(long elem) {
    if (this.registrations == null) {
      this.registrations = new ArrayList<Long>();
    }
    this.registrations.add(elem);
  }

  public List<Long> getRegistrations() {
    return this.registrations;
  }

  public TVaccinationEventInfo setRegistrations(List<Long> registrations) {
    this.registrations = registrations;
    return this;
  }

  public void unsetRegistrations() {
    this.registrations = null;
  }

  /** Returns true if field registrations is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistrations() {
    return this.registrations != null;
  }

  public void setRegistrationsIsSet(boolean value) {
    if (!value) {
      this.registrations = null;
    }
  }

  public int getInjectionOrderNumberCounter() {
    return this.injectionOrderNumberCounter;
  }

  public TVaccinationEventInfo setInjectionOrderNumberCounter(int injectionOrderNumberCounter) {
    this.injectionOrderNumberCounter = injectionOrderNumberCounter;
    setInjectionOrderNumberCounterIsSet(true);
    return this;
  }

  public void unsetInjectionOrderNumberCounter() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INJECTIONORDERNUMBERCOUNTER_ISSET_ID);
  }

  /** Returns true if field injectionOrderNumberCounter is set (has been assigned a value) and false otherwise */
  public boolean isSetInjectionOrderNumberCounter() {
    return EncodingUtils.testBit(__isset_bitfield, __INJECTIONORDERNUMBERCOUNTER_ISSET_ID);
  }

  public void setInjectionOrderNumberCounterIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INJECTIONORDERNUMBERCOUNTER_ISSET_ID, value);
  }

  public int getWorkingShiftNamesSize() {
    return (this.workingShiftNames == null) ? 0 : this.workingShiftNames.size();
  }

  public java.util.Iterator<String> getWorkingShiftNamesIterator() {
    return (this.workingShiftNames == null) ? null : this.workingShiftNames.iterator();
  }

  public void addToWorkingShiftNames(String elem) {
    if (this.workingShiftNames == null) {
      this.workingShiftNames = new ArrayList<String>();
    }
    this.workingShiftNames.add(elem);
  }

  public List<String> getWorkingShiftNames() {
    return this.workingShiftNames;
  }

  public TVaccinationEventInfo setWorkingShiftNames(List<String> workingShiftNames) {
    this.workingShiftNames = workingShiftNames;
    return this;
  }

  public void unsetWorkingShiftNames() {
    this.workingShiftNames = null;
  }

  /** Returns true if field workingShiftNames is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkingShiftNames() {
    return this.workingShiftNames != null;
  }

  public void setWorkingShiftNamesIsSet(boolean value) {
    if (!value) {
      this.workingShiftNames = null;
    }
  }

  public long getEndTimeRegistration() {
    return this.endTimeRegistration;
  }

  public TVaccinationEventInfo setEndTimeRegistration(long endTimeRegistration) {
    this.endTimeRegistration = endTimeRegistration;
    setEndTimeRegistrationIsSet(true);
    return this;
  }

  public void unsetEndTimeRegistration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIMEREGISTRATION_ISSET_ID);
  }

  /** Returns true if field endTimeRegistration is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTimeRegistration() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIMEREGISTRATION_ISSET_ID);
  }

  public void setEndTimeRegistrationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIMEREGISTRATION_ISSET_ID, value);
  }

  public int getExtendedRegistrationsSize() {
    return (this.extendedRegistrations == null) ? 0 : this.extendedRegistrations.size();
  }

  public java.util.Iterator<Long> getExtendedRegistrationsIterator() {
    return (this.extendedRegistrations == null) ? null : this.extendedRegistrations.iterator();
  }

  public void addToExtendedRegistrations(long elem) {
    if (this.extendedRegistrations == null) {
      this.extendedRegistrations = new ArrayList<Long>();
    }
    this.extendedRegistrations.add(elem);
  }

  public List<Long> getExtendedRegistrations() {
    return this.extendedRegistrations;
  }

  public TVaccinationEventInfo setExtendedRegistrations(List<Long> extendedRegistrations) {
    this.extendedRegistrations = extendedRegistrations;
    return this;
  }

  public void unsetExtendedRegistrations() {
    this.extendedRegistrations = null;
  }

  /** Returns true if field extendedRegistrations is set (has been assigned a value) and false otherwise */
  public boolean isSetExtendedRegistrations() {
    return this.extendedRegistrations != null;
  }

  public void setExtendedRegistrationsIsSet(boolean value) {
    if (!value) {
      this.extendedRegistrations = null;
    }
  }

  public int getNumberOfWeekendDays() {
    return this.numberOfWeekendDays;
  }

  public TVaccinationEventInfo setNumberOfWeekendDays(int numberOfWeekendDays) {
    this.numberOfWeekendDays = numberOfWeekendDays;
    setNumberOfWeekendDaysIsSet(true);
    return this;
  }

  public void unsetNumberOfWeekendDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFWEEKENDDAYS_ISSET_ID);
  }

  /** Returns true if field numberOfWeekendDays is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfWeekendDays() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBEROFWEEKENDDAYS_ISSET_ID);
  }

  public void setNumberOfWeekendDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEROFWEEKENDDAYS_ISSET_ID, value);
  }

  public int getVacationDaysSize() {
    return (this.vacationDays == null) ? 0 : this.vacationDays.size();
  }

  public java.util.Iterator<String> getVacationDaysIterator() {
    return (this.vacationDays == null) ? null : this.vacationDays.iterator();
  }

  public void addToVacationDays(String elem) {
    if (this.vacationDays == null) {
      this.vacationDays = new HashSet<String>();
    }
    this.vacationDays.add(elem);
  }

  public Set<String> getVacationDays() {
    return this.vacationDays;
  }

  public TVaccinationEventInfo setVacationDays(Set<String> vacationDays) {
    this.vacationDays = vacationDays;
    return this;
  }

  public void unsetVacationDays() {
    this.vacationDays = null;
  }

  /** Returns true if field vacationDays is set (has been assigned a value) and false otherwise */
  public boolean isSetVacationDays() {
    return this.vacationDays != null;
  }

  public void setVacationDaysIsSet(boolean value) {
    if (!value) {
      this.vacationDays = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EVENT_ID:
      if (value == null) {
        unsetEventId();
      } else {
        setEventId((Integer)value);
      }
      break;

    case EVENT_NAME:
      if (value == null) {
        unsetEventName();
      } else {
        setEventName((String)value);
      }
      break;

    case EVENT_STATUS:
      if (value == null) {
        unsetEventStatus();
      } else {
        setEventStatus((Integer)value);
      }
      break;

    case START_TIME_REGISTRATION:
      if (value == null) {
        unsetStartTimeRegistration();
      } else {
        setStartTimeRegistration((Long)value);
      }
      break;

    case START_TIME_INJECTION:
      if (value == null) {
        unsetStartTimeInjection();
      } else {
        setStartTimeInjection((Long)value);
      }
      break;

    case TOTAL_OF_DOSES:
      if (value == null) {
        unsetTotalOfDoses();
      } else {
        setTotalOfDoses((Integer)value);
      }
      break;

    case NUMBER_OF_INJECTIONS_PER_DAY:
      if (value == null) {
        unsetNumberOfInjectionsPerDay();
      } else {
        setNumberOfInjectionsPerDay((Integer)value);
      }
      break;

    case NUMBER_OF_REGISTRATIONS:
      if (value == null) {
        unsetNumberOfRegistrations();
      } else {
        setNumberOfRegistrations((Integer)value);
      }
      break;

    case NUMBER_OF_VACCINATED_CHILDREN:
      if (value == null) {
        unsetNumberOfVaccinatedChildren();
      } else {
        setNumberOfVaccinatedChildren((Integer)value);
      }
      break;

    case VACCINE_ID:
      if (value == null) {
        unsetVaccineId();
      } else {
        setVaccineId((Integer)value);
      }
      break;

    case CENTRE_ID:
      if (value == null) {
        unsetCentreId();
      } else {
        setCentreId((Integer)value);
      }
      break;

    case REGISTRATIONS:
      if (value == null) {
        unsetRegistrations();
      } else {
        setRegistrations((List<Long>)value);
      }
      break;

    case INJECTION_ORDER_NUMBER_COUNTER:
      if (value == null) {
        unsetInjectionOrderNumberCounter();
      } else {
        setInjectionOrderNumberCounter((Integer)value);
      }
      break;

    case WORKING_SHIFT_NAMES:
      if (value == null) {
        unsetWorkingShiftNames();
      } else {
        setWorkingShiftNames((List<String>)value);
      }
      break;

    case END_TIME_REGISTRATION:
      if (value == null) {
        unsetEndTimeRegistration();
      } else {
        setEndTimeRegistration((Long)value);
      }
      break;

    case EXTENDED_REGISTRATIONS:
      if (value == null) {
        unsetExtendedRegistrations();
      } else {
        setExtendedRegistrations((List<Long>)value);
      }
      break;

    case NUMBER_OF_WEEKEND_DAYS:
      if (value == null) {
        unsetNumberOfWeekendDays();
      } else {
        setNumberOfWeekendDays((Integer)value);
      }
      break;

    case VACATION_DAYS:
      if (value == null) {
        unsetVacationDays();
      } else {
        setVacationDays((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EVENT_ID:
      return Integer.valueOf(getEventId());

    case EVENT_NAME:
      return getEventName();

    case EVENT_STATUS:
      return Integer.valueOf(getEventStatus());

    case START_TIME_REGISTRATION:
      return Long.valueOf(getStartTimeRegistration());

    case START_TIME_INJECTION:
      return Long.valueOf(getStartTimeInjection());

    case TOTAL_OF_DOSES:
      return Integer.valueOf(getTotalOfDoses());

    case NUMBER_OF_INJECTIONS_PER_DAY:
      return Integer.valueOf(getNumberOfInjectionsPerDay());

    case NUMBER_OF_REGISTRATIONS:
      return Integer.valueOf(getNumberOfRegistrations());

    case NUMBER_OF_VACCINATED_CHILDREN:
      return Integer.valueOf(getNumberOfVaccinatedChildren());

    case VACCINE_ID:
      return Integer.valueOf(getVaccineId());

    case CENTRE_ID:
      return Integer.valueOf(getCentreId());

    case REGISTRATIONS:
      return getRegistrations();

    case INJECTION_ORDER_NUMBER_COUNTER:
      return Integer.valueOf(getInjectionOrderNumberCounter());

    case WORKING_SHIFT_NAMES:
      return getWorkingShiftNames();

    case END_TIME_REGISTRATION:
      return Long.valueOf(getEndTimeRegistration());

    case EXTENDED_REGISTRATIONS:
      return getExtendedRegistrations();

    case NUMBER_OF_WEEKEND_DAYS:
      return Integer.valueOf(getNumberOfWeekendDays());

    case VACATION_DAYS:
      return getVacationDays();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EVENT_ID:
      return isSetEventId();
    case EVENT_NAME:
      return isSetEventName();
    case EVENT_STATUS:
      return isSetEventStatus();
    case START_TIME_REGISTRATION:
      return isSetStartTimeRegistration();
    case START_TIME_INJECTION:
      return isSetStartTimeInjection();
    case TOTAL_OF_DOSES:
      return isSetTotalOfDoses();
    case NUMBER_OF_INJECTIONS_PER_DAY:
      return isSetNumberOfInjectionsPerDay();
    case NUMBER_OF_REGISTRATIONS:
      return isSetNumberOfRegistrations();
    case NUMBER_OF_VACCINATED_CHILDREN:
      return isSetNumberOfVaccinatedChildren();
    case VACCINE_ID:
      return isSetVaccineId();
    case CENTRE_ID:
      return isSetCentreId();
    case REGISTRATIONS:
      return isSetRegistrations();
    case INJECTION_ORDER_NUMBER_COUNTER:
      return isSetInjectionOrderNumberCounter();
    case WORKING_SHIFT_NAMES:
      return isSetWorkingShiftNames();
    case END_TIME_REGISTRATION:
      return isSetEndTimeRegistration();
    case EXTENDED_REGISTRATIONS:
      return isSetExtendedRegistrations();
    case NUMBER_OF_WEEKEND_DAYS:
      return isSetNumberOfWeekendDays();
    case VACATION_DAYS:
      return isSetVacationDays();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TVaccinationEventInfo)
      return this.equals((TVaccinationEventInfo)that);
    return false;
  }

  public boolean equals(TVaccinationEventInfo that) {
    if (that == null)
      return false;

    boolean this_present_eventId = true;
    boolean that_present_eventId = true;
    if (this_present_eventId || that_present_eventId) {
      if (!(this_present_eventId && that_present_eventId))
        return false;
      if (this.eventId != that.eventId)
        return false;
    }

    boolean this_present_eventName = true && this.isSetEventName();
    boolean that_present_eventName = true && that.isSetEventName();
    if (this_present_eventName || that_present_eventName) {
      if (!(this_present_eventName && that_present_eventName))
        return false;
      if (!this.eventName.equals(that.eventName))
        return false;
    }

    boolean this_present_eventStatus = true;
    boolean that_present_eventStatus = true;
    if (this_present_eventStatus || that_present_eventStatus) {
      if (!(this_present_eventStatus && that_present_eventStatus))
        return false;
      if (this.eventStatus != that.eventStatus)
        return false;
    }

    boolean this_present_startTimeRegistration = true;
    boolean that_present_startTimeRegistration = true;
    if (this_present_startTimeRegistration || that_present_startTimeRegistration) {
      if (!(this_present_startTimeRegistration && that_present_startTimeRegistration))
        return false;
      if (this.startTimeRegistration != that.startTimeRegistration)
        return false;
    }

    boolean this_present_startTimeInjection = true;
    boolean that_present_startTimeInjection = true;
    if (this_present_startTimeInjection || that_present_startTimeInjection) {
      if (!(this_present_startTimeInjection && that_present_startTimeInjection))
        return false;
      if (this.startTimeInjection != that.startTimeInjection)
        return false;
    }

    boolean this_present_totalOfDoses = true;
    boolean that_present_totalOfDoses = true;
    if (this_present_totalOfDoses || that_present_totalOfDoses) {
      if (!(this_present_totalOfDoses && that_present_totalOfDoses))
        return false;
      if (this.totalOfDoses != that.totalOfDoses)
        return false;
    }

    boolean this_present_numberOfInjectionsPerDay = true;
    boolean that_present_numberOfInjectionsPerDay = true;
    if (this_present_numberOfInjectionsPerDay || that_present_numberOfInjectionsPerDay) {
      if (!(this_present_numberOfInjectionsPerDay && that_present_numberOfInjectionsPerDay))
        return false;
      if (this.numberOfInjectionsPerDay != that.numberOfInjectionsPerDay)
        return false;
    }

    boolean this_present_numberOfRegistrations = true;
    boolean that_present_numberOfRegistrations = true;
    if (this_present_numberOfRegistrations || that_present_numberOfRegistrations) {
      if (!(this_present_numberOfRegistrations && that_present_numberOfRegistrations))
        return false;
      if (this.numberOfRegistrations != that.numberOfRegistrations)
        return false;
    }

    boolean this_present_numberOfVaccinatedChildren = true;
    boolean that_present_numberOfVaccinatedChildren = true;
    if (this_present_numberOfVaccinatedChildren || that_present_numberOfVaccinatedChildren) {
      if (!(this_present_numberOfVaccinatedChildren && that_present_numberOfVaccinatedChildren))
        return false;
      if (this.numberOfVaccinatedChildren != that.numberOfVaccinatedChildren)
        return false;
    }

    boolean this_present_vaccineId = true;
    boolean that_present_vaccineId = true;
    if (this_present_vaccineId || that_present_vaccineId) {
      if (!(this_present_vaccineId && that_present_vaccineId))
        return false;
      if (this.vaccineId != that.vaccineId)
        return false;
    }

    boolean this_present_centreId = true;
    boolean that_present_centreId = true;
    if (this_present_centreId || that_present_centreId) {
      if (!(this_present_centreId && that_present_centreId))
        return false;
      if (this.centreId != that.centreId)
        return false;
    }

    boolean this_present_registrations = true && this.isSetRegistrations();
    boolean that_present_registrations = true && that.isSetRegistrations();
    if (this_present_registrations || that_present_registrations) {
      if (!(this_present_registrations && that_present_registrations))
        return false;
      if (!this.registrations.equals(that.registrations))
        return false;
    }

    boolean this_present_injectionOrderNumberCounter = true;
    boolean that_present_injectionOrderNumberCounter = true;
    if (this_present_injectionOrderNumberCounter || that_present_injectionOrderNumberCounter) {
      if (!(this_present_injectionOrderNumberCounter && that_present_injectionOrderNumberCounter))
        return false;
      if (this.injectionOrderNumberCounter != that.injectionOrderNumberCounter)
        return false;
    }

    boolean this_present_workingShiftNames = true && this.isSetWorkingShiftNames();
    boolean that_present_workingShiftNames = true && that.isSetWorkingShiftNames();
    if (this_present_workingShiftNames || that_present_workingShiftNames) {
      if (!(this_present_workingShiftNames && that_present_workingShiftNames))
        return false;
      if (!this.workingShiftNames.equals(that.workingShiftNames))
        return false;
    }

    boolean this_present_endTimeRegistration = true;
    boolean that_present_endTimeRegistration = true;
    if (this_present_endTimeRegistration || that_present_endTimeRegistration) {
      if (!(this_present_endTimeRegistration && that_present_endTimeRegistration))
        return false;
      if (this.endTimeRegistration != that.endTimeRegistration)
        return false;
    }

    boolean this_present_extendedRegistrations = true && this.isSetExtendedRegistrations();
    boolean that_present_extendedRegistrations = true && that.isSetExtendedRegistrations();
    if (this_present_extendedRegistrations || that_present_extendedRegistrations) {
      if (!(this_present_extendedRegistrations && that_present_extendedRegistrations))
        return false;
      if (!this.extendedRegistrations.equals(that.extendedRegistrations))
        return false;
    }

    boolean this_present_numberOfWeekendDays = true;
    boolean that_present_numberOfWeekendDays = true;
    if (this_present_numberOfWeekendDays || that_present_numberOfWeekendDays) {
      if (!(this_present_numberOfWeekendDays && that_present_numberOfWeekendDays))
        return false;
      if (this.numberOfWeekendDays != that.numberOfWeekendDays)
        return false;
    }

    boolean this_present_vacationDays = true && this.isSetVacationDays();
    boolean that_present_vacationDays = true && that.isSetVacationDays();
    if (this_present_vacationDays || that_present_vacationDays) {
      if (!(this_present_vacationDays && that_present_vacationDays))
        return false;
      if (!this.vacationDays.equals(that.vacationDays))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TVaccinationEventInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEventId()).compareTo(other.isSetEventId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, other.eventId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventName()).compareTo(other.isSetEventName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventName, other.eventName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventStatus()).compareTo(other.isSetEventStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventStatus, other.eventStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimeRegistration()).compareTo(other.isSetStartTimeRegistration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimeRegistration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimeRegistration, other.startTimeRegistration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimeInjection()).compareTo(other.isSetStartTimeInjection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimeInjection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimeInjection, other.startTimeInjection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalOfDoses()).compareTo(other.isSetTotalOfDoses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalOfDoses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalOfDoses, other.totalOfDoses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumberOfInjectionsPerDay()).compareTo(other.isSetNumberOfInjectionsPerDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfInjectionsPerDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfInjectionsPerDay, other.numberOfInjectionsPerDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumberOfRegistrations()).compareTo(other.isSetNumberOfRegistrations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfRegistrations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfRegistrations, other.numberOfRegistrations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumberOfVaccinatedChildren()).compareTo(other.isSetNumberOfVaccinatedChildren());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfVaccinatedChildren()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfVaccinatedChildren, other.numberOfVaccinatedChildren);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVaccineId()).compareTo(other.isSetVaccineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVaccineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vaccineId, other.vaccineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCentreId()).compareTo(other.isSetCentreId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCentreId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.centreId, other.centreId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegistrations()).compareTo(other.isSetRegistrations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistrations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrations, other.registrations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInjectionOrderNumberCounter()).compareTo(other.isSetInjectionOrderNumberCounter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInjectionOrderNumberCounter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.injectionOrderNumberCounter, other.injectionOrderNumberCounter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkingShiftNames()).compareTo(other.isSetWorkingShiftNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkingShiftNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workingShiftNames, other.workingShiftNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTimeRegistration()).compareTo(other.isSetEndTimeRegistration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTimeRegistration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimeRegistration, other.endTimeRegistration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtendedRegistrations()).compareTo(other.isSetExtendedRegistrations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtendedRegistrations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extendedRegistrations, other.extendedRegistrations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumberOfWeekendDays()).compareTo(other.isSetNumberOfWeekendDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfWeekendDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfWeekendDays, other.numberOfWeekendDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVacationDays()).compareTo(other.isSetVacationDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVacationDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vacationDays, other.vacationDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TVaccinationEventInfo(");
    boolean first = true;

    sb.append("eventId:");
    sb.append(this.eventId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventName:");
    if (this.eventName == null) {
      sb.append("null");
    } else {
      sb.append(this.eventName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventStatus:");
    sb.append(this.eventStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTimeRegistration:");
    sb.append(this.startTimeRegistration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTimeInjection:");
    sb.append(this.startTimeInjection);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalOfDoses:");
    sb.append(this.totalOfDoses);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfInjectionsPerDay:");
    sb.append(this.numberOfInjectionsPerDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfRegistrations:");
    sb.append(this.numberOfRegistrations);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfVaccinatedChildren:");
    sb.append(this.numberOfVaccinatedChildren);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vaccineId:");
    sb.append(this.vaccineId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("centreId:");
    sb.append(this.centreId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("registrations:");
    if (this.registrations == null) {
      sb.append("null");
    } else {
      sb.append(this.registrations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("injectionOrderNumberCounter:");
    sb.append(this.injectionOrderNumberCounter);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workingShiftNames:");
    if (this.workingShiftNames == null) {
      sb.append("null");
    } else {
      sb.append(this.workingShiftNames);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTimeRegistration:");
    sb.append(this.endTimeRegistration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extendedRegistrations:");
    if (this.extendedRegistrations == null) {
      sb.append("null");
    } else {
      sb.append(this.extendedRegistrations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfWeekendDays:");
    sb.append(this.numberOfWeekendDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vacationDays:");
    if (this.vacationDays == null) {
      sb.append("null");
    } else {
      sb.append(this.vacationDays);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'eventId' because it's a primitive and you chose the non-beans generator.
    if (eventName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eventName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'eventStatus' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'startTimeRegistration' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'startTimeInjection' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalOfDoses' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'numberOfInjectionsPerDay' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'numberOfRegistrations' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'numberOfVaccinatedChildren' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'vaccineId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'centreId' because it's a primitive and you chose the non-beans generator.
    if (registrations == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'registrations' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'injectionOrderNumberCounter' because it's a primitive and you chose the non-beans generator.
    if (workingShiftNames == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'workingShiftNames' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'endTimeRegistration' because it's a primitive and you chose the non-beans generator.
    if (extendedRegistrations == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'extendedRegistrations' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'numberOfWeekendDays' because it's a primitive and you chose the non-beans generator.
    if (vacationDays == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'vacationDays' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TVaccinationEventInfoStandardSchemeFactory implements SchemeFactory {
    public TVaccinationEventInfoStandardScheme getScheme() {
      return new TVaccinationEventInfoStandardScheme();
    }
  }

  private static class TVaccinationEventInfoStandardScheme extends StandardScheme<TVaccinationEventInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TVaccinationEventInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventId = iprot.readI32();
              struct.setEventIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EVENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventName = iprot.readString();
              struct.setEventNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EVENT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventStatus = iprot.readI32();
              struct.setEventStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_TIME_REGISTRATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTimeRegistration = iprot.readI64();
              struct.setStartTimeRegistrationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_TIME_INJECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTimeInjection = iprot.readI64();
              struct.setStartTimeInjectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_OF_DOSES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalOfDoses = iprot.readI32();
              struct.setTotalOfDosesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NUMBER_OF_INJECTIONS_PER_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numberOfInjectionsPerDay = iprot.readI32();
              struct.setNumberOfInjectionsPerDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NUMBER_OF_REGISTRATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numberOfRegistrations = iprot.readI32();
              struct.setNumberOfRegistrationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NUMBER_OF_VACCINATED_CHILDREN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numberOfVaccinatedChildren = iprot.readI32();
              struct.setNumberOfVaccinatedChildrenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VACCINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vaccineId = iprot.readI32();
              struct.setVaccineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CENTRE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.centreId = iprot.readI32();
              struct.setCentreIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REGISTRATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.registrations = new ArrayList<Long>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  long _elem10;
                  _elem10 = iprot.readI64();
                  struct.registrations.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setRegistrationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // INJECTION_ORDER_NUMBER_COUNTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.injectionOrderNumberCounter = iprot.readI32();
              struct.setInjectionOrderNumberCounterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // WORKING_SHIFT_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.workingShiftNames = new ArrayList<String>(_list11.size);
                for (int _i12 = 0; _i12 < _list11.size; ++_i12)
                {
                  String _elem13;
                  _elem13 = iprot.readString();
                  struct.workingShiftNames.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setWorkingShiftNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // END_TIME_REGISTRATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTimeRegistration = iprot.readI64();
              struct.setEndTimeRegistrationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // EXTENDED_REGISTRATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.extendedRegistrations = new ArrayList<Long>(_list14.size);
                for (int _i15 = 0; _i15 < _list14.size; ++_i15)
                {
                  long _elem16;
                  _elem16 = iprot.readI64();
                  struct.extendedRegistrations.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setExtendedRegistrationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // NUMBER_OF_WEEKEND_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numberOfWeekendDays = iprot.readI32();
              struct.setNumberOfWeekendDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // VACATION_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set17 = iprot.readSetBegin();
                struct.vacationDays = new HashSet<String>(2*_set17.size);
                for (int _i18 = 0; _i18 < _set17.size; ++_i18)
                {
                  String _elem19;
                  _elem19 = iprot.readString();
                  struct.vacationDays.add(_elem19);
                }
                iprot.readSetEnd();
              }
              struct.setVacationDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetEventId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'eventId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEventStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'eventStatus' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartTimeRegistration()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTimeRegistration' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartTimeInjection()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTimeInjection' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalOfDoses()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalOfDoses' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumberOfInjectionsPerDay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numberOfInjectionsPerDay' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumberOfRegistrations()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numberOfRegistrations' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumberOfVaccinatedChildren()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numberOfVaccinatedChildren' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVaccineId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vaccineId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCentreId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'centreId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInjectionOrderNumberCounter()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'injectionOrderNumberCounter' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndTimeRegistration()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'endTimeRegistration' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNumberOfWeekendDays()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numberOfWeekendDays' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TVaccinationEventInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
      oprot.writeI32(struct.eventId);
      oprot.writeFieldEnd();
      if (struct.eventName != null) {
        oprot.writeFieldBegin(EVENT_NAME_FIELD_DESC);
        oprot.writeString(struct.eventName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EVENT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.eventStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_REGISTRATION_FIELD_DESC);
      oprot.writeI64(struct.startTimeRegistration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_INJECTION_FIELD_DESC);
      oprot.writeI64(struct.startTimeInjection);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_OF_DOSES_FIELD_DESC);
      oprot.writeI32(struct.totalOfDoses);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER_OF_INJECTIONS_PER_DAY_FIELD_DESC);
      oprot.writeI32(struct.numberOfInjectionsPerDay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER_OF_REGISTRATIONS_FIELD_DESC);
      oprot.writeI32(struct.numberOfRegistrations);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER_OF_VACCINATED_CHILDREN_FIELD_DESC);
      oprot.writeI32(struct.numberOfVaccinatedChildren);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VACCINE_ID_FIELD_DESC);
      oprot.writeI32(struct.vaccineId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CENTRE_ID_FIELD_DESC);
      oprot.writeI32(struct.centreId);
      oprot.writeFieldEnd();
      if (struct.registrations != null) {
        oprot.writeFieldBegin(REGISTRATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.registrations.size()));
          for (long _iter20 : struct.registrations)
          {
            oprot.writeI64(_iter20);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INJECTION_ORDER_NUMBER_COUNTER_FIELD_DESC);
      oprot.writeI32(struct.injectionOrderNumberCounter);
      oprot.writeFieldEnd();
      if (struct.workingShiftNames != null) {
        oprot.writeFieldBegin(WORKING_SHIFT_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.workingShiftNames.size()));
          for (String _iter21 : struct.workingShiftNames)
          {
            oprot.writeString(_iter21);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(END_TIME_REGISTRATION_FIELD_DESC);
      oprot.writeI64(struct.endTimeRegistration);
      oprot.writeFieldEnd();
      if (struct.extendedRegistrations != null) {
        oprot.writeFieldBegin(EXTENDED_REGISTRATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.extendedRegistrations.size()));
          for (long _iter22 : struct.extendedRegistrations)
          {
            oprot.writeI64(_iter22);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUMBER_OF_WEEKEND_DAYS_FIELD_DESC);
      oprot.writeI32(struct.numberOfWeekendDays);
      oprot.writeFieldEnd();
      if (struct.vacationDays != null) {
        oprot.writeFieldBegin(VACATION_DAYS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.vacationDays.size()));
          for (String _iter23 : struct.vacationDays)
          {
            oprot.writeString(_iter23);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TVaccinationEventInfoTupleSchemeFactory implements SchemeFactory {
    public TVaccinationEventInfoTupleScheme getScheme() {
      return new TVaccinationEventInfoTupleScheme();
    }
  }

  private static class TVaccinationEventInfoTupleScheme extends TupleScheme<TVaccinationEventInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TVaccinationEventInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.eventId);
      oprot.writeString(struct.eventName);
      oprot.writeI32(struct.eventStatus);
      oprot.writeI64(struct.startTimeRegistration);
      oprot.writeI64(struct.startTimeInjection);
      oprot.writeI32(struct.totalOfDoses);
      oprot.writeI32(struct.numberOfInjectionsPerDay);
      oprot.writeI32(struct.numberOfRegistrations);
      oprot.writeI32(struct.numberOfVaccinatedChildren);
      oprot.writeI32(struct.vaccineId);
      oprot.writeI32(struct.centreId);
      {
        oprot.writeI32(struct.registrations.size());
        for (long _iter24 : struct.registrations)
        {
          oprot.writeI64(_iter24);
        }
      }
      oprot.writeI32(struct.injectionOrderNumberCounter);
      {
        oprot.writeI32(struct.workingShiftNames.size());
        for (String _iter25 : struct.workingShiftNames)
        {
          oprot.writeString(_iter25);
        }
      }
      oprot.writeI64(struct.endTimeRegistration);
      {
        oprot.writeI32(struct.extendedRegistrations.size());
        for (long _iter26 : struct.extendedRegistrations)
        {
          oprot.writeI64(_iter26);
        }
      }
      oprot.writeI32(struct.numberOfWeekendDays);
      {
        oprot.writeI32(struct.vacationDays.size());
        for (String _iter27 : struct.vacationDays)
        {
          oprot.writeString(_iter27);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TVaccinationEventInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.eventId = iprot.readI32();
      struct.setEventIdIsSet(true);
      struct.eventName = iprot.readString();
      struct.setEventNameIsSet(true);
      struct.eventStatus = iprot.readI32();
      struct.setEventStatusIsSet(true);
      struct.startTimeRegistration = iprot.readI64();
      struct.setStartTimeRegistrationIsSet(true);
      struct.startTimeInjection = iprot.readI64();
      struct.setStartTimeInjectionIsSet(true);
      struct.totalOfDoses = iprot.readI32();
      struct.setTotalOfDosesIsSet(true);
      struct.numberOfInjectionsPerDay = iprot.readI32();
      struct.setNumberOfInjectionsPerDayIsSet(true);
      struct.numberOfRegistrations = iprot.readI32();
      struct.setNumberOfRegistrationsIsSet(true);
      struct.numberOfVaccinatedChildren = iprot.readI32();
      struct.setNumberOfVaccinatedChildrenIsSet(true);
      struct.vaccineId = iprot.readI32();
      struct.setVaccineIdIsSet(true);
      struct.centreId = iprot.readI32();
      struct.setCentreIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.registrations = new ArrayList<Long>(_list28.size);
        for (int _i29 = 0; _i29 < _list28.size; ++_i29)
        {
          long _elem30;
          _elem30 = iprot.readI64();
          struct.registrations.add(_elem30);
        }
      }
      struct.setRegistrationsIsSet(true);
      struct.injectionOrderNumberCounter = iprot.readI32();
      struct.setInjectionOrderNumberCounterIsSet(true);
      {
        org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.workingShiftNames = new ArrayList<String>(_list31.size);
        for (int _i32 = 0; _i32 < _list31.size; ++_i32)
        {
          String _elem33;
          _elem33 = iprot.readString();
          struct.workingShiftNames.add(_elem33);
        }
      }
      struct.setWorkingShiftNamesIsSet(true);
      struct.endTimeRegistration = iprot.readI64();
      struct.setEndTimeRegistrationIsSet(true);
      {
        org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.extendedRegistrations = new ArrayList<Long>(_list34.size);
        for (int _i35 = 0; _i35 < _list34.size; ++_i35)
        {
          long _elem36;
          _elem36 = iprot.readI64();
          struct.extendedRegistrations.add(_elem36);
        }
      }
      struct.setExtendedRegistrationsIsSet(true);
      struct.numberOfWeekendDays = iprot.readI32();
      struct.setNumberOfWeekendDaysIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set37 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.vacationDays = new HashSet<String>(2*_set37.size);
        for (int _i38 = 0; _i38 < _set37.size; ++_i38)
        {
          String _elem39;
          _elem39 = iprot.readString();
          struct.vacationDays.add(_elem39);
        }
      }
      struct.setVacationDaysIsSet(true);
    }
  }

}

