/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package crdhn.vr.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TVRRegistrationManagerService {

  public interface Iface {

    public crdhn.vr.thrift.response.TError getEventStatus(int eventId) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TRMAddRegistrationResponse addRegistration(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse addExtraRegistration(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TRMAddRegistrationResponse addExtendedRegistration(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getEventStatus(int eventId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRegistration(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addExtraRegistration(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addExtendedRegistration(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public crdhn.vr.thrift.response.TError getEventStatus(int eventId) throws org.apache.thrift.TException
    {
      send_getEventStatus(eventId);
      return recv_getEventStatus();
    }

    public void send_getEventStatus(int eventId) throws org.apache.thrift.TException
    {
      getEventStatus_args args = new getEventStatus_args();
      args.setEventId(eventId);
      sendBase("getEventStatus", args);
    }

    public crdhn.vr.thrift.response.TError recv_getEventStatus() throws org.apache.thrift.TException
    {
      getEventStatus_result result = new getEventStatus_result();
      receiveBase(result, "getEventStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEventStatus failed: unknown result");
    }

    public crdhn.vr.thrift.response.TRMAddRegistrationResponse addRegistration(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) throws org.apache.thrift.TException
    {
      send_addRegistration(registrationInfo);
      return recv_addRegistration();
    }

    public void send_addRegistration(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) throws org.apache.thrift.TException
    {
      addRegistration_args args = new addRegistration_args();
      args.setRegistrationInfo(registrationInfo);
      sendBase("addRegistration", args);
    }

    public crdhn.vr.thrift.response.TRMAddRegistrationResponse recv_addRegistration() throws org.apache.thrift.TException
    {
      addRegistration_result result = new addRegistration_result();
      receiveBase(result, "addRegistration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRegistration failed: unknown result");
    }

    public crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse addExtraRegistration(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) throws org.apache.thrift.TException
    {
      send_addExtraRegistration(registrationInfo);
      return recv_addExtraRegistration();
    }

    public void send_addExtraRegistration(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) throws org.apache.thrift.TException
    {
      addExtraRegistration_args args = new addExtraRegistration_args();
      args.setRegistrationInfo(registrationInfo);
      sendBase("addExtraRegistration", args);
    }

    public crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse recv_addExtraRegistration() throws org.apache.thrift.TException
    {
      addExtraRegistration_result result = new addExtraRegistration_result();
      receiveBase(result, "addExtraRegistration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addExtraRegistration failed: unknown result");
    }

    public crdhn.vr.thrift.response.TRMAddRegistrationResponse addExtendedRegistration(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) throws org.apache.thrift.TException
    {
      send_addExtendedRegistration(registrationInfo);
      return recv_addExtendedRegistration();
    }

    public void send_addExtendedRegistration(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) throws org.apache.thrift.TException
    {
      addExtendedRegistration_args args = new addExtendedRegistration_args();
      args.setRegistrationInfo(registrationInfo);
      sendBase("addExtendedRegistration", args);
    }

    public crdhn.vr.thrift.response.TRMAddRegistrationResponse recv_addExtendedRegistration() throws org.apache.thrift.TException
    {
      addExtendedRegistration_result result = new addExtendedRegistration_result();
      receiveBase(result, "addExtendedRegistration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addExtendedRegistration failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getEventStatus(int eventId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEventStatus_call method_call = new getEventStatus_call(eventId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEventStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int eventId;
      public getEventStatus_call(int eventId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventId = eventId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEventStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEventStatus_args args = new getEventStatus_args();
        args.setEventId(eventId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TError getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEventStatus();
      }
    }

    public void addRegistration(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRegistration_call method_call = new addRegistration_call(registrationInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRegistration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private crdhn.vr.thrift.data.TRegistrationInfo registrationInfo;
      public addRegistration_call(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.registrationInfo = registrationInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRegistration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRegistration_args args = new addRegistration_args();
        args.setRegistrationInfo(registrationInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TRMAddRegistrationResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRegistration();
      }
    }

    public void addExtraRegistration(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addExtraRegistration_call method_call = new addExtraRegistration_call(registrationInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addExtraRegistration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private crdhn.vr.thrift.data.TRegistrationInfo registrationInfo;
      public addExtraRegistration_call(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.registrationInfo = registrationInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addExtraRegistration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addExtraRegistration_args args = new addExtraRegistration_args();
        args.setRegistrationInfo(registrationInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addExtraRegistration();
      }
    }

    public void addExtendedRegistration(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addExtendedRegistration_call method_call = new addExtendedRegistration_call(registrationInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addExtendedRegistration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private crdhn.vr.thrift.data.TRegistrationInfo registrationInfo;
      public addExtendedRegistration_call(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.registrationInfo = registrationInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addExtendedRegistration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addExtendedRegistration_args args = new addExtendedRegistration_args();
        args.setRegistrationInfo(registrationInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TRMAddRegistrationResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addExtendedRegistration();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getEventStatus", new getEventStatus());
      processMap.put("addRegistration", new addRegistration());
      processMap.put("addExtraRegistration", new addExtraRegistration());
      processMap.put("addExtendedRegistration", new addExtendedRegistration());
      return processMap;
    }

    public static class getEventStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEventStatus_args> {
      public getEventStatus() {
        super("getEventStatus");
      }

      public getEventStatus_args getEmptyArgsInstance() {
        return new getEventStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEventStatus_result getResult(I iface, getEventStatus_args args) throws org.apache.thrift.TException {
        getEventStatus_result result = new getEventStatus_result();
        result.success = iface.getEventStatus(args.eventId);
        return result;
      }
    }

    public static class addRegistration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRegistration_args> {
      public addRegistration() {
        super("addRegistration");
      }

      public addRegistration_args getEmptyArgsInstance() {
        return new addRegistration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRegistration_result getResult(I iface, addRegistration_args args) throws org.apache.thrift.TException {
        addRegistration_result result = new addRegistration_result();
        result.success = iface.addRegistration(args.registrationInfo);
        return result;
      }
    }

    public static class addExtraRegistration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addExtraRegistration_args> {
      public addExtraRegistration() {
        super("addExtraRegistration");
      }

      public addExtraRegistration_args getEmptyArgsInstance() {
        return new addExtraRegistration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addExtraRegistration_result getResult(I iface, addExtraRegistration_args args) throws org.apache.thrift.TException {
        addExtraRegistration_result result = new addExtraRegistration_result();
        result.success = iface.addExtraRegistration(args.registrationInfo);
        return result;
      }
    }

    public static class addExtendedRegistration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addExtendedRegistration_args> {
      public addExtendedRegistration() {
        super("addExtendedRegistration");
      }

      public addExtendedRegistration_args getEmptyArgsInstance() {
        return new addExtendedRegistration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addExtendedRegistration_result getResult(I iface, addExtendedRegistration_args args) throws org.apache.thrift.TException {
        addExtendedRegistration_result result = new addExtendedRegistration_result();
        result.success = iface.addExtendedRegistration(args.registrationInfo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getEventStatus", new getEventStatus());
      processMap.put("addRegistration", new addRegistration());
      processMap.put("addExtraRegistration", new addExtraRegistration());
      processMap.put("addExtendedRegistration", new addExtendedRegistration());
      return processMap;
    }

    public static class getEventStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEventStatus_args, crdhn.vr.thrift.response.TError> {
      public getEventStatus() {
        super("getEventStatus");
      }

      public getEventStatus_args getEmptyArgsInstance() {
        return new getEventStatus_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TError> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TError>() { 
          public void onComplete(crdhn.vr.thrift.response.TError o) {
            getEventStatus_result result = new getEventStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEventStatus_result result = new getEventStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEventStatus_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TError> resultHandler) throws TException {
        iface.getEventStatus(args.eventId,resultHandler);
      }
    }

    public static class addRegistration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRegistration_args, crdhn.vr.thrift.response.TRMAddRegistrationResponse> {
      public addRegistration() {
        super("addRegistration");
      }

      public addRegistration_args getEmptyArgsInstance() {
        return new addRegistration_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TRMAddRegistrationResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TRMAddRegistrationResponse>() { 
          public void onComplete(crdhn.vr.thrift.response.TRMAddRegistrationResponse o) {
            addRegistration_result result = new addRegistration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRegistration_result result = new addRegistration_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRegistration_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TRMAddRegistrationResponse> resultHandler) throws TException {
        iface.addRegistration(args.registrationInfo,resultHandler);
      }
    }

    public static class addExtraRegistration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addExtraRegistration_args, crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse> {
      public addExtraRegistration() {
        super("addExtraRegistration");
      }

      public addExtraRegistration_args getEmptyArgsInstance() {
        return new addExtraRegistration_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse>() { 
          public void onComplete(crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse o) {
            addExtraRegistration_result result = new addExtraRegistration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addExtraRegistration_result result = new addExtraRegistration_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addExtraRegistration_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse> resultHandler) throws TException {
        iface.addExtraRegistration(args.registrationInfo,resultHandler);
      }
    }

    public static class addExtendedRegistration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addExtendedRegistration_args, crdhn.vr.thrift.response.TRMAddRegistrationResponse> {
      public addExtendedRegistration() {
        super("addExtendedRegistration");
      }

      public addExtendedRegistration_args getEmptyArgsInstance() {
        return new addExtendedRegistration_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TRMAddRegistrationResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TRMAddRegistrationResponse>() { 
          public void onComplete(crdhn.vr.thrift.response.TRMAddRegistrationResponse o) {
            addExtendedRegistration_result result = new addExtendedRegistration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addExtendedRegistration_result result = new addExtendedRegistration_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addExtendedRegistration_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TRMAddRegistrationResponse> resultHandler) throws TException {
        iface.addExtendedRegistration(args.registrationInfo,resultHandler);
      }
    }

  }

  public static class getEventStatus_args implements org.apache.thrift.TBase<getEventStatus_args, getEventStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEventStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventStatus_args");

    private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventStatus_argsTupleSchemeFactory());
    }

    public int eventId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_ID((short)1, "eventId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_ID
            return EVENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EVENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TVEID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventStatus_args.class, metaDataMap);
    }

    public getEventStatus_args() {
    }

    public getEventStatus_args(
      int eventId)
    {
      this();
      this.eventId = eventId;
      setEventIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventStatus_args(getEventStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.eventId = other.eventId;
    }

    public getEventStatus_args deepCopy() {
      return new getEventStatus_args(this);
    }

    @Override
    public void clear() {
      setEventIdIsSet(false);
      this.eventId = 0;
    }

    public int getEventId() {
      return this.eventId;
    }

    public getEventStatus_args setEventId(int eventId) {
      this.eventId = eventId;
      setEventIdIsSet(true);
      return this;
    }

    public void unsetEventId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTID_ISSET_ID);
    }

    /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
    public boolean isSetEventId() {
      return EncodingUtils.testBit(__isset_bitfield, __EVENTID_ISSET_ID);
    }

    public void setEventIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT_ID:
        if (value == null) {
          unsetEventId();
        } else {
          setEventId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_ID:
        return Integer.valueOf(getEventId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT_ID:
        return isSetEventId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventStatus_args)
        return this.equals((getEventStatus_args)that);
      return false;
    }

    public boolean equals(getEventStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_eventId = true;
      boolean that_present_eventId = true;
      if (this_present_eventId || that_present_eventId) {
        if (!(this_present_eventId && that_present_eventId))
          return false;
        if (this.eventId != that.eventId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEventStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEventId()).compareTo(other.isSetEventId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, other.eventId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventStatus_args(");
      boolean first = true;

      sb.append("eventId:");
      sb.append(this.eventId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getEventStatus_argsStandardScheme getScheme() {
        return new getEventStatus_argsStandardScheme();
      }
    }

    private static class getEventStatus_argsStandardScheme extends StandardScheme<getEventStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.eventId = iprot.readI32();
                struct.setEventIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
        oprot.writeI32(struct.eventId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getEventStatus_argsTupleScheme getScheme() {
        return new getEventStatus_argsTupleScheme();
      }
    }

    private static class getEventStatus_argsTupleScheme extends TupleScheme<getEventStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEventId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEventId()) {
          oprot.writeI32(struct.eventId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eventId = iprot.readI32();
          struct.setEventIdIsSet(true);
        }
      }
    }

  }

  public static class getEventStatus_result implements org.apache.thrift.TBase<getEventStatus_result, getEventStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEventStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventStatus_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TError success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TError.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventStatus_result.class, metaDataMap);
    }

    public getEventStatus_result() {
    }

    public getEventStatus_result(
      crdhn.vr.thrift.response.TError success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventStatus_result(getEventStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TError(other.success);
      }
    }

    public getEventStatus_result deepCopy() {
      return new getEventStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TError getSuccess() {
      return this.success;
    }

    public getEventStatus_result setSuccess(crdhn.vr.thrift.response.TError success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventStatus_result)
        return this.equals((getEventStatus_result)that);
      return false;
    }

    public boolean equals(getEventStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEventStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getEventStatus_resultStandardScheme getScheme() {
        return new getEventStatus_resultStandardScheme();
      }
    }

    private static class getEventStatus_resultStandardScheme extends StandardScheme<getEventStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TError();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getEventStatus_resultTupleScheme getScheme() {
        return new getEventStatus_resultTupleScheme();
      }
    }

    private static class getEventStatus_resultTupleScheme extends TupleScheme<getEventStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TError();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addRegistration_args implements org.apache.thrift.TBase<addRegistration_args, addRegistration_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRegistration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRegistration_args");

    private static final org.apache.thrift.protocol.TField REGISTRATION_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRegistration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRegistration_argsTupleSchemeFactory());
    }

    public crdhn.vr.thrift.data.TRegistrationInfo registrationInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGISTRATION_INFO((short)1, "registrationInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGISTRATION_INFO
            return REGISTRATION_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGISTRATION_INFO, new org.apache.thrift.meta_data.FieldMetaData("registrationInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.data.TRegistrationInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRegistration_args.class, metaDataMap);
    }

    public addRegistration_args() {
    }

    public addRegistration_args(
      crdhn.vr.thrift.data.TRegistrationInfo registrationInfo)
    {
      this();
      this.registrationInfo = registrationInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRegistration_args(addRegistration_args other) {
      if (other.isSetRegistrationInfo()) {
        this.registrationInfo = new crdhn.vr.thrift.data.TRegistrationInfo(other.registrationInfo);
      }
    }

    public addRegistration_args deepCopy() {
      return new addRegistration_args(this);
    }

    @Override
    public void clear() {
      this.registrationInfo = null;
    }

    public crdhn.vr.thrift.data.TRegistrationInfo getRegistrationInfo() {
      return this.registrationInfo;
    }

    public addRegistration_args setRegistrationInfo(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) {
      this.registrationInfo = registrationInfo;
      return this;
    }

    public void unsetRegistrationInfo() {
      this.registrationInfo = null;
    }

    /** Returns true if field registrationInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetRegistrationInfo() {
      return this.registrationInfo != null;
    }

    public void setRegistrationInfoIsSet(boolean value) {
      if (!value) {
        this.registrationInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGISTRATION_INFO:
        if (value == null) {
          unsetRegistrationInfo();
        } else {
          setRegistrationInfo((crdhn.vr.thrift.data.TRegistrationInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGISTRATION_INFO:
        return getRegistrationInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGISTRATION_INFO:
        return isSetRegistrationInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRegistration_args)
        return this.equals((addRegistration_args)that);
      return false;
    }

    public boolean equals(addRegistration_args that) {
      if (that == null)
        return false;

      boolean this_present_registrationInfo = true && this.isSetRegistrationInfo();
      boolean that_present_registrationInfo = true && that.isSetRegistrationInfo();
      if (this_present_registrationInfo || that_present_registrationInfo) {
        if (!(this_present_registrationInfo && that_present_registrationInfo))
          return false;
        if (!this.registrationInfo.equals(that.registrationInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addRegistration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRegistrationInfo()).compareTo(other.isSetRegistrationInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegistrationInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationInfo, other.registrationInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRegistration_args(");
      boolean first = true;

      sb.append("registrationInfo:");
      if (this.registrationInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.registrationInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (registrationInfo != null) {
        registrationInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRegistration_argsStandardSchemeFactory implements SchemeFactory {
      public addRegistration_argsStandardScheme getScheme() {
        return new addRegistration_argsStandardScheme();
      }
    }

    private static class addRegistration_argsStandardScheme extends StandardScheme<addRegistration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRegistration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGISTRATION_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.registrationInfo = new crdhn.vr.thrift.data.TRegistrationInfo();
                struct.registrationInfo.read(iprot);
                struct.setRegistrationInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRegistration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.registrationInfo != null) {
          oprot.writeFieldBegin(REGISTRATION_INFO_FIELD_DESC);
          struct.registrationInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRegistration_argsTupleSchemeFactory implements SchemeFactory {
      public addRegistration_argsTupleScheme getScheme() {
        return new addRegistration_argsTupleScheme();
      }
    }

    private static class addRegistration_argsTupleScheme extends TupleScheme<addRegistration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRegistration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRegistrationInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRegistrationInfo()) {
          struct.registrationInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRegistration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.registrationInfo = new crdhn.vr.thrift.data.TRegistrationInfo();
          struct.registrationInfo.read(iprot);
          struct.setRegistrationInfoIsSet(true);
        }
      }
    }

  }

  public static class addRegistration_result implements org.apache.thrift.TBase<addRegistration_result, addRegistration_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRegistration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRegistration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRegistration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRegistration_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TRMAddRegistrationResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TRMAddRegistrationResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRegistration_result.class, metaDataMap);
    }

    public addRegistration_result() {
    }

    public addRegistration_result(
      crdhn.vr.thrift.response.TRMAddRegistrationResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRegistration_result(addRegistration_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TRMAddRegistrationResponse(other.success);
      }
    }

    public addRegistration_result deepCopy() {
      return new addRegistration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TRMAddRegistrationResponse getSuccess() {
      return this.success;
    }

    public addRegistration_result setSuccess(crdhn.vr.thrift.response.TRMAddRegistrationResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TRMAddRegistrationResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRegistration_result)
        return this.equals((addRegistration_result)that);
      return false;
    }

    public boolean equals(addRegistration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addRegistration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRegistration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRegistration_resultStandardSchemeFactory implements SchemeFactory {
      public addRegistration_resultStandardScheme getScheme() {
        return new addRegistration_resultStandardScheme();
      }
    }

    private static class addRegistration_resultStandardScheme extends StandardScheme<addRegistration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRegistration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TRMAddRegistrationResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRegistration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRegistration_resultTupleSchemeFactory implements SchemeFactory {
      public addRegistration_resultTupleScheme getScheme() {
        return new addRegistration_resultTupleScheme();
      }
    }

    private static class addRegistration_resultTupleScheme extends TupleScheme<addRegistration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRegistration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRegistration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TRMAddRegistrationResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addExtraRegistration_args implements org.apache.thrift.TBase<addExtraRegistration_args, addExtraRegistration_args._Fields>, java.io.Serializable, Cloneable, Comparable<addExtraRegistration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addExtraRegistration_args");

    private static final org.apache.thrift.protocol.TField REGISTRATION_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addExtraRegistration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addExtraRegistration_argsTupleSchemeFactory());
    }

    public crdhn.vr.thrift.data.TRegistrationInfo registrationInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGISTRATION_INFO((short)1, "registrationInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGISTRATION_INFO
            return REGISTRATION_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGISTRATION_INFO, new org.apache.thrift.meta_data.FieldMetaData("registrationInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.data.TRegistrationInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addExtraRegistration_args.class, metaDataMap);
    }

    public addExtraRegistration_args() {
    }

    public addExtraRegistration_args(
      crdhn.vr.thrift.data.TRegistrationInfo registrationInfo)
    {
      this();
      this.registrationInfo = registrationInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addExtraRegistration_args(addExtraRegistration_args other) {
      if (other.isSetRegistrationInfo()) {
        this.registrationInfo = new crdhn.vr.thrift.data.TRegistrationInfo(other.registrationInfo);
      }
    }

    public addExtraRegistration_args deepCopy() {
      return new addExtraRegistration_args(this);
    }

    @Override
    public void clear() {
      this.registrationInfo = null;
    }

    public crdhn.vr.thrift.data.TRegistrationInfo getRegistrationInfo() {
      return this.registrationInfo;
    }

    public addExtraRegistration_args setRegistrationInfo(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) {
      this.registrationInfo = registrationInfo;
      return this;
    }

    public void unsetRegistrationInfo() {
      this.registrationInfo = null;
    }

    /** Returns true if field registrationInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetRegistrationInfo() {
      return this.registrationInfo != null;
    }

    public void setRegistrationInfoIsSet(boolean value) {
      if (!value) {
        this.registrationInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGISTRATION_INFO:
        if (value == null) {
          unsetRegistrationInfo();
        } else {
          setRegistrationInfo((crdhn.vr.thrift.data.TRegistrationInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGISTRATION_INFO:
        return getRegistrationInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGISTRATION_INFO:
        return isSetRegistrationInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addExtraRegistration_args)
        return this.equals((addExtraRegistration_args)that);
      return false;
    }

    public boolean equals(addExtraRegistration_args that) {
      if (that == null)
        return false;

      boolean this_present_registrationInfo = true && this.isSetRegistrationInfo();
      boolean that_present_registrationInfo = true && that.isSetRegistrationInfo();
      if (this_present_registrationInfo || that_present_registrationInfo) {
        if (!(this_present_registrationInfo && that_present_registrationInfo))
          return false;
        if (!this.registrationInfo.equals(that.registrationInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addExtraRegistration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRegistrationInfo()).compareTo(other.isSetRegistrationInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegistrationInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationInfo, other.registrationInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addExtraRegistration_args(");
      boolean first = true;

      sb.append("registrationInfo:");
      if (this.registrationInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.registrationInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (registrationInfo != null) {
        registrationInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addExtraRegistration_argsStandardSchemeFactory implements SchemeFactory {
      public addExtraRegistration_argsStandardScheme getScheme() {
        return new addExtraRegistration_argsStandardScheme();
      }
    }

    private static class addExtraRegistration_argsStandardScheme extends StandardScheme<addExtraRegistration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addExtraRegistration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGISTRATION_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.registrationInfo = new crdhn.vr.thrift.data.TRegistrationInfo();
                struct.registrationInfo.read(iprot);
                struct.setRegistrationInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addExtraRegistration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.registrationInfo != null) {
          oprot.writeFieldBegin(REGISTRATION_INFO_FIELD_DESC);
          struct.registrationInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addExtraRegistration_argsTupleSchemeFactory implements SchemeFactory {
      public addExtraRegistration_argsTupleScheme getScheme() {
        return new addExtraRegistration_argsTupleScheme();
      }
    }

    private static class addExtraRegistration_argsTupleScheme extends TupleScheme<addExtraRegistration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addExtraRegistration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRegistrationInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRegistrationInfo()) {
          struct.registrationInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addExtraRegistration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.registrationInfo = new crdhn.vr.thrift.data.TRegistrationInfo();
          struct.registrationInfo.read(iprot);
          struct.setRegistrationInfoIsSet(true);
        }
      }
    }

  }

  public static class addExtraRegistration_result implements org.apache.thrift.TBase<addExtraRegistration_result, addExtraRegistration_result._Fields>, java.io.Serializable, Cloneable, Comparable<addExtraRegistration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addExtraRegistration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addExtraRegistration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addExtraRegistration_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addExtraRegistration_result.class, metaDataMap);
    }

    public addExtraRegistration_result() {
    }

    public addExtraRegistration_result(
      crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addExtraRegistration_result(addExtraRegistration_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse(other.success);
      }
    }

    public addExtraRegistration_result deepCopy() {
      return new addExtraRegistration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse getSuccess() {
      return this.success;
    }

    public addExtraRegistration_result setSuccess(crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addExtraRegistration_result)
        return this.equals((addExtraRegistration_result)that);
      return false;
    }

    public boolean equals(addExtraRegistration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addExtraRegistration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addExtraRegistration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addExtraRegistration_resultStandardSchemeFactory implements SchemeFactory {
      public addExtraRegistration_resultStandardScheme getScheme() {
        return new addExtraRegistration_resultStandardScheme();
      }
    }

    private static class addExtraRegistration_resultStandardScheme extends StandardScheme<addExtraRegistration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addExtraRegistration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addExtraRegistration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addExtraRegistration_resultTupleSchemeFactory implements SchemeFactory {
      public addExtraRegistration_resultTupleScheme getScheme() {
        return new addExtraRegistration_resultTupleScheme();
      }
    }

    private static class addExtraRegistration_resultTupleScheme extends TupleScheme<addExtraRegistration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addExtraRegistration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addExtraRegistration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TRMAddExtraRegistrationResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addExtendedRegistration_args implements org.apache.thrift.TBase<addExtendedRegistration_args, addExtendedRegistration_args._Fields>, java.io.Serializable, Cloneable, Comparable<addExtendedRegistration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addExtendedRegistration_args");

    private static final org.apache.thrift.protocol.TField REGISTRATION_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addExtendedRegistration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addExtendedRegistration_argsTupleSchemeFactory());
    }

    public crdhn.vr.thrift.data.TRegistrationInfo registrationInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGISTRATION_INFO((short)1, "registrationInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGISTRATION_INFO
            return REGISTRATION_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGISTRATION_INFO, new org.apache.thrift.meta_data.FieldMetaData("registrationInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.data.TRegistrationInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addExtendedRegistration_args.class, metaDataMap);
    }

    public addExtendedRegistration_args() {
    }

    public addExtendedRegistration_args(
      crdhn.vr.thrift.data.TRegistrationInfo registrationInfo)
    {
      this();
      this.registrationInfo = registrationInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addExtendedRegistration_args(addExtendedRegistration_args other) {
      if (other.isSetRegistrationInfo()) {
        this.registrationInfo = new crdhn.vr.thrift.data.TRegistrationInfo(other.registrationInfo);
      }
    }

    public addExtendedRegistration_args deepCopy() {
      return new addExtendedRegistration_args(this);
    }

    @Override
    public void clear() {
      this.registrationInfo = null;
    }

    public crdhn.vr.thrift.data.TRegistrationInfo getRegistrationInfo() {
      return this.registrationInfo;
    }

    public addExtendedRegistration_args setRegistrationInfo(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) {
      this.registrationInfo = registrationInfo;
      return this;
    }

    public void unsetRegistrationInfo() {
      this.registrationInfo = null;
    }

    /** Returns true if field registrationInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetRegistrationInfo() {
      return this.registrationInfo != null;
    }

    public void setRegistrationInfoIsSet(boolean value) {
      if (!value) {
        this.registrationInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGISTRATION_INFO:
        if (value == null) {
          unsetRegistrationInfo();
        } else {
          setRegistrationInfo((crdhn.vr.thrift.data.TRegistrationInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGISTRATION_INFO:
        return getRegistrationInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGISTRATION_INFO:
        return isSetRegistrationInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addExtendedRegistration_args)
        return this.equals((addExtendedRegistration_args)that);
      return false;
    }

    public boolean equals(addExtendedRegistration_args that) {
      if (that == null)
        return false;

      boolean this_present_registrationInfo = true && this.isSetRegistrationInfo();
      boolean that_present_registrationInfo = true && that.isSetRegistrationInfo();
      if (this_present_registrationInfo || that_present_registrationInfo) {
        if (!(this_present_registrationInfo && that_present_registrationInfo))
          return false;
        if (!this.registrationInfo.equals(that.registrationInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addExtendedRegistration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRegistrationInfo()).compareTo(other.isSetRegistrationInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegistrationInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationInfo, other.registrationInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addExtendedRegistration_args(");
      boolean first = true;

      sb.append("registrationInfo:");
      if (this.registrationInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.registrationInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (registrationInfo != null) {
        registrationInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addExtendedRegistration_argsStandardSchemeFactory implements SchemeFactory {
      public addExtendedRegistration_argsStandardScheme getScheme() {
        return new addExtendedRegistration_argsStandardScheme();
      }
    }

    private static class addExtendedRegistration_argsStandardScheme extends StandardScheme<addExtendedRegistration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addExtendedRegistration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGISTRATION_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.registrationInfo = new crdhn.vr.thrift.data.TRegistrationInfo();
                struct.registrationInfo.read(iprot);
                struct.setRegistrationInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addExtendedRegistration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.registrationInfo != null) {
          oprot.writeFieldBegin(REGISTRATION_INFO_FIELD_DESC);
          struct.registrationInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addExtendedRegistration_argsTupleSchemeFactory implements SchemeFactory {
      public addExtendedRegistration_argsTupleScheme getScheme() {
        return new addExtendedRegistration_argsTupleScheme();
      }
    }

    private static class addExtendedRegistration_argsTupleScheme extends TupleScheme<addExtendedRegistration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addExtendedRegistration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRegistrationInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRegistrationInfo()) {
          struct.registrationInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addExtendedRegistration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.registrationInfo = new crdhn.vr.thrift.data.TRegistrationInfo();
          struct.registrationInfo.read(iprot);
          struct.setRegistrationInfoIsSet(true);
        }
      }
    }

  }

  public static class addExtendedRegistration_result implements org.apache.thrift.TBase<addExtendedRegistration_result, addExtendedRegistration_result._Fields>, java.io.Serializable, Cloneable, Comparable<addExtendedRegistration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addExtendedRegistration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addExtendedRegistration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addExtendedRegistration_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TRMAddRegistrationResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TRMAddRegistrationResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addExtendedRegistration_result.class, metaDataMap);
    }

    public addExtendedRegistration_result() {
    }

    public addExtendedRegistration_result(
      crdhn.vr.thrift.response.TRMAddRegistrationResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addExtendedRegistration_result(addExtendedRegistration_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TRMAddRegistrationResponse(other.success);
      }
    }

    public addExtendedRegistration_result deepCopy() {
      return new addExtendedRegistration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TRMAddRegistrationResponse getSuccess() {
      return this.success;
    }

    public addExtendedRegistration_result setSuccess(crdhn.vr.thrift.response.TRMAddRegistrationResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TRMAddRegistrationResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addExtendedRegistration_result)
        return this.equals((addExtendedRegistration_result)that);
      return false;
    }

    public boolean equals(addExtendedRegistration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addExtendedRegistration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addExtendedRegistration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addExtendedRegistration_resultStandardSchemeFactory implements SchemeFactory {
      public addExtendedRegistration_resultStandardScheme getScheme() {
        return new addExtendedRegistration_resultStandardScheme();
      }
    }

    private static class addExtendedRegistration_resultStandardScheme extends StandardScheme<addExtendedRegistration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addExtendedRegistration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TRMAddRegistrationResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addExtendedRegistration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addExtendedRegistration_resultTupleSchemeFactory implements SchemeFactory {
      public addExtendedRegistration_resultTupleScheme getScheme() {
        return new addExtendedRegistration_resultTupleScheme();
      }
    }

    private static class addExtendedRegistration_resultTupleScheme extends TupleScheme<addExtendedRegistration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addExtendedRegistration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addExtendedRegistration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TRMAddRegistrationResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
