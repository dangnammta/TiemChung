/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TVRRegistrationManagerService_H
#define TVRRegistrationManagerService_H

#include <thrift/TDispatchProcessor.h>
#include "vrregistrationmanagerservice_types.h"

namespace CRDHN { namespace VR {

class TVRRegistrationManagerServiceIf {
 public:
  virtual ~TVRRegistrationManagerServiceIf() {}
  virtual void getEventStatus( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TEID eventId) = 0;
  virtual void addRegistration( ::CRDHN::VR::Response::TRMAddRegistrationResponse& _return, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo) = 0;
  virtual void addExtraRegistration( ::CRDHN::VR::Response::TRMAddExtraRegistrationResponse& _return, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo) = 0;
  virtual void addExtendedRegistration( ::CRDHN::VR::Response::TRMAddRegistrationResponse& _return, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo, const int32_t desiredOrderNumber) = 0;
};

class TVRRegistrationManagerServiceIfFactory {
 public:
  typedef TVRRegistrationManagerServiceIf Handler;

  virtual ~TVRRegistrationManagerServiceIfFactory() {}

  virtual TVRRegistrationManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TVRRegistrationManagerServiceIf* /* handler */) = 0;
};

class TVRRegistrationManagerServiceIfSingletonFactory : virtual public TVRRegistrationManagerServiceIfFactory {
 public:
  TVRRegistrationManagerServiceIfSingletonFactory(const boost::shared_ptr<TVRRegistrationManagerServiceIf>& iface) : iface_(iface) {}
  virtual ~TVRRegistrationManagerServiceIfSingletonFactory() {}

  virtual TVRRegistrationManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TVRRegistrationManagerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TVRRegistrationManagerServiceIf> iface_;
};

class TVRRegistrationManagerServiceNull : virtual public TVRRegistrationManagerServiceIf {
 public:
  virtual ~TVRRegistrationManagerServiceNull() {}
  void getEventStatus( ::CRDHN::VR::Response::TError& /* _return */, const  ::CRDHN::VR::Data::TEID /* eventId */) {
    return;
  }
  void addRegistration( ::CRDHN::VR::Response::TRMAddRegistrationResponse& /* _return */, const  ::CRDHN::VR::Data::TRegistrationInfo& /* registrationInfo */) {
    return;
  }
  void addExtraRegistration( ::CRDHN::VR::Response::TRMAddExtraRegistrationResponse& /* _return */, const  ::CRDHN::VR::Data::TRegistrationInfo& /* registrationInfo */) {
    return;
  }
  void addExtendedRegistration( ::CRDHN::VR::Response::TRMAddRegistrationResponse& /* _return */, const  ::CRDHN::VR::Data::TRegistrationInfo& /* registrationInfo */, const int32_t /* desiredOrderNumber */) {
    return;
  }
};

typedef struct _TVRRegistrationManagerService_getEventStatus_args__isset {
  _TVRRegistrationManagerService_getEventStatus_args__isset() : eventId(false) {}
  bool eventId;
} _TVRRegistrationManagerService_getEventStatus_args__isset;

class TVRRegistrationManagerService_getEventStatus_args {
 public:

  TVRRegistrationManagerService_getEventStatus_args() : eventId(0) {
  }

  virtual ~TVRRegistrationManagerService_getEventStatus_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;

  _TVRRegistrationManagerService_getEventStatus_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  bool operator == (const TVRRegistrationManagerService_getEventStatus_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationManagerService_getEventStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationManagerService_getEventStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRRegistrationManagerService_getEventStatus_pargs {
 public:


  virtual ~TVRRegistrationManagerService_getEventStatus_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationManagerService_getEventStatus_result__isset {
  _TVRRegistrationManagerService_getEventStatus_result__isset() : success(false) {}
  bool success;
} _TVRRegistrationManagerService_getEventStatus_result__isset;

class TVRRegistrationManagerService_getEventStatus_result {
 public:

  TVRRegistrationManagerService_getEventStatus_result() {
  }

  virtual ~TVRRegistrationManagerService_getEventStatus_result() throw() {}

   ::CRDHN::VR::Response::TError success;

  _TVRRegistrationManagerService_getEventStatus_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TError& val) {
    success = val;
  }

  bool operator == (const TVRRegistrationManagerService_getEventStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationManagerService_getEventStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationManagerService_getEventStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationManagerService_getEventStatus_presult__isset {
  _TVRRegistrationManagerService_getEventStatus_presult__isset() : success(false) {}
  bool success;
} _TVRRegistrationManagerService_getEventStatus_presult__isset;

class TVRRegistrationManagerService_getEventStatus_presult {
 public:


  virtual ~TVRRegistrationManagerService_getEventStatus_presult() throw() {}

   ::CRDHN::VR::Response::TError* success;

  _TVRRegistrationManagerService_getEventStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRRegistrationManagerService_addRegistration_args__isset {
  _TVRRegistrationManagerService_addRegistration_args__isset() : registrationInfo(false) {}
  bool registrationInfo;
} _TVRRegistrationManagerService_addRegistration_args__isset;

class TVRRegistrationManagerService_addRegistration_args {
 public:

  TVRRegistrationManagerService_addRegistration_args() {
  }

  virtual ~TVRRegistrationManagerService_addRegistration_args() throw() {}

   ::CRDHN::VR::Data::TRegistrationInfo registrationInfo;

  _TVRRegistrationManagerService_addRegistration_args__isset __isset;

  void __set_registrationInfo(const  ::CRDHN::VR::Data::TRegistrationInfo& val) {
    registrationInfo = val;
  }

  bool operator == (const TVRRegistrationManagerService_addRegistration_args & rhs) const
  {
    if (!(registrationInfo == rhs.registrationInfo))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationManagerService_addRegistration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationManagerService_addRegistration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRRegistrationManagerService_addRegistration_pargs {
 public:


  virtual ~TVRRegistrationManagerService_addRegistration_pargs() throw() {}

  const  ::CRDHN::VR::Data::TRegistrationInfo* registrationInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationManagerService_addRegistration_result__isset {
  _TVRRegistrationManagerService_addRegistration_result__isset() : success(false) {}
  bool success;
} _TVRRegistrationManagerService_addRegistration_result__isset;

class TVRRegistrationManagerService_addRegistration_result {
 public:

  TVRRegistrationManagerService_addRegistration_result() {
  }

  virtual ~TVRRegistrationManagerService_addRegistration_result() throw() {}

   ::CRDHN::VR::Response::TRMAddRegistrationResponse success;

  _TVRRegistrationManagerService_addRegistration_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TRMAddRegistrationResponse& val) {
    success = val;
  }

  bool operator == (const TVRRegistrationManagerService_addRegistration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationManagerService_addRegistration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationManagerService_addRegistration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationManagerService_addRegistration_presult__isset {
  _TVRRegistrationManagerService_addRegistration_presult__isset() : success(false) {}
  bool success;
} _TVRRegistrationManagerService_addRegistration_presult__isset;

class TVRRegistrationManagerService_addRegistration_presult {
 public:


  virtual ~TVRRegistrationManagerService_addRegistration_presult() throw() {}

   ::CRDHN::VR::Response::TRMAddRegistrationResponse* success;

  _TVRRegistrationManagerService_addRegistration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRRegistrationManagerService_addExtraRegistration_args__isset {
  _TVRRegistrationManagerService_addExtraRegistration_args__isset() : registrationInfo(false) {}
  bool registrationInfo;
} _TVRRegistrationManagerService_addExtraRegistration_args__isset;

class TVRRegistrationManagerService_addExtraRegistration_args {
 public:

  TVRRegistrationManagerService_addExtraRegistration_args() {
  }

  virtual ~TVRRegistrationManagerService_addExtraRegistration_args() throw() {}

   ::CRDHN::VR::Data::TRegistrationInfo registrationInfo;

  _TVRRegistrationManagerService_addExtraRegistration_args__isset __isset;

  void __set_registrationInfo(const  ::CRDHN::VR::Data::TRegistrationInfo& val) {
    registrationInfo = val;
  }

  bool operator == (const TVRRegistrationManagerService_addExtraRegistration_args & rhs) const
  {
    if (!(registrationInfo == rhs.registrationInfo))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationManagerService_addExtraRegistration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationManagerService_addExtraRegistration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRRegistrationManagerService_addExtraRegistration_pargs {
 public:


  virtual ~TVRRegistrationManagerService_addExtraRegistration_pargs() throw() {}

  const  ::CRDHN::VR::Data::TRegistrationInfo* registrationInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationManagerService_addExtraRegistration_result__isset {
  _TVRRegistrationManagerService_addExtraRegistration_result__isset() : success(false) {}
  bool success;
} _TVRRegistrationManagerService_addExtraRegistration_result__isset;

class TVRRegistrationManagerService_addExtraRegistration_result {
 public:

  TVRRegistrationManagerService_addExtraRegistration_result() {
  }

  virtual ~TVRRegistrationManagerService_addExtraRegistration_result() throw() {}

   ::CRDHN::VR::Response::TRMAddExtraRegistrationResponse success;

  _TVRRegistrationManagerService_addExtraRegistration_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TRMAddExtraRegistrationResponse& val) {
    success = val;
  }

  bool operator == (const TVRRegistrationManagerService_addExtraRegistration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationManagerService_addExtraRegistration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationManagerService_addExtraRegistration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationManagerService_addExtraRegistration_presult__isset {
  _TVRRegistrationManagerService_addExtraRegistration_presult__isset() : success(false) {}
  bool success;
} _TVRRegistrationManagerService_addExtraRegistration_presult__isset;

class TVRRegistrationManagerService_addExtraRegistration_presult {
 public:


  virtual ~TVRRegistrationManagerService_addExtraRegistration_presult() throw() {}

   ::CRDHN::VR::Response::TRMAddExtraRegistrationResponse* success;

  _TVRRegistrationManagerService_addExtraRegistration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRRegistrationManagerService_addExtendedRegistration_args__isset {
  _TVRRegistrationManagerService_addExtendedRegistration_args__isset() : registrationInfo(false), desiredOrderNumber(false) {}
  bool registrationInfo;
  bool desiredOrderNumber;
} _TVRRegistrationManagerService_addExtendedRegistration_args__isset;

class TVRRegistrationManagerService_addExtendedRegistration_args {
 public:

  TVRRegistrationManagerService_addExtendedRegistration_args() : desiredOrderNumber(0) {
  }

  virtual ~TVRRegistrationManagerService_addExtendedRegistration_args() throw() {}

   ::CRDHN::VR::Data::TRegistrationInfo registrationInfo;
  int32_t desiredOrderNumber;

  _TVRRegistrationManagerService_addExtendedRegistration_args__isset __isset;

  void __set_registrationInfo(const  ::CRDHN::VR::Data::TRegistrationInfo& val) {
    registrationInfo = val;
  }

  void __set_desiredOrderNumber(const int32_t val) {
    desiredOrderNumber = val;
  }

  bool operator == (const TVRRegistrationManagerService_addExtendedRegistration_args & rhs) const
  {
    if (!(registrationInfo == rhs.registrationInfo))
      return false;
    if (!(desiredOrderNumber == rhs.desiredOrderNumber))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationManagerService_addExtendedRegistration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationManagerService_addExtendedRegistration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRRegistrationManagerService_addExtendedRegistration_pargs {
 public:


  virtual ~TVRRegistrationManagerService_addExtendedRegistration_pargs() throw() {}

  const  ::CRDHN::VR::Data::TRegistrationInfo* registrationInfo;
  const int32_t* desiredOrderNumber;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationManagerService_addExtendedRegistration_result__isset {
  _TVRRegistrationManagerService_addExtendedRegistration_result__isset() : success(false) {}
  bool success;
} _TVRRegistrationManagerService_addExtendedRegistration_result__isset;

class TVRRegistrationManagerService_addExtendedRegistration_result {
 public:

  TVRRegistrationManagerService_addExtendedRegistration_result() {
  }

  virtual ~TVRRegistrationManagerService_addExtendedRegistration_result() throw() {}

   ::CRDHN::VR::Response::TRMAddRegistrationResponse success;

  _TVRRegistrationManagerService_addExtendedRegistration_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TRMAddRegistrationResponse& val) {
    success = val;
  }

  bool operator == (const TVRRegistrationManagerService_addExtendedRegistration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationManagerService_addExtendedRegistration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationManagerService_addExtendedRegistration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationManagerService_addExtendedRegistration_presult__isset {
  _TVRRegistrationManagerService_addExtendedRegistration_presult__isset() : success(false) {}
  bool success;
} _TVRRegistrationManagerService_addExtendedRegistration_presult__isset;

class TVRRegistrationManagerService_addExtendedRegistration_presult {
 public:


  virtual ~TVRRegistrationManagerService_addExtendedRegistration_presult() throw() {}

   ::CRDHN::VR::Response::TRMAddRegistrationResponse* success;

  _TVRRegistrationManagerService_addExtendedRegistration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TVRRegistrationManagerServiceClient : virtual public TVRRegistrationManagerServiceIf {
 public:
  TVRRegistrationManagerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TVRRegistrationManagerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getEventStatus( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TEID eventId);
  void send_getEventStatus(const  ::CRDHN::VR::Data::TEID eventId);
  void recv_getEventStatus( ::CRDHN::VR::Response::TError& _return);
  void addRegistration( ::CRDHN::VR::Response::TRMAddRegistrationResponse& _return, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo);
  void send_addRegistration(const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo);
  void recv_addRegistration( ::CRDHN::VR::Response::TRMAddRegistrationResponse& _return);
  void addExtraRegistration( ::CRDHN::VR::Response::TRMAddExtraRegistrationResponse& _return, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo);
  void send_addExtraRegistration(const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo);
  void recv_addExtraRegistration( ::CRDHN::VR::Response::TRMAddExtraRegistrationResponse& _return);
  void addExtendedRegistration( ::CRDHN::VR::Response::TRMAddRegistrationResponse& _return, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo, const int32_t desiredOrderNumber);
  void send_addExtendedRegistration(const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo, const int32_t desiredOrderNumber);
  void recv_addExtendedRegistration( ::CRDHN::VR::Response::TRMAddRegistrationResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TVRRegistrationManagerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TVRRegistrationManagerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TVRRegistrationManagerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getEventStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addRegistration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addExtraRegistration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addExtendedRegistration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TVRRegistrationManagerServiceProcessor(boost::shared_ptr<TVRRegistrationManagerServiceIf> iface) :
    iface_(iface) {
    processMap_["getEventStatus"] = &TVRRegistrationManagerServiceProcessor::process_getEventStatus;
    processMap_["addRegistration"] = &TVRRegistrationManagerServiceProcessor::process_addRegistration;
    processMap_["addExtraRegistration"] = &TVRRegistrationManagerServiceProcessor::process_addExtraRegistration;
    processMap_["addExtendedRegistration"] = &TVRRegistrationManagerServiceProcessor::process_addExtendedRegistration;
  }

  virtual ~TVRRegistrationManagerServiceProcessor() {}
};

class TVRRegistrationManagerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TVRRegistrationManagerServiceProcessorFactory(const ::boost::shared_ptr< TVRRegistrationManagerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TVRRegistrationManagerServiceIfFactory > handlerFactory_;
};

class TVRRegistrationManagerServiceMultiface : virtual public TVRRegistrationManagerServiceIf {
 public:
  TVRRegistrationManagerServiceMultiface(std::vector<boost::shared_ptr<TVRRegistrationManagerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TVRRegistrationManagerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TVRRegistrationManagerServiceIf> > ifaces_;
  TVRRegistrationManagerServiceMultiface() {}
  void add(boost::shared_ptr<TVRRegistrationManagerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getEventStatus( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TEID eventId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEventStatus(_return, eventId);
    }
    ifaces_[i]->getEventStatus(_return, eventId);
    return;
  }

  void addRegistration( ::CRDHN::VR::Response::TRMAddRegistrationResponse& _return, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addRegistration(_return, registrationInfo);
    }
    ifaces_[i]->addRegistration(_return, registrationInfo);
    return;
  }

  void addExtraRegistration( ::CRDHN::VR::Response::TRMAddExtraRegistrationResponse& _return, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addExtraRegistration(_return, registrationInfo);
    }
    ifaces_[i]->addExtraRegistration(_return, registrationInfo);
    return;
  }

  void addExtendedRegistration( ::CRDHN::VR::Response::TRMAddRegistrationResponse& _return, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo, const int32_t desiredOrderNumber) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addExtendedRegistration(_return, registrationInfo, desiredOrderNumber);
    }
    ifaces_[i]->addExtendedRegistration(_return, registrationInfo, desiredOrderNumber);
    return;
  }

};

}} // namespace

#endif
