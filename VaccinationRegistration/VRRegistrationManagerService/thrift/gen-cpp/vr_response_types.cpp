/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "vr_response_types.h"

#include <algorithm>

namespace CRDHN { namespace VR { namespace Response {

int _kTErrorCodeValues[] = {
  EC_OK,
  EC_SYSTEM,
  EC_PARAM_ERROR,
  EC_NOT_ALLOWED,
  EC_PIN_REGISTERED,
  EC_REGISTRATION_FULL,
  EC_REGISTRATION_AVAILABLE,
  EC_REGISTRATION_PENDING,
  EC_REGISTRATION_DISABLE,
  EC_EVENT_INFO,
  EC_REGISTRATION_INFO,
  EC_DAILY_REGISTRATIONS,
  EC_DAILY_INJECTION,
  EC_LIST_EVENTS,
  EC_VACCINE_INFO,
  EC_CENTRE_INFO,
  EC_COMMON_STORE
};
const char* _kTErrorCodeNames[] = {
  "EC_OK",
  "EC_SYSTEM",
  "EC_PARAM_ERROR",
  "EC_NOT_ALLOWED",
  "EC_PIN_REGISTERED",
  "EC_REGISTRATION_FULL",
  "EC_REGISTRATION_AVAILABLE",
  "EC_REGISTRATION_PENDING",
  "EC_REGISTRATION_DISABLE",
  "EC_EVENT_INFO",
  "EC_REGISTRATION_INFO",
  "EC_DAILY_REGISTRATIONS",
  "EC_DAILY_INJECTION",
  "EC_LIST_EVENTS",
  "EC_VACCINE_INFO",
  "EC_CENTRE_INFO",
  "EC_COMMON_STORE"
};
const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(17, _kTErrorCodeValues, _kTErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* TError::ascii_fingerprint = "96705E9A3FD7B072319C71653E0DBB90";
const uint8_t TError::binary_fingerprint[16] = {0x96,0x70,0x5E,0x9A,0x3F,0xD7,0xB0,0x72,0x31,0x9C,0x71,0x65,0x3E,0x0D,0xBB,0x90};

uint32_t TError::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_errorCode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          isset_errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorMessage);
          this->__isset.errorMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_errorCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TError::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TError");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.errorMessage) {
    xfer += oprot->writeFieldBegin("errorMessage", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->errorMessage);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TError &a, TError &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.errorMessage, b.errorMessage);
  swap(a.__isset, b.__isset);
}

const char* TRMAddRegistrationResponse::ascii_fingerprint = "897791680A24D292AA38F98A67A2321C";
const uint8_t TRMAddRegistrationResponse::binary_fingerprint[16] = {0x89,0x77,0x91,0x68,0x0A,0x24,0xD2,0x92,0xAA,0x38,0xF9,0x8A,0x67,0xA2,0x32,0x1C};

uint32_t TRMAddRegistrationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error = false;
  bool isset_registrationCode = false;
  bool isset_injectionOrderNumber = false;
  bool isset_injectionDate = false;
  bool isset_injectionTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->registrationCode);
          isset_registrationCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->injectionOrderNumber);
          isset_injectionOrderNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->injectionDate);
          isset_injectionDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->injectionTime);
          isset_injectionTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_registrationCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_injectionOrderNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_injectionDate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_injectionTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TRMAddRegistrationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TRMAddRegistrationResponse");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("registrationCode", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->registrationCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("injectionOrderNumber", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->injectionOrderNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("injectionDate", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->injectionDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("injectionTime", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->injectionTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TRMAddRegistrationResponse &a, TRMAddRegistrationResponse &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.registrationCode, b.registrationCode);
  swap(a.injectionOrderNumber, b.injectionOrderNumber);
  swap(a.injectionDate, b.injectionDate);
  swap(a.injectionTime, b.injectionTime);
}

const char* TRMAddExtraRegistrationResponse::ascii_fingerprint = "897791680A24D292AA38F98A67A2321C";
const uint8_t TRMAddExtraRegistrationResponse::binary_fingerprint[16] = {0x89,0x77,0x91,0x68,0x0A,0x24,0xD2,0x92,0xAA,0x38,0xF9,0x8A,0x67,0xA2,0x32,0x1C};

uint32_t TRMAddExtraRegistrationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error = false;
  bool isset_registrationCode = false;
  bool isset_injectionOrderNumber = false;
  bool isset_injectionDate = false;
  bool isset_injectionTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->registrationCode);
          isset_registrationCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->injectionOrderNumber);
          isset_injectionOrderNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->injectionDate);
          isset_injectionDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->injectionTime);
          isset_injectionTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_registrationCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_injectionOrderNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_injectionDate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_injectionTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TRMAddExtraRegistrationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TRMAddExtraRegistrationResponse");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("registrationCode", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->registrationCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("injectionOrderNumber", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->injectionOrderNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("injectionDate", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->injectionDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("injectionTime", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->injectionTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TRMAddExtraRegistrationResponse &a, TRMAddExtraRegistrationResponse &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.registrationCode, b.registrationCode);
  swap(a.injectionOrderNumber, b.injectionOrderNumber);
  swap(a.injectionDate, b.injectionDate);
  swap(a.injectionTime, b.injectionTime);
}

const char* TVMCreateEventResponse::ascii_fingerprint = "185E211EF099F86731CDFE27B73C6174";
const uint8_t TVMCreateEventResponse::binary_fingerprint[16] = {0x18,0x5E,0x21,0x1E,0xF0,0x99,0xF8,0x67,0x31,0xCD,0xFE,0x27,0xB7,0x3C,0x61,0x74};

uint32_t TVMCreateEventResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventId);
          this->__isset.eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TVMCreateEventResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TVMCreateEventResponse");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.eventId) {
    xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->eventId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TVMCreateEventResponse &a, TVMCreateEventResponse &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.eventId, b.eventId);
  swap(a.__isset, b.__isset);
}

const char* TVMGetEventInfoResponse::ascii_fingerprint = "FCCFAD034D3E733DB29BE0857C29C138";
const uint8_t TVMGetEventInfoResponse::binary_fingerprint[16] = {0xFC,0xCF,0xAD,0x03,0x4D,0x3E,0x73,0x3D,0xB2,0x9B,0xE0,0x85,0x7C,0x29,0xC1,0x38};

uint32_t TVMGetEventInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->eventInfo.read(iprot);
          this->__isset.eventInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TVMGetEventInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TVMGetEventInfoResponse");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.eventInfo) {
    xfer += oprot->writeFieldBegin("eventInfo", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->eventInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TVMGetEventInfoResponse &a, TVMGetEventInfoResponse &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.eventInfo, b.eventInfo);
  swap(a.__isset, b.__isset);
}

const char* TVMGetEventsResponse::ascii_fingerprint = "5212D0AFDE8D2697E37DFC6FAF39AED9";
const uint8_t TVMGetEventsResponse::binary_fingerprint[16] = {0x52,0x12,0xD0,0xAF,0xDE,0x8D,0x26,0x97,0xE3,0x7D,0xFC,0x6F,0xAF,0x39,0xAE,0xD9};

uint32_t TVMGetEventsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->events.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->events.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->events[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.events = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TVMGetEventsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TVMGetEventsResponse");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.events) {
    xfer += oprot->writeFieldBegin("events", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->events.size()));
      std::vector< ::CRDHN::VR::Data::TEventBasicInfo> ::const_iterator _iter5;
      for (_iter5 = this->events.begin(); _iter5 != this->events.end(); ++_iter5)
      {
        xfer += (*_iter5).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TVMGetEventsResponse &a, TVMGetEventsResponse &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.events, b.events);
  swap(a.__isset, b.__isset);
}

const char* TVMGetRegistrationResponse::ascii_fingerprint = "9CE19CF63B832697EC4305EA81434FA6";
const uint8_t TVMGetRegistrationResponse::binary_fingerprint[16] = {0x9C,0xE1,0x9C,0xF6,0x3B,0x83,0x26,0x97,0xEC,0x43,0x05,0xEA,0x81,0x43,0x4F,0xA6};

uint32_t TVMGetRegistrationResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->registrationInfo.read(iprot);
          this->__isset.registrationInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TVMGetRegistrationResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TVMGetRegistrationResponse");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.registrationInfo) {
    xfer += oprot->writeFieldBegin("registrationInfo", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->registrationInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TVMGetRegistrationResponse &a, TVMGetRegistrationResponse &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.registrationInfo, b.registrationInfo);
  swap(a.__isset, b.__isset);
}

const char* TVMGetRegistrationsResponse::ascii_fingerprint = "2B5025DA6BD045C7870228CFF60C4A5C";
const uint8_t TVMGetRegistrationsResponse::binary_fingerprint[16] = {0x2B,0x50,0x25,0xDA,0x6B,0xD0,0x45,0xC7,0x87,0x02,0x28,0xCF,0xF6,0x0C,0x4A,0x5C};

uint32_t TVMGetRegistrationsResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->registrations.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->registrations.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->registrations[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.registrations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TVMGetRegistrationsResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TVMGetRegistrationsResponse");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.registrations) {
    xfer += oprot->writeFieldBegin("registrations", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->registrations.size()));
      std::vector< ::CRDHN::VR::Data::TRegistrationInfo> ::const_iterator _iter11;
      for (_iter11 = this->registrations.begin(); _iter11 != this->registrations.end(); ++_iter11)
      {
        xfer += (*_iter11).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TVMGetRegistrationsResponse &a, TVMGetRegistrationsResponse &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.registrations, b.registrations);
  swap(a.__isset, b.__isset);
}

const char* TCMCreateCentreResponse::ascii_fingerprint = "185E211EF099F86731CDFE27B73C6174";
const uint8_t TCMCreateCentreResponse::binary_fingerprint[16] = {0x18,0x5E,0x21,0x1E,0xF0,0x99,0xF8,0x67,0x31,0xCD,0xFE,0x27,0xB7,0x3C,0x61,0x74};

uint32_t TCMCreateCentreResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->centreId);
          this->__isset.centreId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TCMCreateCentreResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TCMCreateCentreResponse");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.centreId) {
    xfer += oprot->writeFieldBegin("centreId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->centreId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCMCreateCentreResponse &a, TCMCreateCentreResponse &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.centreId, b.centreId);
  swap(a.__isset, b.__isset);
}

const char* TCMGetCentreInfoResponse::ascii_fingerprint = "212EC20D868EB822678208066BA36940";
const uint8_t TCMGetCentreInfoResponse::binary_fingerprint[16] = {0x21,0x2E,0xC2,0x0D,0x86,0x8E,0xB8,0x22,0x67,0x82,0x08,0x06,0x6B,0xA3,0x69,0x40};

uint32_t TCMGetCentreInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->centreInfo.read(iprot);
          this->__isset.centreInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TCMGetCentreInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TCMGetCentreInfoResponse");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.centreInfo) {
    xfer += oprot->writeFieldBegin("centreInfo", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->centreInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCMGetCentreInfoResponse &a, TCMGetCentreInfoResponse &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.centreInfo, b.centreInfo);
  swap(a.__isset, b.__isset);
}

const char* TCMGetCentresResponse::ascii_fingerprint = "935BB0D445A3FDCB2163DC1AB1902C2B";
const uint8_t TCMGetCentresResponse::binary_fingerprint[16] = {0x93,0x5B,0xB0,0xD4,0x45,0xA3,0xFD,0xCB,0x21,0x63,0xDC,0x1A,0xB1,0x90,0x2C,0x2B};

uint32_t TCMGetCentresResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->centres.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->centres.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->centres[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.centres = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TCMGetCentresResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TCMGetCentresResponse");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.centres) {
    xfer += oprot->writeFieldBegin("centres", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->centres.size()));
      std::vector< ::CRDHN::VR::Data::TCentreInfo> ::const_iterator _iter17;
      for (_iter17 = this->centres.begin(); _iter17 != this->centres.end(); ++_iter17)
      {
        xfer += (*_iter17).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCMGetCentresResponse &a, TCMGetCentresResponse &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.centres, b.centres);
  swap(a.__isset, b.__isset);
}

const char* TCMAddVaccineResponse::ascii_fingerprint = "185E211EF099F86731CDFE27B73C6174";
const uint8_t TCMAddVaccineResponse::binary_fingerprint[16] = {0x18,0x5E,0x21,0x1E,0xF0,0x99,0xF8,0x67,0x31,0xCD,0xFE,0x27,0xB7,0x3C,0x61,0x74};

uint32_t TCMAddVaccineResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vaccineId);
          this->__isset.vaccineId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TCMAddVaccineResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TCMAddVaccineResponse");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.vaccineId) {
    xfer += oprot->writeFieldBegin("vaccineId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->vaccineId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCMAddVaccineResponse &a, TCMAddVaccineResponse &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.vaccineId, b.vaccineId);
  swap(a.__isset, b.__isset);
}

const char* TCMGetVaccineInfoResponse::ascii_fingerprint = "8B22F7101E72B3B7A3E64E20164F63BB";
const uint8_t TCMGetVaccineInfoResponse::binary_fingerprint[16] = {0x8B,0x22,0xF7,0x10,0x1E,0x72,0xB3,0xB7,0xA3,0xE6,0x4E,0x20,0x16,0x4F,0x63,0xBB};

uint32_t TCMGetVaccineInfoResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vaccineInfo.read(iprot);
          this->__isset.vaccineInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TCMGetVaccineInfoResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TCMGetVaccineInfoResponse");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.vaccineInfo) {
    xfer += oprot->writeFieldBegin("vaccineInfo", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->vaccineInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCMGetVaccineInfoResponse &a, TCMGetVaccineInfoResponse &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.vaccineInfo, b.vaccineInfo);
  swap(a.__isset, b.__isset);
}

const char* TCMGetVaccinesResponse::ascii_fingerprint = "51A6666CF84B659D1704D50E108E34EB";
const uint8_t TCMGetVaccinesResponse::binary_fingerprint[16] = {0x51,0xA6,0x66,0x6C,0xF8,0x4B,0x65,0x9D,0x17,0x04,0xD5,0x0E,0x10,0x8E,0x34,0xEB};

uint32_t TCMGetVaccinesResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_error = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          isset_error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vaccines.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->vaccines.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->vaccines[_i22].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vaccines = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_error)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TCMGetVaccinesResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TCMGetVaccinesResponse");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->error.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.vaccines) {
    xfer += oprot->writeFieldBegin("vaccines", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->vaccines.size()));
      std::vector< ::CRDHN::VR::Data::TVaccineInfo> ::const_iterator _iter23;
      for (_iter23 = this->vaccines.begin(); _iter23 != this->vaccines.end(); ++_iter23)
      {
        xfer += (*_iter23).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCMGetVaccinesResponse &a, TCMGetVaccinesResponse &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.vaccines, b.vaccines);
  swap(a.__isset, b.__isset);
}

}}} // namespace
