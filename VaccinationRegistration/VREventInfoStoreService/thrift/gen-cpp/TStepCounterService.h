/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TStepCounterService_H
#define TStepCounterService_H

#include <thrift/TDispatchProcessor.h>
#include "stepcounterservice_types.h"

namespace CRDHN { namespace Common {

class TStepCounterServiceIf {
 public:
  virtual ~TStepCounterServiceIf() {}
  virtual int64_t getCurrentValue(const std::string& key) = 0;
  virtual int64_t getNextValue(const std::string& key) = 0;
  virtual int64_t getStepValue(const std::string& key, const int64_t step) = 0;
  virtual void setValue(const std::string& key, const int64_t counter) = 0;
};

class TStepCounterServiceIfFactory {
 public:
  typedef TStepCounterServiceIf Handler;

  virtual ~TStepCounterServiceIfFactory() {}

  virtual TStepCounterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TStepCounterServiceIf* /* handler */) = 0;
};

class TStepCounterServiceIfSingletonFactory : virtual public TStepCounterServiceIfFactory {
 public:
  TStepCounterServiceIfSingletonFactory(const boost::shared_ptr<TStepCounterServiceIf>& iface) : iface_(iface) {}
  virtual ~TStepCounterServiceIfSingletonFactory() {}

  virtual TStepCounterServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TStepCounterServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TStepCounterServiceIf> iface_;
};

class TStepCounterServiceNull : virtual public TStepCounterServiceIf {
 public:
  virtual ~TStepCounterServiceNull() {}
  int64_t getCurrentValue(const std::string& /* key */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t getNextValue(const std::string& /* key */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t getStepValue(const std::string& /* key */, const int64_t /* step */) {
    int64_t _return = 0;
    return _return;
  }
  void setValue(const std::string& /* key */, const int64_t /* counter */) {
    return;
  }
};

typedef struct _TStepCounterService_getCurrentValue_args__isset {
  _TStepCounterService_getCurrentValue_args__isset() : key(false) {}
  bool key;
} _TStepCounterService_getCurrentValue_args__isset;

class TStepCounterService_getCurrentValue_args {
 public:

  TStepCounterService_getCurrentValue_args() : key() {
  }

  virtual ~TStepCounterService_getCurrentValue_args() throw() {}

  std::string key;

  _TStepCounterService_getCurrentValue_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const TStepCounterService_getCurrentValue_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const TStepCounterService_getCurrentValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStepCounterService_getCurrentValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStepCounterService_getCurrentValue_pargs {
 public:


  virtual ~TStepCounterService_getCurrentValue_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStepCounterService_getCurrentValue_result__isset {
  _TStepCounterService_getCurrentValue_result__isset() : success(false) {}
  bool success;
} _TStepCounterService_getCurrentValue_result__isset;

class TStepCounterService_getCurrentValue_result {
 public:

  TStepCounterService_getCurrentValue_result() : success(0) {
  }

  virtual ~TStepCounterService_getCurrentValue_result() throw() {}

  int64_t success;

  _TStepCounterService_getCurrentValue_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const TStepCounterService_getCurrentValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStepCounterService_getCurrentValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStepCounterService_getCurrentValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStepCounterService_getCurrentValue_presult__isset {
  _TStepCounterService_getCurrentValue_presult__isset() : success(false) {}
  bool success;
} _TStepCounterService_getCurrentValue_presult__isset;

class TStepCounterService_getCurrentValue_presult {
 public:


  virtual ~TStepCounterService_getCurrentValue_presult() throw() {}

  int64_t* success;

  _TStepCounterService_getCurrentValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStepCounterService_getNextValue_args__isset {
  _TStepCounterService_getNextValue_args__isset() : key(false) {}
  bool key;
} _TStepCounterService_getNextValue_args__isset;

class TStepCounterService_getNextValue_args {
 public:

  TStepCounterService_getNextValue_args() : key() {
  }

  virtual ~TStepCounterService_getNextValue_args() throw() {}

  std::string key;

  _TStepCounterService_getNextValue_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const TStepCounterService_getNextValue_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const TStepCounterService_getNextValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStepCounterService_getNextValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStepCounterService_getNextValue_pargs {
 public:


  virtual ~TStepCounterService_getNextValue_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStepCounterService_getNextValue_result__isset {
  _TStepCounterService_getNextValue_result__isset() : success(false) {}
  bool success;
} _TStepCounterService_getNextValue_result__isset;

class TStepCounterService_getNextValue_result {
 public:

  TStepCounterService_getNextValue_result() : success(0) {
  }

  virtual ~TStepCounterService_getNextValue_result() throw() {}

  int64_t success;

  _TStepCounterService_getNextValue_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const TStepCounterService_getNextValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStepCounterService_getNextValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStepCounterService_getNextValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStepCounterService_getNextValue_presult__isset {
  _TStepCounterService_getNextValue_presult__isset() : success(false) {}
  bool success;
} _TStepCounterService_getNextValue_presult__isset;

class TStepCounterService_getNextValue_presult {
 public:


  virtual ~TStepCounterService_getNextValue_presult() throw() {}

  int64_t* success;

  _TStepCounterService_getNextValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStepCounterService_getStepValue_args__isset {
  _TStepCounterService_getStepValue_args__isset() : key(false), step(false) {}
  bool key;
  bool step;
} _TStepCounterService_getStepValue_args__isset;

class TStepCounterService_getStepValue_args {
 public:

  TStepCounterService_getStepValue_args() : key(), step(0) {
  }

  virtual ~TStepCounterService_getStepValue_args() throw() {}

  std::string key;
  int64_t step;

  _TStepCounterService_getStepValue_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_step(const int64_t val) {
    step = val;
  }

  bool operator == (const TStepCounterService_getStepValue_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(step == rhs.step))
      return false;
    return true;
  }
  bool operator != (const TStepCounterService_getStepValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStepCounterService_getStepValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStepCounterService_getStepValue_pargs {
 public:


  virtual ~TStepCounterService_getStepValue_pargs() throw() {}

  const std::string* key;
  const int64_t* step;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStepCounterService_getStepValue_result__isset {
  _TStepCounterService_getStepValue_result__isset() : success(false) {}
  bool success;
} _TStepCounterService_getStepValue_result__isset;

class TStepCounterService_getStepValue_result {
 public:

  TStepCounterService_getStepValue_result() : success(0) {
  }

  virtual ~TStepCounterService_getStepValue_result() throw() {}

  int64_t success;

  _TStepCounterService_getStepValue_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const TStepCounterService_getStepValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStepCounterService_getStepValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStepCounterService_getStepValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStepCounterService_getStepValue_presult__isset {
  _TStepCounterService_getStepValue_presult__isset() : success(false) {}
  bool success;
} _TStepCounterService_getStepValue_presult__isset;

class TStepCounterService_getStepValue_presult {
 public:


  virtual ~TStepCounterService_getStepValue_presult() throw() {}

  int64_t* success;

  _TStepCounterService_getStepValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStepCounterService_setValue_args__isset {
  _TStepCounterService_setValue_args__isset() : key(false), counter(false) {}
  bool key;
  bool counter;
} _TStepCounterService_setValue_args__isset;

class TStepCounterService_setValue_args {
 public:

  TStepCounterService_setValue_args() : key(), counter(0) {
  }

  virtual ~TStepCounterService_setValue_args() throw() {}

  std::string key;
  int64_t counter;

  _TStepCounterService_setValue_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_counter(const int64_t val) {
    counter = val;
  }

  bool operator == (const TStepCounterService_setValue_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(counter == rhs.counter))
      return false;
    return true;
  }
  bool operator != (const TStepCounterService_setValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStepCounterService_setValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStepCounterService_setValue_pargs {
 public:


  virtual ~TStepCounterService_setValue_pargs() throw() {}

  const std::string* key;
  const int64_t* counter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStepCounterService_setValue_result {
 public:

  TStepCounterService_setValue_result() {
  }

  virtual ~TStepCounterService_setValue_result() throw() {}


  bool operator == (const TStepCounterService_setValue_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TStepCounterService_setValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStepCounterService_setValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStepCounterService_setValue_presult {
 public:


  virtual ~TStepCounterService_setValue_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TStepCounterServiceClient : virtual public TStepCounterServiceIf {
 public:
  TStepCounterServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TStepCounterServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t getCurrentValue(const std::string& key);
  void send_getCurrentValue(const std::string& key);
  int64_t recv_getCurrentValue();
  int64_t getNextValue(const std::string& key);
  void send_getNextValue(const std::string& key);
  int64_t recv_getNextValue();
  int64_t getStepValue(const std::string& key, const int64_t step);
  void send_getStepValue(const std::string& key, const int64_t step);
  int64_t recv_getStepValue();
  void setValue(const std::string& key, const int64_t counter);
  void send_setValue(const std::string& key, const int64_t counter);
  void recv_setValue();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TStepCounterServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TStepCounterServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TStepCounterServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getCurrentValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNextValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStepValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TStepCounterServiceProcessor(boost::shared_ptr<TStepCounterServiceIf> iface) :
    iface_(iface) {
    processMap_["getCurrentValue"] = &TStepCounterServiceProcessor::process_getCurrentValue;
    processMap_["getNextValue"] = &TStepCounterServiceProcessor::process_getNextValue;
    processMap_["getStepValue"] = &TStepCounterServiceProcessor::process_getStepValue;
    processMap_["setValue"] = &TStepCounterServiceProcessor::process_setValue;
  }

  virtual ~TStepCounterServiceProcessor() {}
};

class TStepCounterServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TStepCounterServiceProcessorFactory(const ::boost::shared_ptr< TStepCounterServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TStepCounterServiceIfFactory > handlerFactory_;
};

class TStepCounterServiceMultiface : virtual public TStepCounterServiceIf {
 public:
  TStepCounterServiceMultiface(std::vector<boost::shared_ptr<TStepCounterServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TStepCounterServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TStepCounterServiceIf> > ifaces_;
  TStepCounterServiceMultiface() {}
  void add(boost::shared_ptr<TStepCounterServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t getCurrentValue(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCurrentValue(key);
    }
    return ifaces_[i]->getCurrentValue(key);
  }

  int64_t getNextValue(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNextValue(key);
    }
    return ifaces_[i]->getNextValue(key);
  }

  int64_t getStepValue(const std::string& key, const int64_t step) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStepValue(key, step);
    }
    return ifaces_[i]->getStepValue(key, step);
  }

  void setValue(const std::string& key, const int64_t counter) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setValue(key, counter);
    }
    ifaces_[i]->setValue(key, counter);
  }

};

}} // namespace

#endif
