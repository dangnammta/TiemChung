/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TVREventInfoStoreService_H
#define TVREventInfoStoreService_H

#include <thrift/TDispatchProcessor.h>
#include "vreventinfostoreservice_types.h"

namespace CRDHN { namespace VR {

class TVREventInfoStoreServiceIf {
 public:
  virtual ~TVREventInfoStoreServiceIf() {}
  virtual  ::CRDHN::VR::Data::TEID add(const  ::CRDHN::VR::Data::TEventInfo& eventInfo) = 0;
  virtual bool update(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TEventInfo& eventInfo) = 0;
  virtual void get( ::CRDHN::VR::Data::TEventInfo& _return, const  ::CRDHN::VR::Data::TEID eventId) = 0;
  virtual void getBasicInfo( ::CRDHN::VR::Data::TEventBasicInfo& _return, const  ::CRDHN::VR::Data::TEID eventId) = 0;
  virtual bool remove(const  ::CRDHN::VR::Data::TEID eventId) = 0;
  virtual int32_t getEventStatus(const  ::CRDHN::VR::Data::TEID eventId) = 0;
  virtual void getInjectionOrder( ::CRDHN::VR::Data::TInjectionOrderInfo& _return, const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TTIME childrenDateOfBirth) = 0;
  virtual void getExtendedInjectionOrder( ::CRDHN::VR::Data::TInjectionOrderInfo& _return, const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TTIME childrenDateOfBirth, const int32_t desiredOrderNumber) = 0;
  virtual void getNewRegistrationCode(std::string& _return, const  ::CRDHN::VR::Data::TEID eventId) = 0;
  virtual bool addRegistration(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TRID registrationId) = 0;
  virtual bool addExtendedRegistration(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TRID registrationId) = 0;
  virtual bool removeRegistration(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TRID registrationId) = 0;
  virtual void getRegistrations(std::vector< ::CRDHN::VR::Data::TRID> & _return, const  ::CRDHN::VR::Data::TEID eventId) = 0;
  virtual bool addVaccinatedChildren(const  ::CRDHN::VR::Data::TEID eventId) = 0;
  virtual bool removeVaccinatedChildren(const  ::CRDHN::VR::Data::TEID eventId) = 0;
};

class TVREventInfoStoreServiceIfFactory {
 public:
  typedef TVREventInfoStoreServiceIf Handler;

  virtual ~TVREventInfoStoreServiceIfFactory() {}

  virtual TVREventInfoStoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TVREventInfoStoreServiceIf* /* handler */) = 0;
};

class TVREventInfoStoreServiceIfSingletonFactory : virtual public TVREventInfoStoreServiceIfFactory {
 public:
  TVREventInfoStoreServiceIfSingletonFactory(const boost::shared_ptr<TVREventInfoStoreServiceIf>& iface) : iface_(iface) {}
  virtual ~TVREventInfoStoreServiceIfSingletonFactory() {}

  virtual TVREventInfoStoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TVREventInfoStoreServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TVREventInfoStoreServiceIf> iface_;
};

class TVREventInfoStoreServiceNull : virtual public TVREventInfoStoreServiceIf {
 public:
  virtual ~TVREventInfoStoreServiceNull() {}
   ::CRDHN::VR::Data::TEID add(const  ::CRDHN::VR::Data::TEventInfo& /* eventInfo */) {
     ::CRDHN::VR::Data::TEID _return = 0;
    return _return;
  }
  bool update(const  ::CRDHN::VR::Data::TEID /* eventId */, const  ::CRDHN::VR::Data::TEventInfo& /* eventInfo */) {
    bool _return = false;
    return _return;
  }
  void get( ::CRDHN::VR::Data::TEventInfo& /* _return */, const  ::CRDHN::VR::Data::TEID /* eventId */) {
    return;
  }
  void getBasicInfo( ::CRDHN::VR::Data::TEventBasicInfo& /* _return */, const  ::CRDHN::VR::Data::TEID /* eventId */) {
    return;
  }
  bool remove(const  ::CRDHN::VR::Data::TEID /* eventId */) {
    bool _return = false;
    return _return;
  }
  int32_t getEventStatus(const  ::CRDHN::VR::Data::TEID /* eventId */) {
    int32_t _return = 0;
    return _return;
  }
  void getInjectionOrder( ::CRDHN::VR::Data::TInjectionOrderInfo& /* _return */, const  ::CRDHN::VR::Data::TEID /* eventId */, const  ::CRDHN::VR::Data::TTIME /* childrenDateOfBirth */) {
    return;
  }
  void getExtendedInjectionOrder( ::CRDHN::VR::Data::TInjectionOrderInfo& /* _return */, const  ::CRDHN::VR::Data::TEID /* eventId */, const  ::CRDHN::VR::Data::TTIME /* childrenDateOfBirth */, const int32_t /* desiredOrderNumber */) {
    return;
  }
  void getNewRegistrationCode(std::string& /* _return */, const  ::CRDHN::VR::Data::TEID /* eventId */) {
    return;
  }
  bool addRegistration(const  ::CRDHN::VR::Data::TEID /* eventId */, const  ::CRDHN::VR::Data::TRID /* registrationId */) {
    bool _return = false;
    return _return;
  }
  bool addExtendedRegistration(const  ::CRDHN::VR::Data::TEID /* eventId */, const  ::CRDHN::VR::Data::TRID /* registrationId */) {
    bool _return = false;
    return _return;
  }
  bool removeRegistration(const  ::CRDHN::VR::Data::TEID /* eventId */, const  ::CRDHN::VR::Data::TRID /* registrationId */) {
    bool _return = false;
    return _return;
  }
  void getRegistrations(std::vector< ::CRDHN::VR::Data::TRID> & /* _return */, const  ::CRDHN::VR::Data::TEID /* eventId */) {
    return;
  }
  bool addVaccinatedChildren(const  ::CRDHN::VR::Data::TEID /* eventId */) {
    bool _return = false;
    return _return;
  }
  bool removeVaccinatedChildren(const  ::CRDHN::VR::Data::TEID /* eventId */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _TVREventInfoStoreService_add_args__isset {
  _TVREventInfoStoreService_add_args__isset() : eventInfo(false) {}
  bool eventInfo;
} _TVREventInfoStoreService_add_args__isset;

class TVREventInfoStoreService_add_args {
 public:

  TVREventInfoStoreService_add_args() {
  }

  virtual ~TVREventInfoStoreService_add_args() throw() {}

   ::CRDHN::VR::Data::TEventInfo eventInfo;

  _TVREventInfoStoreService_add_args__isset __isset;

  void __set_eventInfo(const  ::CRDHN::VR::Data::TEventInfo& val) {
    eventInfo = val;
  }

  bool operator == (const TVREventInfoStoreService_add_args & rhs) const
  {
    if (!(eventInfo == rhs.eventInfo))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventInfoStoreService_add_pargs {
 public:


  virtual ~TVREventInfoStoreService_add_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEventInfo* eventInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_add_result__isset {
  _TVREventInfoStoreService_add_result__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_add_result__isset;

class TVREventInfoStoreService_add_result {
 public:

  TVREventInfoStoreService_add_result() : success(0) {
  }

  virtual ~TVREventInfoStoreService_add_result() throw() {}

   ::CRDHN::VR::Data::TEID success;

  _TVREventInfoStoreService_add_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Data::TEID val) {
    success = val;
  }

  bool operator == (const TVREventInfoStoreService_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_add_presult__isset {
  _TVREventInfoStoreService_add_presult__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_add_presult__isset;

class TVREventInfoStoreService_add_presult {
 public:


  virtual ~TVREventInfoStoreService_add_presult() throw() {}

   ::CRDHN::VR::Data::TEID* success;

  _TVREventInfoStoreService_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventInfoStoreService_update_args__isset {
  _TVREventInfoStoreService_update_args__isset() : eventId(false), eventInfo(false) {}
  bool eventId;
  bool eventInfo;
} _TVREventInfoStoreService_update_args__isset;

class TVREventInfoStoreService_update_args {
 public:

  TVREventInfoStoreService_update_args() : eventId(0) {
  }

  virtual ~TVREventInfoStoreService_update_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;
   ::CRDHN::VR::Data::TEventInfo eventInfo;

  _TVREventInfoStoreService_update_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  void __set_eventInfo(const  ::CRDHN::VR::Data::TEventInfo& val) {
    eventInfo = val;
  }

  bool operator == (const TVREventInfoStoreService_update_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    if (!(eventInfo == rhs.eventInfo))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventInfoStoreService_update_pargs {
 public:


  virtual ~TVREventInfoStoreService_update_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;
  const  ::CRDHN::VR::Data::TEventInfo* eventInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_update_result__isset {
  _TVREventInfoStoreService_update_result__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_update_result__isset;

class TVREventInfoStoreService_update_result {
 public:

  TVREventInfoStoreService_update_result() : success(0) {
  }

  virtual ~TVREventInfoStoreService_update_result() throw() {}

  bool success;

  _TVREventInfoStoreService_update_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVREventInfoStoreService_update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_update_presult__isset {
  _TVREventInfoStoreService_update_presult__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_update_presult__isset;

class TVREventInfoStoreService_update_presult {
 public:


  virtual ~TVREventInfoStoreService_update_presult() throw() {}

  bool* success;

  _TVREventInfoStoreService_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventInfoStoreService_get_args__isset {
  _TVREventInfoStoreService_get_args__isset() : eventId(false) {}
  bool eventId;
} _TVREventInfoStoreService_get_args__isset;

class TVREventInfoStoreService_get_args {
 public:

  TVREventInfoStoreService_get_args() : eventId(0) {
  }

  virtual ~TVREventInfoStoreService_get_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;

  _TVREventInfoStoreService_get_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  bool operator == (const TVREventInfoStoreService_get_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventInfoStoreService_get_pargs {
 public:


  virtual ~TVREventInfoStoreService_get_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_get_result__isset {
  _TVREventInfoStoreService_get_result__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_get_result__isset;

class TVREventInfoStoreService_get_result {
 public:

  TVREventInfoStoreService_get_result() {
  }

  virtual ~TVREventInfoStoreService_get_result() throw() {}

   ::CRDHN::VR::Data::TEventInfo success;

  _TVREventInfoStoreService_get_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Data::TEventInfo& val) {
    success = val;
  }

  bool operator == (const TVREventInfoStoreService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_get_presult__isset {
  _TVREventInfoStoreService_get_presult__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_get_presult__isset;

class TVREventInfoStoreService_get_presult {
 public:


  virtual ~TVREventInfoStoreService_get_presult() throw() {}

   ::CRDHN::VR::Data::TEventInfo* success;

  _TVREventInfoStoreService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventInfoStoreService_getBasicInfo_args__isset {
  _TVREventInfoStoreService_getBasicInfo_args__isset() : eventId(false) {}
  bool eventId;
} _TVREventInfoStoreService_getBasicInfo_args__isset;

class TVREventInfoStoreService_getBasicInfo_args {
 public:

  TVREventInfoStoreService_getBasicInfo_args() : eventId(0) {
  }

  virtual ~TVREventInfoStoreService_getBasicInfo_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;

  _TVREventInfoStoreService_getBasicInfo_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  bool operator == (const TVREventInfoStoreService_getBasicInfo_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_getBasicInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_getBasicInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventInfoStoreService_getBasicInfo_pargs {
 public:


  virtual ~TVREventInfoStoreService_getBasicInfo_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_getBasicInfo_result__isset {
  _TVREventInfoStoreService_getBasicInfo_result__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_getBasicInfo_result__isset;

class TVREventInfoStoreService_getBasicInfo_result {
 public:

  TVREventInfoStoreService_getBasicInfo_result() {
  }

  virtual ~TVREventInfoStoreService_getBasicInfo_result() throw() {}

   ::CRDHN::VR::Data::TEventBasicInfo success;

  _TVREventInfoStoreService_getBasicInfo_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Data::TEventBasicInfo& val) {
    success = val;
  }

  bool operator == (const TVREventInfoStoreService_getBasicInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_getBasicInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_getBasicInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_getBasicInfo_presult__isset {
  _TVREventInfoStoreService_getBasicInfo_presult__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_getBasicInfo_presult__isset;

class TVREventInfoStoreService_getBasicInfo_presult {
 public:


  virtual ~TVREventInfoStoreService_getBasicInfo_presult() throw() {}

   ::CRDHN::VR::Data::TEventBasicInfo* success;

  _TVREventInfoStoreService_getBasicInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventInfoStoreService_remove_args__isset {
  _TVREventInfoStoreService_remove_args__isset() : eventId(false) {}
  bool eventId;
} _TVREventInfoStoreService_remove_args__isset;

class TVREventInfoStoreService_remove_args {
 public:

  TVREventInfoStoreService_remove_args() : eventId(0) {
  }

  virtual ~TVREventInfoStoreService_remove_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;

  _TVREventInfoStoreService_remove_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  bool operator == (const TVREventInfoStoreService_remove_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventInfoStoreService_remove_pargs {
 public:


  virtual ~TVREventInfoStoreService_remove_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_remove_result__isset {
  _TVREventInfoStoreService_remove_result__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_remove_result__isset;

class TVREventInfoStoreService_remove_result {
 public:

  TVREventInfoStoreService_remove_result() : success(0) {
  }

  virtual ~TVREventInfoStoreService_remove_result() throw() {}

  bool success;

  _TVREventInfoStoreService_remove_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVREventInfoStoreService_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_remove_presult__isset {
  _TVREventInfoStoreService_remove_presult__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_remove_presult__isset;

class TVREventInfoStoreService_remove_presult {
 public:


  virtual ~TVREventInfoStoreService_remove_presult() throw() {}

  bool* success;

  _TVREventInfoStoreService_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventInfoStoreService_getEventStatus_args__isset {
  _TVREventInfoStoreService_getEventStatus_args__isset() : eventId(false) {}
  bool eventId;
} _TVREventInfoStoreService_getEventStatus_args__isset;

class TVREventInfoStoreService_getEventStatus_args {
 public:

  TVREventInfoStoreService_getEventStatus_args() : eventId(0) {
  }

  virtual ~TVREventInfoStoreService_getEventStatus_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;

  _TVREventInfoStoreService_getEventStatus_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  bool operator == (const TVREventInfoStoreService_getEventStatus_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_getEventStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_getEventStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventInfoStoreService_getEventStatus_pargs {
 public:


  virtual ~TVREventInfoStoreService_getEventStatus_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_getEventStatus_result__isset {
  _TVREventInfoStoreService_getEventStatus_result__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_getEventStatus_result__isset;

class TVREventInfoStoreService_getEventStatus_result {
 public:

  TVREventInfoStoreService_getEventStatus_result() : success(0) {
  }

  virtual ~TVREventInfoStoreService_getEventStatus_result() throw() {}

  int32_t success;

  _TVREventInfoStoreService_getEventStatus_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const TVREventInfoStoreService_getEventStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_getEventStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_getEventStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_getEventStatus_presult__isset {
  _TVREventInfoStoreService_getEventStatus_presult__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_getEventStatus_presult__isset;

class TVREventInfoStoreService_getEventStatus_presult {
 public:


  virtual ~TVREventInfoStoreService_getEventStatus_presult() throw() {}

  int32_t* success;

  _TVREventInfoStoreService_getEventStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventInfoStoreService_getInjectionOrder_args__isset {
  _TVREventInfoStoreService_getInjectionOrder_args__isset() : eventId(false), childrenDateOfBirth(false) {}
  bool eventId;
  bool childrenDateOfBirth;
} _TVREventInfoStoreService_getInjectionOrder_args__isset;

class TVREventInfoStoreService_getInjectionOrder_args {
 public:

  TVREventInfoStoreService_getInjectionOrder_args() : eventId(0), childrenDateOfBirth(0) {
  }

  virtual ~TVREventInfoStoreService_getInjectionOrder_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;
   ::CRDHN::VR::Data::TTIME childrenDateOfBirth;

  _TVREventInfoStoreService_getInjectionOrder_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  void __set_childrenDateOfBirth(const  ::CRDHN::VR::Data::TTIME val) {
    childrenDateOfBirth = val;
  }

  bool operator == (const TVREventInfoStoreService_getInjectionOrder_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    if (!(childrenDateOfBirth == rhs.childrenDateOfBirth))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_getInjectionOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_getInjectionOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventInfoStoreService_getInjectionOrder_pargs {
 public:


  virtual ~TVREventInfoStoreService_getInjectionOrder_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;
  const  ::CRDHN::VR::Data::TTIME* childrenDateOfBirth;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_getInjectionOrder_result__isset {
  _TVREventInfoStoreService_getInjectionOrder_result__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_getInjectionOrder_result__isset;

class TVREventInfoStoreService_getInjectionOrder_result {
 public:

  TVREventInfoStoreService_getInjectionOrder_result() {
  }

  virtual ~TVREventInfoStoreService_getInjectionOrder_result() throw() {}

   ::CRDHN::VR::Data::TInjectionOrderInfo success;

  _TVREventInfoStoreService_getInjectionOrder_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Data::TInjectionOrderInfo& val) {
    success = val;
  }

  bool operator == (const TVREventInfoStoreService_getInjectionOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_getInjectionOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_getInjectionOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_getInjectionOrder_presult__isset {
  _TVREventInfoStoreService_getInjectionOrder_presult__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_getInjectionOrder_presult__isset;

class TVREventInfoStoreService_getInjectionOrder_presult {
 public:


  virtual ~TVREventInfoStoreService_getInjectionOrder_presult() throw() {}

   ::CRDHN::VR::Data::TInjectionOrderInfo* success;

  _TVREventInfoStoreService_getInjectionOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventInfoStoreService_getExtendedInjectionOrder_args__isset {
  _TVREventInfoStoreService_getExtendedInjectionOrder_args__isset() : eventId(false), childrenDateOfBirth(false), desiredOrderNumber(false) {}
  bool eventId;
  bool childrenDateOfBirth;
  bool desiredOrderNumber;
} _TVREventInfoStoreService_getExtendedInjectionOrder_args__isset;

class TVREventInfoStoreService_getExtendedInjectionOrder_args {
 public:

  TVREventInfoStoreService_getExtendedInjectionOrder_args() : eventId(0), childrenDateOfBirth(0), desiredOrderNumber(0) {
  }

  virtual ~TVREventInfoStoreService_getExtendedInjectionOrder_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;
   ::CRDHN::VR::Data::TTIME childrenDateOfBirth;
  int32_t desiredOrderNumber;

  _TVREventInfoStoreService_getExtendedInjectionOrder_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  void __set_childrenDateOfBirth(const  ::CRDHN::VR::Data::TTIME val) {
    childrenDateOfBirth = val;
  }

  void __set_desiredOrderNumber(const int32_t val) {
    desiredOrderNumber = val;
  }

  bool operator == (const TVREventInfoStoreService_getExtendedInjectionOrder_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    if (!(childrenDateOfBirth == rhs.childrenDateOfBirth))
      return false;
    if (!(desiredOrderNumber == rhs.desiredOrderNumber))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_getExtendedInjectionOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_getExtendedInjectionOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventInfoStoreService_getExtendedInjectionOrder_pargs {
 public:


  virtual ~TVREventInfoStoreService_getExtendedInjectionOrder_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;
  const  ::CRDHN::VR::Data::TTIME* childrenDateOfBirth;
  const int32_t* desiredOrderNumber;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_getExtendedInjectionOrder_result__isset {
  _TVREventInfoStoreService_getExtendedInjectionOrder_result__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_getExtendedInjectionOrder_result__isset;

class TVREventInfoStoreService_getExtendedInjectionOrder_result {
 public:

  TVREventInfoStoreService_getExtendedInjectionOrder_result() {
  }

  virtual ~TVREventInfoStoreService_getExtendedInjectionOrder_result() throw() {}

   ::CRDHN::VR::Data::TInjectionOrderInfo success;

  _TVREventInfoStoreService_getExtendedInjectionOrder_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Data::TInjectionOrderInfo& val) {
    success = val;
  }

  bool operator == (const TVREventInfoStoreService_getExtendedInjectionOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_getExtendedInjectionOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_getExtendedInjectionOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_getExtendedInjectionOrder_presult__isset {
  _TVREventInfoStoreService_getExtendedInjectionOrder_presult__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_getExtendedInjectionOrder_presult__isset;

class TVREventInfoStoreService_getExtendedInjectionOrder_presult {
 public:


  virtual ~TVREventInfoStoreService_getExtendedInjectionOrder_presult() throw() {}

   ::CRDHN::VR::Data::TInjectionOrderInfo* success;

  _TVREventInfoStoreService_getExtendedInjectionOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventInfoStoreService_getNewRegistrationCode_args__isset {
  _TVREventInfoStoreService_getNewRegistrationCode_args__isset() : eventId(false) {}
  bool eventId;
} _TVREventInfoStoreService_getNewRegistrationCode_args__isset;

class TVREventInfoStoreService_getNewRegistrationCode_args {
 public:

  TVREventInfoStoreService_getNewRegistrationCode_args() : eventId(0) {
  }

  virtual ~TVREventInfoStoreService_getNewRegistrationCode_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;

  _TVREventInfoStoreService_getNewRegistrationCode_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  bool operator == (const TVREventInfoStoreService_getNewRegistrationCode_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_getNewRegistrationCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_getNewRegistrationCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventInfoStoreService_getNewRegistrationCode_pargs {
 public:


  virtual ~TVREventInfoStoreService_getNewRegistrationCode_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_getNewRegistrationCode_result__isset {
  _TVREventInfoStoreService_getNewRegistrationCode_result__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_getNewRegistrationCode_result__isset;

class TVREventInfoStoreService_getNewRegistrationCode_result {
 public:

  TVREventInfoStoreService_getNewRegistrationCode_result() : success() {
  }

  virtual ~TVREventInfoStoreService_getNewRegistrationCode_result() throw() {}

  std::string success;

  _TVREventInfoStoreService_getNewRegistrationCode_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const TVREventInfoStoreService_getNewRegistrationCode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_getNewRegistrationCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_getNewRegistrationCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_getNewRegistrationCode_presult__isset {
  _TVREventInfoStoreService_getNewRegistrationCode_presult__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_getNewRegistrationCode_presult__isset;

class TVREventInfoStoreService_getNewRegistrationCode_presult {
 public:


  virtual ~TVREventInfoStoreService_getNewRegistrationCode_presult() throw() {}

  std::string* success;

  _TVREventInfoStoreService_getNewRegistrationCode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventInfoStoreService_addRegistration_args__isset {
  _TVREventInfoStoreService_addRegistration_args__isset() : eventId(false), registrationId(false) {}
  bool eventId;
  bool registrationId;
} _TVREventInfoStoreService_addRegistration_args__isset;

class TVREventInfoStoreService_addRegistration_args {
 public:

  TVREventInfoStoreService_addRegistration_args() : eventId(0), registrationId(0) {
  }

  virtual ~TVREventInfoStoreService_addRegistration_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;
   ::CRDHN::VR::Data::TRID registrationId;

  _TVREventInfoStoreService_addRegistration_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  void __set_registrationId(const  ::CRDHN::VR::Data::TRID val) {
    registrationId = val;
  }

  bool operator == (const TVREventInfoStoreService_addRegistration_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    if (!(registrationId == rhs.registrationId))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_addRegistration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_addRegistration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventInfoStoreService_addRegistration_pargs {
 public:


  virtual ~TVREventInfoStoreService_addRegistration_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;
  const  ::CRDHN::VR::Data::TRID* registrationId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_addRegistration_result__isset {
  _TVREventInfoStoreService_addRegistration_result__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_addRegistration_result__isset;

class TVREventInfoStoreService_addRegistration_result {
 public:

  TVREventInfoStoreService_addRegistration_result() : success(0) {
  }

  virtual ~TVREventInfoStoreService_addRegistration_result() throw() {}

  bool success;

  _TVREventInfoStoreService_addRegistration_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVREventInfoStoreService_addRegistration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_addRegistration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_addRegistration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_addRegistration_presult__isset {
  _TVREventInfoStoreService_addRegistration_presult__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_addRegistration_presult__isset;

class TVREventInfoStoreService_addRegistration_presult {
 public:


  virtual ~TVREventInfoStoreService_addRegistration_presult() throw() {}

  bool* success;

  _TVREventInfoStoreService_addRegistration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventInfoStoreService_addExtendedRegistration_args__isset {
  _TVREventInfoStoreService_addExtendedRegistration_args__isset() : eventId(false), registrationId(false) {}
  bool eventId;
  bool registrationId;
} _TVREventInfoStoreService_addExtendedRegistration_args__isset;

class TVREventInfoStoreService_addExtendedRegistration_args {
 public:

  TVREventInfoStoreService_addExtendedRegistration_args() : eventId(0), registrationId(0) {
  }

  virtual ~TVREventInfoStoreService_addExtendedRegistration_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;
   ::CRDHN::VR::Data::TRID registrationId;

  _TVREventInfoStoreService_addExtendedRegistration_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  void __set_registrationId(const  ::CRDHN::VR::Data::TRID val) {
    registrationId = val;
  }

  bool operator == (const TVREventInfoStoreService_addExtendedRegistration_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    if (!(registrationId == rhs.registrationId))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_addExtendedRegistration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_addExtendedRegistration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventInfoStoreService_addExtendedRegistration_pargs {
 public:


  virtual ~TVREventInfoStoreService_addExtendedRegistration_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;
  const  ::CRDHN::VR::Data::TRID* registrationId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_addExtendedRegistration_result__isset {
  _TVREventInfoStoreService_addExtendedRegistration_result__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_addExtendedRegistration_result__isset;

class TVREventInfoStoreService_addExtendedRegistration_result {
 public:

  TVREventInfoStoreService_addExtendedRegistration_result() : success(0) {
  }

  virtual ~TVREventInfoStoreService_addExtendedRegistration_result() throw() {}

  bool success;

  _TVREventInfoStoreService_addExtendedRegistration_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVREventInfoStoreService_addExtendedRegistration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_addExtendedRegistration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_addExtendedRegistration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_addExtendedRegistration_presult__isset {
  _TVREventInfoStoreService_addExtendedRegistration_presult__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_addExtendedRegistration_presult__isset;

class TVREventInfoStoreService_addExtendedRegistration_presult {
 public:


  virtual ~TVREventInfoStoreService_addExtendedRegistration_presult() throw() {}

  bool* success;

  _TVREventInfoStoreService_addExtendedRegistration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventInfoStoreService_removeRegistration_args__isset {
  _TVREventInfoStoreService_removeRegistration_args__isset() : eventId(false), registrationId(false) {}
  bool eventId;
  bool registrationId;
} _TVREventInfoStoreService_removeRegistration_args__isset;

class TVREventInfoStoreService_removeRegistration_args {
 public:

  TVREventInfoStoreService_removeRegistration_args() : eventId(0), registrationId(0) {
  }

  virtual ~TVREventInfoStoreService_removeRegistration_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;
   ::CRDHN::VR::Data::TRID registrationId;

  _TVREventInfoStoreService_removeRegistration_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  void __set_registrationId(const  ::CRDHN::VR::Data::TRID val) {
    registrationId = val;
  }

  bool operator == (const TVREventInfoStoreService_removeRegistration_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    if (!(registrationId == rhs.registrationId))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_removeRegistration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_removeRegistration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventInfoStoreService_removeRegistration_pargs {
 public:


  virtual ~TVREventInfoStoreService_removeRegistration_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;
  const  ::CRDHN::VR::Data::TRID* registrationId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_removeRegistration_result__isset {
  _TVREventInfoStoreService_removeRegistration_result__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_removeRegistration_result__isset;

class TVREventInfoStoreService_removeRegistration_result {
 public:

  TVREventInfoStoreService_removeRegistration_result() : success(0) {
  }

  virtual ~TVREventInfoStoreService_removeRegistration_result() throw() {}

  bool success;

  _TVREventInfoStoreService_removeRegistration_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVREventInfoStoreService_removeRegistration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_removeRegistration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_removeRegistration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_removeRegistration_presult__isset {
  _TVREventInfoStoreService_removeRegistration_presult__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_removeRegistration_presult__isset;

class TVREventInfoStoreService_removeRegistration_presult {
 public:


  virtual ~TVREventInfoStoreService_removeRegistration_presult() throw() {}

  bool* success;

  _TVREventInfoStoreService_removeRegistration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventInfoStoreService_getRegistrations_args__isset {
  _TVREventInfoStoreService_getRegistrations_args__isset() : eventId(false) {}
  bool eventId;
} _TVREventInfoStoreService_getRegistrations_args__isset;

class TVREventInfoStoreService_getRegistrations_args {
 public:

  TVREventInfoStoreService_getRegistrations_args() : eventId(0) {
  }

  virtual ~TVREventInfoStoreService_getRegistrations_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;

  _TVREventInfoStoreService_getRegistrations_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  bool operator == (const TVREventInfoStoreService_getRegistrations_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_getRegistrations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_getRegistrations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventInfoStoreService_getRegistrations_pargs {
 public:


  virtual ~TVREventInfoStoreService_getRegistrations_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_getRegistrations_result__isset {
  _TVREventInfoStoreService_getRegistrations_result__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_getRegistrations_result__isset;

class TVREventInfoStoreService_getRegistrations_result {
 public:

  TVREventInfoStoreService_getRegistrations_result() {
  }

  virtual ~TVREventInfoStoreService_getRegistrations_result() throw() {}

  std::vector< ::CRDHN::VR::Data::TRID>  success;

  _TVREventInfoStoreService_getRegistrations_result__isset __isset;

  void __set_success(const std::vector< ::CRDHN::VR::Data::TRID> & val) {
    success = val;
  }

  bool operator == (const TVREventInfoStoreService_getRegistrations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_getRegistrations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_getRegistrations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_getRegistrations_presult__isset {
  _TVREventInfoStoreService_getRegistrations_presult__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_getRegistrations_presult__isset;

class TVREventInfoStoreService_getRegistrations_presult {
 public:


  virtual ~TVREventInfoStoreService_getRegistrations_presult() throw() {}

  std::vector< ::CRDHN::VR::Data::TRID> * success;

  _TVREventInfoStoreService_getRegistrations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventInfoStoreService_addVaccinatedChildren_args__isset {
  _TVREventInfoStoreService_addVaccinatedChildren_args__isset() : eventId(false) {}
  bool eventId;
} _TVREventInfoStoreService_addVaccinatedChildren_args__isset;

class TVREventInfoStoreService_addVaccinatedChildren_args {
 public:

  TVREventInfoStoreService_addVaccinatedChildren_args() : eventId(0) {
  }

  virtual ~TVREventInfoStoreService_addVaccinatedChildren_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;

  _TVREventInfoStoreService_addVaccinatedChildren_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  bool operator == (const TVREventInfoStoreService_addVaccinatedChildren_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_addVaccinatedChildren_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_addVaccinatedChildren_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventInfoStoreService_addVaccinatedChildren_pargs {
 public:


  virtual ~TVREventInfoStoreService_addVaccinatedChildren_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_addVaccinatedChildren_result__isset {
  _TVREventInfoStoreService_addVaccinatedChildren_result__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_addVaccinatedChildren_result__isset;

class TVREventInfoStoreService_addVaccinatedChildren_result {
 public:

  TVREventInfoStoreService_addVaccinatedChildren_result() : success(0) {
  }

  virtual ~TVREventInfoStoreService_addVaccinatedChildren_result() throw() {}

  bool success;

  _TVREventInfoStoreService_addVaccinatedChildren_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVREventInfoStoreService_addVaccinatedChildren_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_addVaccinatedChildren_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_addVaccinatedChildren_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_addVaccinatedChildren_presult__isset {
  _TVREventInfoStoreService_addVaccinatedChildren_presult__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_addVaccinatedChildren_presult__isset;

class TVREventInfoStoreService_addVaccinatedChildren_presult {
 public:


  virtual ~TVREventInfoStoreService_addVaccinatedChildren_presult() throw() {}

  bool* success;

  _TVREventInfoStoreService_addVaccinatedChildren_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventInfoStoreService_removeVaccinatedChildren_args__isset {
  _TVREventInfoStoreService_removeVaccinatedChildren_args__isset() : eventId(false) {}
  bool eventId;
} _TVREventInfoStoreService_removeVaccinatedChildren_args__isset;

class TVREventInfoStoreService_removeVaccinatedChildren_args {
 public:

  TVREventInfoStoreService_removeVaccinatedChildren_args() : eventId(0) {
  }

  virtual ~TVREventInfoStoreService_removeVaccinatedChildren_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;

  _TVREventInfoStoreService_removeVaccinatedChildren_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  bool operator == (const TVREventInfoStoreService_removeVaccinatedChildren_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_removeVaccinatedChildren_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_removeVaccinatedChildren_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventInfoStoreService_removeVaccinatedChildren_pargs {
 public:


  virtual ~TVREventInfoStoreService_removeVaccinatedChildren_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_removeVaccinatedChildren_result__isset {
  _TVREventInfoStoreService_removeVaccinatedChildren_result__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_removeVaccinatedChildren_result__isset;

class TVREventInfoStoreService_removeVaccinatedChildren_result {
 public:

  TVREventInfoStoreService_removeVaccinatedChildren_result() : success(0) {
  }

  virtual ~TVREventInfoStoreService_removeVaccinatedChildren_result() throw() {}

  bool success;

  _TVREventInfoStoreService_removeVaccinatedChildren_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVREventInfoStoreService_removeVaccinatedChildren_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventInfoStoreService_removeVaccinatedChildren_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventInfoStoreService_removeVaccinatedChildren_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventInfoStoreService_removeVaccinatedChildren_presult__isset {
  _TVREventInfoStoreService_removeVaccinatedChildren_presult__isset() : success(false) {}
  bool success;
} _TVREventInfoStoreService_removeVaccinatedChildren_presult__isset;

class TVREventInfoStoreService_removeVaccinatedChildren_presult {
 public:


  virtual ~TVREventInfoStoreService_removeVaccinatedChildren_presult() throw() {}

  bool* success;

  _TVREventInfoStoreService_removeVaccinatedChildren_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TVREventInfoStoreServiceClient : virtual public TVREventInfoStoreServiceIf {
 public:
  TVREventInfoStoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TVREventInfoStoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::CRDHN::VR::Data::TEID add(const  ::CRDHN::VR::Data::TEventInfo& eventInfo);
  void send_add(const  ::CRDHN::VR::Data::TEventInfo& eventInfo);
   ::CRDHN::VR::Data::TEID recv_add();
  bool update(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TEventInfo& eventInfo);
  void send_update(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TEventInfo& eventInfo);
  bool recv_update();
  void get( ::CRDHN::VR::Data::TEventInfo& _return, const  ::CRDHN::VR::Data::TEID eventId);
  void send_get(const  ::CRDHN::VR::Data::TEID eventId);
  void recv_get( ::CRDHN::VR::Data::TEventInfo& _return);
  void getBasicInfo( ::CRDHN::VR::Data::TEventBasicInfo& _return, const  ::CRDHN::VR::Data::TEID eventId);
  void send_getBasicInfo(const  ::CRDHN::VR::Data::TEID eventId);
  void recv_getBasicInfo( ::CRDHN::VR::Data::TEventBasicInfo& _return);
  bool remove(const  ::CRDHN::VR::Data::TEID eventId);
  void send_remove(const  ::CRDHN::VR::Data::TEID eventId);
  bool recv_remove();
  int32_t getEventStatus(const  ::CRDHN::VR::Data::TEID eventId);
  void send_getEventStatus(const  ::CRDHN::VR::Data::TEID eventId);
  int32_t recv_getEventStatus();
  void getInjectionOrder( ::CRDHN::VR::Data::TInjectionOrderInfo& _return, const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TTIME childrenDateOfBirth);
  void send_getInjectionOrder(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TTIME childrenDateOfBirth);
  void recv_getInjectionOrder( ::CRDHN::VR::Data::TInjectionOrderInfo& _return);
  void getExtendedInjectionOrder( ::CRDHN::VR::Data::TInjectionOrderInfo& _return, const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TTIME childrenDateOfBirth, const int32_t desiredOrderNumber);
  void send_getExtendedInjectionOrder(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TTIME childrenDateOfBirth, const int32_t desiredOrderNumber);
  void recv_getExtendedInjectionOrder( ::CRDHN::VR::Data::TInjectionOrderInfo& _return);
  void getNewRegistrationCode(std::string& _return, const  ::CRDHN::VR::Data::TEID eventId);
  void send_getNewRegistrationCode(const  ::CRDHN::VR::Data::TEID eventId);
  void recv_getNewRegistrationCode(std::string& _return);
  bool addRegistration(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TRID registrationId);
  void send_addRegistration(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TRID registrationId);
  bool recv_addRegistration();
  bool addExtendedRegistration(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TRID registrationId);
  void send_addExtendedRegistration(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TRID registrationId);
  bool recv_addExtendedRegistration();
  bool removeRegistration(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TRID registrationId);
  void send_removeRegistration(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TRID registrationId);
  bool recv_removeRegistration();
  void getRegistrations(std::vector< ::CRDHN::VR::Data::TRID> & _return, const  ::CRDHN::VR::Data::TEID eventId);
  void send_getRegistrations(const  ::CRDHN::VR::Data::TEID eventId);
  void recv_getRegistrations(std::vector< ::CRDHN::VR::Data::TRID> & _return);
  bool addVaccinatedChildren(const  ::CRDHN::VR::Data::TEID eventId);
  void send_addVaccinatedChildren(const  ::CRDHN::VR::Data::TEID eventId);
  bool recv_addVaccinatedChildren();
  bool removeVaccinatedChildren(const  ::CRDHN::VR::Data::TEID eventId);
  void send_removeVaccinatedChildren(const  ::CRDHN::VR::Data::TEID eventId);
  bool recv_removeVaccinatedChildren();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TVREventInfoStoreServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TVREventInfoStoreServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TVREventInfoStoreServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBasicInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEventStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getInjectionOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getExtendedInjectionOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNewRegistrationCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addRegistration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addExtendedRegistration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeRegistration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRegistrations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addVaccinatedChildren(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeVaccinatedChildren(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TVREventInfoStoreServiceProcessor(boost::shared_ptr<TVREventInfoStoreServiceIf> iface) :
    iface_(iface) {
    processMap_["add"] = &TVREventInfoStoreServiceProcessor::process_add;
    processMap_["update"] = &TVREventInfoStoreServiceProcessor::process_update;
    processMap_["get"] = &TVREventInfoStoreServiceProcessor::process_get;
    processMap_["getBasicInfo"] = &TVREventInfoStoreServiceProcessor::process_getBasicInfo;
    processMap_["remove"] = &TVREventInfoStoreServiceProcessor::process_remove;
    processMap_["getEventStatus"] = &TVREventInfoStoreServiceProcessor::process_getEventStatus;
    processMap_["getInjectionOrder"] = &TVREventInfoStoreServiceProcessor::process_getInjectionOrder;
    processMap_["getExtendedInjectionOrder"] = &TVREventInfoStoreServiceProcessor::process_getExtendedInjectionOrder;
    processMap_["getNewRegistrationCode"] = &TVREventInfoStoreServiceProcessor::process_getNewRegistrationCode;
    processMap_["addRegistration"] = &TVREventInfoStoreServiceProcessor::process_addRegistration;
    processMap_["addExtendedRegistration"] = &TVREventInfoStoreServiceProcessor::process_addExtendedRegistration;
    processMap_["removeRegistration"] = &TVREventInfoStoreServiceProcessor::process_removeRegistration;
    processMap_["getRegistrations"] = &TVREventInfoStoreServiceProcessor::process_getRegistrations;
    processMap_["addVaccinatedChildren"] = &TVREventInfoStoreServiceProcessor::process_addVaccinatedChildren;
    processMap_["removeVaccinatedChildren"] = &TVREventInfoStoreServiceProcessor::process_removeVaccinatedChildren;
  }

  virtual ~TVREventInfoStoreServiceProcessor() {}
};

class TVREventInfoStoreServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TVREventInfoStoreServiceProcessorFactory(const ::boost::shared_ptr< TVREventInfoStoreServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TVREventInfoStoreServiceIfFactory > handlerFactory_;
};

class TVREventInfoStoreServiceMultiface : virtual public TVREventInfoStoreServiceIf {
 public:
  TVREventInfoStoreServiceMultiface(std::vector<boost::shared_ptr<TVREventInfoStoreServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TVREventInfoStoreServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TVREventInfoStoreServiceIf> > ifaces_;
  TVREventInfoStoreServiceMultiface() {}
  void add(boost::shared_ptr<TVREventInfoStoreServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
   ::CRDHN::VR::Data::TEID add(const  ::CRDHN::VR::Data::TEventInfo& eventInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(eventInfo);
    }
    return ifaces_[i]->add(eventInfo);
  }

  bool update(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TEventInfo& eventInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update(eventId, eventInfo);
    }
    return ifaces_[i]->update(eventId, eventInfo);
  }

  void get( ::CRDHN::VR::Data::TEventInfo& _return, const  ::CRDHN::VR::Data::TEID eventId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, eventId);
    }
    ifaces_[i]->get(_return, eventId);
    return;
  }

  void getBasicInfo( ::CRDHN::VR::Data::TEventBasicInfo& _return, const  ::CRDHN::VR::Data::TEID eventId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBasicInfo(_return, eventId);
    }
    ifaces_[i]->getBasicInfo(_return, eventId);
    return;
  }

  bool remove(const  ::CRDHN::VR::Data::TEID eventId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(eventId);
    }
    return ifaces_[i]->remove(eventId);
  }

  int32_t getEventStatus(const  ::CRDHN::VR::Data::TEID eventId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEventStatus(eventId);
    }
    return ifaces_[i]->getEventStatus(eventId);
  }

  void getInjectionOrder( ::CRDHN::VR::Data::TInjectionOrderInfo& _return, const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TTIME childrenDateOfBirth) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getInjectionOrder(_return, eventId, childrenDateOfBirth);
    }
    ifaces_[i]->getInjectionOrder(_return, eventId, childrenDateOfBirth);
    return;
  }

  void getExtendedInjectionOrder( ::CRDHN::VR::Data::TInjectionOrderInfo& _return, const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TTIME childrenDateOfBirth, const int32_t desiredOrderNumber) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getExtendedInjectionOrder(_return, eventId, childrenDateOfBirth, desiredOrderNumber);
    }
    ifaces_[i]->getExtendedInjectionOrder(_return, eventId, childrenDateOfBirth, desiredOrderNumber);
    return;
  }

  void getNewRegistrationCode(std::string& _return, const  ::CRDHN::VR::Data::TEID eventId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNewRegistrationCode(_return, eventId);
    }
    ifaces_[i]->getNewRegistrationCode(_return, eventId);
    return;
  }

  bool addRegistration(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TRID registrationId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addRegistration(eventId, registrationId);
    }
    return ifaces_[i]->addRegistration(eventId, registrationId);
  }

  bool addExtendedRegistration(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TRID registrationId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addExtendedRegistration(eventId, registrationId);
    }
    return ifaces_[i]->addExtendedRegistration(eventId, registrationId);
  }

  bool removeRegistration(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TRID registrationId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeRegistration(eventId, registrationId);
    }
    return ifaces_[i]->removeRegistration(eventId, registrationId);
  }

  void getRegistrations(std::vector< ::CRDHN::VR::Data::TRID> & _return, const  ::CRDHN::VR::Data::TEID eventId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRegistrations(_return, eventId);
    }
    ifaces_[i]->getRegistrations(_return, eventId);
    return;
  }

  bool addVaccinatedChildren(const  ::CRDHN::VR::Data::TEID eventId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addVaccinatedChildren(eventId);
    }
    return ifaces_[i]->addVaccinatedChildren(eventId);
  }

  bool removeVaccinatedChildren(const  ::CRDHN::VR::Data::TEID eventId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeVaccinatedChildren(eventId);
    }
    return ifaces_[i]->removeVaccinatedChildren(eventId);
  }

};

}} // namespace

#endif
