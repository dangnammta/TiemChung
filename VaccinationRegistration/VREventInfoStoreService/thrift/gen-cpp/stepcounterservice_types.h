/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef stepcounterservice_TYPES_H
#define stepcounterservice_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace CRDHN { namespace Common {

typedef struct _TStepCounter__isset {
  _TStepCounter__isset() : counter(false) {}
  bool counter;
} _TStepCounter__isset;

class TStepCounter {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  TStepCounter() : counter(0) {
  }

  virtual ~TStepCounter() throw() {}

  int64_t counter;

  _TStepCounter__isset __isset;

  void __set_counter(const int64_t val) {
    counter = val;
  }

  bool operator == (const TStepCounter & rhs) const
  {
    if (!(counter == rhs.counter))
      return false;
    return true;
  }
  bool operator != (const TStepCounter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStepCounter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TStepCounter &a, TStepCounter &b);

}} // namespace

#endif
