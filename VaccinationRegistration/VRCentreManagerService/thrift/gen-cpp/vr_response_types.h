/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef vr_response_TYPES_H
#define vr_response_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "vr_shared_types.h"


namespace CRDHN { namespace VR { namespace Response {

enum TErrorCode {
  EC_OK = 0,
  EC_SYSTEM = 1,
  EC_PARAM_ERROR = 2,
  EC_NOT_ALLOWED = 3,
  EC_PIN_REGISTERED = 10,
  EC_REGISTRATION_FULL = 11,
  EC_REGISTRATION_AVAILABLE = 20,
  EC_REGISTRATION_PENDING = 21,
  EC_REGISTRATION_DISABLE = 22,
  EC_EVENT_INFO = 101,
  EC_REGISTRATION_INFO = 102,
  EC_DAILY_REGISTRATIONS = 103,
  EC_DAILY_INJECTION = 104,
  EC_LIST_EVENTS = 105,
  EC_VACCINE_INFO = 106,
  EC_CENTRE_INFO = 107,
  EC_COMMON_STORE = 108
};

extern const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES;

typedef struct _TError__isset {
  _TError__isset() : errorMessage(false) {}
  bool errorMessage;
} _TError__isset;

class TError {
 public:

  static const char* ascii_fingerprint; // = "96705E9A3FD7B072319C71653E0DBB90";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x70,0x5E,0x9A,0x3F,0xD7,0xB0,0x72,0x31,0x9C,0x71,0x65,0x3E,0x0D,0xBB,0x90};

  TError() : errorCode(0), errorMessage() {
  }

  virtual ~TError() throw() {}

  int32_t errorCode;
  std::string errorMessage;

  _TError__isset __isset;

  void __set_errorCode(const int32_t val) {
    errorCode = val;
  }

  void __set_errorMessage(const std::string& val) {
    errorMessage = val;
    __isset.errorMessage = true;
  }

  bool operator == (const TError & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (__isset.errorMessage != rhs.__isset.errorMessage)
      return false;
    else if (__isset.errorMessage && !(errorMessage == rhs.errorMessage))
      return false;
    return true;
  }
  bool operator != (const TError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TError &a, TError &b);


class TRMAddRegistrationResponse {
 public:

  static const char* ascii_fingerprint; // = "897791680A24D292AA38F98A67A2321C";
  static const uint8_t binary_fingerprint[16]; // = {0x89,0x77,0x91,0x68,0x0A,0x24,0xD2,0x92,0xAA,0x38,0xF9,0x8A,0x67,0xA2,0x32,0x1C};

  TRMAddRegistrationResponse() : registrationCode(), injectionOrderNumber(0), injectionDate(0), injectionTime() {
  }

  virtual ~TRMAddRegistrationResponse() throw() {}

  TError error;
  std::string registrationCode;
  int32_t injectionOrderNumber;
   ::CRDHN::VR::Data::TTIME injectionDate;
  std::string injectionTime;

  void __set_error(const TError& val) {
    error = val;
  }

  void __set_registrationCode(const std::string& val) {
    registrationCode = val;
  }

  void __set_injectionOrderNumber(const int32_t val) {
    injectionOrderNumber = val;
  }

  void __set_injectionDate(const  ::CRDHN::VR::Data::TTIME val) {
    injectionDate = val;
  }

  void __set_injectionTime(const std::string& val) {
    injectionTime = val;
  }

  bool operator == (const TRMAddRegistrationResponse & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(registrationCode == rhs.registrationCode))
      return false;
    if (!(injectionOrderNumber == rhs.injectionOrderNumber))
      return false;
    if (!(injectionDate == rhs.injectionDate))
      return false;
    if (!(injectionTime == rhs.injectionTime))
      return false;
    return true;
  }
  bool operator != (const TRMAddRegistrationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRMAddRegistrationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TRMAddRegistrationResponse &a, TRMAddRegistrationResponse &b);


class TRMAddExtraRegistrationResponse {
 public:

  static const char* ascii_fingerprint; // = "897791680A24D292AA38F98A67A2321C";
  static const uint8_t binary_fingerprint[16]; // = {0x89,0x77,0x91,0x68,0x0A,0x24,0xD2,0x92,0xAA,0x38,0xF9,0x8A,0x67,0xA2,0x32,0x1C};

  TRMAddExtraRegistrationResponse() : registrationCode(), injectionOrderNumber(0), injectionDate(0), injectionTime() {
  }

  virtual ~TRMAddExtraRegistrationResponse() throw() {}

  TError error;
  std::string registrationCode;
  int32_t injectionOrderNumber;
   ::CRDHN::VR::Data::TTIME injectionDate;
  std::string injectionTime;

  void __set_error(const TError& val) {
    error = val;
  }

  void __set_registrationCode(const std::string& val) {
    registrationCode = val;
  }

  void __set_injectionOrderNumber(const int32_t val) {
    injectionOrderNumber = val;
  }

  void __set_injectionDate(const  ::CRDHN::VR::Data::TTIME val) {
    injectionDate = val;
  }

  void __set_injectionTime(const std::string& val) {
    injectionTime = val;
  }

  bool operator == (const TRMAddExtraRegistrationResponse & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(registrationCode == rhs.registrationCode))
      return false;
    if (!(injectionOrderNumber == rhs.injectionOrderNumber))
      return false;
    if (!(injectionDate == rhs.injectionDate))
      return false;
    if (!(injectionTime == rhs.injectionTime))
      return false;
    return true;
  }
  bool operator != (const TRMAddExtraRegistrationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRMAddExtraRegistrationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TRMAddExtraRegistrationResponse &a, TRMAddExtraRegistrationResponse &b);

typedef struct _TVMCreateEventResponse__isset {
  _TVMCreateEventResponse__isset() : eventId(false) {}
  bool eventId;
} _TVMCreateEventResponse__isset;

class TVMCreateEventResponse {
 public:

  static const char* ascii_fingerprint; // = "185E211EF099F86731CDFE27B73C6174";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x5E,0x21,0x1E,0xF0,0x99,0xF8,0x67,0x31,0xCD,0xFE,0x27,0xB7,0x3C,0x61,0x74};

  TVMCreateEventResponse() : eventId(0) {
  }

  virtual ~TVMCreateEventResponse() throw() {}

  TError error;
   ::CRDHN::VR::Data::TEID eventId;

  _TVMCreateEventResponse__isset __isset;

  void __set_error(const TError& val) {
    error = val;
  }

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
    __isset.eventId = true;
  }

  bool operator == (const TVMCreateEventResponse & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (__isset.eventId != rhs.__isset.eventId)
      return false;
    else if (__isset.eventId && !(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const TVMCreateEventResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVMCreateEventResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TVMCreateEventResponse &a, TVMCreateEventResponse &b);

typedef struct _TVMGetEventInfoResponse__isset {
  _TVMGetEventInfoResponse__isset() : eventInfo(false) {}
  bool eventInfo;
} _TVMGetEventInfoResponse__isset;

class TVMGetEventInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "FCCFAD034D3E733DB29BE0857C29C138";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0xCF,0xAD,0x03,0x4D,0x3E,0x73,0x3D,0xB2,0x9B,0xE0,0x85,0x7C,0x29,0xC1,0x38};

  TVMGetEventInfoResponse() {
  }

  virtual ~TVMGetEventInfoResponse() throw() {}

  TError error;
   ::CRDHN::VR::Data::TEventInfo eventInfo;

  _TVMGetEventInfoResponse__isset __isset;

  void __set_error(const TError& val) {
    error = val;
  }

  void __set_eventInfo(const  ::CRDHN::VR::Data::TEventInfo& val) {
    eventInfo = val;
    __isset.eventInfo = true;
  }

  bool operator == (const TVMGetEventInfoResponse & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (__isset.eventInfo != rhs.__isset.eventInfo)
      return false;
    else if (__isset.eventInfo && !(eventInfo == rhs.eventInfo))
      return false;
    return true;
  }
  bool operator != (const TVMGetEventInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVMGetEventInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TVMGetEventInfoResponse &a, TVMGetEventInfoResponse &b);

typedef struct _TVMGetEventsResponse__isset {
  _TVMGetEventsResponse__isset() : events(false) {}
  bool events;
} _TVMGetEventsResponse__isset;

class TVMGetEventsResponse {
 public:

  static const char* ascii_fingerprint; // = "5212D0AFDE8D2697E37DFC6FAF39AED9";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0x12,0xD0,0xAF,0xDE,0x8D,0x26,0x97,0xE3,0x7D,0xFC,0x6F,0xAF,0x39,0xAE,0xD9};

  TVMGetEventsResponse() {
  }

  virtual ~TVMGetEventsResponse() throw() {}

  TError error;
  std::vector< ::CRDHN::VR::Data::TEventBasicInfo>  events;

  _TVMGetEventsResponse__isset __isset;

  void __set_error(const TError& val) {
    error = val;
  }

  void __set_events(const std::vector< ::CRDHN::VR::Data::TEventBasicInfo> & val) {
    events = val;
    __isset.events = true;
  }

  bool operator == (const TVMGetEventsResponse & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (__isset.events != rhs.__isset.events)
      return false;
    else if (__isset.events && !(events == rhs.events))
      return false;
    return true;
  }
  bool operator != (const TVMGetEventsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVMGetEventsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TVMGetEventsResponse &a, TVMGetEventsResponse &b);

typedef struct _TVMGetRegistrationResponse__isset {
  _TVMGetRegistrationResponse__isset() : registrationInfo(false) {}
  bool registrationInfo;
} _TVMGetRegistrationResponse__isset;

class TVMGetRegistrationResponse {
 public:

  static const char* ascii_fingerprint; // = "9CE19CF63B832697EC4305EA81434FA6";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0xE1,0x9C,0xF6,0x3B,0x83,0x26,0x97,0xEC,0x43,0x05,0xEA,0x81,0x43,0x4F,0xA6};

  TVMGetRegistrationResponse() {
  }

  virtual ~TVMGetRegistrationResponse() throw() {}

  TError error;
   ::CRDHN::VR::Data::TRegistrationInfo registrationInfo;

  _TVMGetRegistrationResponse__isset __isset;

  void __set_error(const TError& val) {
    error = val;
  }

  void __set_registrationInfo(const  ::CRDHN::VR::Data::TRegistrationInfo& val) {
    registrationInfo = val;
    __isset.registrationInfo = true;
  }

  bool operator == (const TVMGetRegistrationResponse & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (__isset.registrationInfo != rhs.__isset.registrationInfo)
      return false;
    else if (__isset.registrationInfo && !(registrationInfo == rhs.registrationInfo))
      return false;
    return true;
  }
  bool operator != (const TVMGetRegistrationResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVMGetRegistrationResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TVMGetRegistrationResponse &a, TVMGetRegistrationResponse &b);

typedef struct _TVMGetRegistrationsResponse__isset {
  _TVMGetRegistrationsResponse__isset() : registrations(false) {}
  bool registrations;
} _TVMGetRegistrationsResponse__isset;

class TVMGetRegistrationsResponse {
 public:

  static const char* ascii_fingerprint; // = "2B5025DA6BD045C7870228CFF60C4A5C";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0x50,0x25,0xDA,0x6B,0xD0,0x45,0xC7,0x87,0x02,0x28,0xCF,0xF6,0x0C,0x4A,0x5C};

  TVMGetRegistrationsResponse() {
  }

  virtual ~TVMGetRegistrationsResponse() throw() {}

  TError error;
  std::vector< ::CRDHN::VR::Data::TRegistrationInfo>  registrations;

  _TVMGetRegistrationsResponse__isset __isset;

  void __set_error(const TError& val) {
    error = val;
  }

  void __set_registrations(const std::vector< ::CRDHN::VR::Data::TRegistrationInfo> & val) {
    registrations = val;
    __isset.registrations = true;
  }

  bool operator == (const TVMGetRegistrationsResponse & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (__isset.registrations != rhs.__isset.registrations)
      return false;
    else if (__isset.registrations && !(registrations == rhs.registrations))
      return false;
    return true;
  }
  bool operator != (const TVMGetRegistrationsResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVMGetRegistrationsResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TVMGetRegistrationsResponse &a, TVMGetRegistrationsResponse &b);

typedef struct _TCMCreateCentreResponse__isset {
  _TCMCreateCentreResponse__isset() : centreId(false) {}
  bool centreId;
} _TCMCreateCentreResponse__isset;

class TCMCreateCentreResponse {
 public:

  static const char* ascii_fingerprint; // = "185E211EF099F86731CDFE27B73C6174";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x5E,0x21,0x1E,0xF0,0x99,0xF8,0x67,0x31,0xCD,0xFE,0x27,0xB7,0x3C,0x61,0x74};

  TCMCreateCentreResponse() : centreId(0) {
  }

  virtual ~TCMCreateCentreResponse() throw() {}

  TError error;
   ::CRDHN::VR::Data::TCID centreId;

  _TCMCreateCentreResponse__isset __isset;

  void __set_error(const TError& val) {
    error = val;
  }

  void __set_centreId(const  ::CRDHN::VR::Data::TCID val) {
    centreId = val;
    __isset.centreId = true;
  }

  bool operator == (const TCMCreateCentreResponse & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (__isset.centreId != rhs.__isset.centreId)
      return false;
    else if (__isset.centreId && !(centreId == rhs.centreId))
      return false;
    return true;
  }
  bool operator != (const TCMCreateCentreResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCMCreateCentreResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCMCreateCentreResponse &a, TCMCreateCentreResponse &b);

typedef struct _TCMGetCentreInfoResponse__isset {
  _TCMGetCentreInfoResponse__isset() : centreInfo(false) {}
  bool centreInfo;
} _TCMGetCentreInfoResponse__isset;

class TCMGetCentreInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "212EC20D868EB822678208066BA36940";
  static const uint8_t binary_fingerprint[16]; // = {0x21,0x2E,0xC2,0x0D,0x86,0x8E,0xB8,0x22,0x67,0x82,0x08,0x06,0x6B,0xA3,0x69,0x40};

  TCMGetCentreInfoResponse() {
  }

  virtual ~TCMGetCentreInfoResponse() throw() {}

  TError error;
   ::CRDHN::VR::Data::TCentreInfo centreInfo;

  _TCMGetCentreInfoResponse__isset __isset;

  void __set_error(const TError& val) {
    error = val;
  }

  void __set_centreInfo(const  ::CRDHN::VR::Data::TCentreInfo& val) {
    centreInfo = val;
    __isset.centreInfo = true;
  }

  bool operator == (const TCMGetCentreInfoResponse & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (__isset.centreInfo != rhs.__isset.centreInfo)
      return false;
    else if (__isset.centreInfo && !(centreInfo == rhs.centreInfo))
      return false;
    return true;
  }
  bool operator != (const TCMGetCentreInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCMGetCentreInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCMGetCentreInfoResponse &a, TCMGetCentreInfoResponse &b);

typedef struct _TCMGetCentresResponse__isset {
  _TCMGetCentresResponse__isset() : centres(false) {}
  bool centres;
} _TCMGetCentresResponse__isset;

class TCMGetCentresResponse {
 public:

  static const char* ascii_fingerprint; // = "935BB0D445A3FDCB2163DC1AB1902C2B";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0x5B,0xB0,0xD4,0x45,0xA3,0xFD,0xCB,0x21,0x63,0xDC,0x1A,0xB1,0x90,0x2C,0x2B};

  TCMGetCentresResponse() {
  }

  virtual ~TCMGetCentresResponse() throw() {}

  TError error;
  std::vector< ::CRDHN::VR::Data::TCentreInfo>  centres;

  _TCMGetCentresResponse__isset __isset;

  void __set_error(const TError& val) {
    error = val;
  }

  void __set_centres(const std::vector< ::CRDHN::VR::Data::TCentreInfo> & val) {
    centres = val;
    __isset.centres = true;
  }

  bool operator == (const TCMGetCentresResponse & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (__isset.centres != rhs.__isset.centres)
      return false;
    else if (__isset.centres && !(centres == rhs.centres))
      return false;
    return true;
  }
  bool operator != (const TCMGetCentresResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCMGetCentresResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCMGetCentresResponse &a, TCMGetCentresResponse &b);

typedef struct _TCMAddVaccineResponse__isset {
  _TCMAddVaccineResponse__isset() : vaccineId(false) {}
  bool vaccineId;
} _TCMAddVaccineResponse__isset;

class TCMAddVaccineResponse {
 public:

  static const char* ascii_fingerprint; // = "185E211EF099F86731CDFE27B73C6174";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x5E,0x21,0x1E,0xF0,0x99,0xF8,0x67,0x31,0xCD,0xFE,0x27,0xB7,0x3C,0x61,0x74};

  TCMAddVaccineResponse() : vaccineId(0) {
  }

  virtual ~TCMAddVaccineResponse() throw() {}

  TError error;
   ::CRDHN::VR::Data::TVID vaccineId;

  _TCMAddVaccineResponse__isset __isset;

  void __set_error(const TError& val) {
    error = val;
  }

  void __set_vaccineId(const  ::CRDHN::VR::Data::TVID val) {
    vaccineId = val;
    __isset.vaccineId = true;
  }

  bool operator == (const TCMAddVaccineResponse & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (__isset.vaccineId != rhs.__isset.vaccineId)
      return false;
    else if (__isset.vaccineId && !(vaccineId == rhs.vaccineId))
      return false;
    return true;
  }
  bool operator != (const TCMAddVaccineResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCMAddVaccineResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCMAddVaccineResponse &a, TCMAddVaccineResponse &b);

typedef struct _TCMGetVaccineInfoResponse__isset {
  _TCMGetVaccineInfoResponse__isset() : vaccineInfo(false) {}
  bool vaccineInfo;
} _TCMGetVaccineInfoResponse__isset;

class TCMGetVaccineInfoResponse {
 public:

  static const char* ascii_fingerprint; // = "8B22F7101E72B3B7A3E64E20164F63BB";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0x22,0xF7,0x10,0x1E,0x72,0xB3,0xB7,0xA3,0xE6,0x4E,0x20,0x16,0x4F,0x63,0xBB};

  TCMGetVaccineInfoResponse() {
  }

  virtual ~TCMGetVaccineInfoResponse() throw() {}

  TError error;
   ::CRDHN::VR::Data::TVaccineInfo vaccineInfo;

  _TCMGetVaccineInfoResponse__isset __isset;

  void __set_error(const TError& val) {
    error = val;
  }

  void __set_vaccineInfo(const  ::CRDHN::VR::Data::TVaccineInfo& val) {
    vaccineInfo = val;
    __isset.vaccineInfo = true;
  }

  bool operator == (const TCMGetVaccineInfoResponse & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (__isset.vaccineInfo != rhs.__isset.vaccineInfo)
      return false;
    else if (__isset.vaccineInfo && !(vaccineInfo == rhs.vaccineInfo))
      return false;
    return true;
  }
  bool operator != (const TCMGetVaccineInfoResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCMGetVaccineInfoResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCMGetVaccineInfoResponse &a, TCMGetVaccineInfoResponse &b);

typedef struct _TCMGetVaccinesResponse__isset {
  _TCMGetVaccinesResponse__isset() : vaccines(false) {}
  bool vaccines;
} _TCMGetVaccinesResponse__isset;

class TCMGetVaccinesResponse {
 public:

  static const char* ascii_fingerprint; // = "51A6666CF84B659D1704D50E108E34EB";
  static const uint8_t binary_fingerprint[16]; // = {0x51,0xA6,0x66,0x6C,0xF8,0x4B,0x65,0x9D,0x17,0x04,0xD5,0x0E,0x10,0x8E,0x34,0xEB};

  TCMGetVaccinesResponse() {
  }

  virtual ~TCMGetVaccinesResponse() throw() {}

  TError error;
  std::vector< ::CRDHN::VR::Data::TVaccineInfo>  vaccines;

  _TCMGetVaccinesResponse__isset __isset;

  void __set_error(const TError& val) {
    error = val;
  }

  void __set_vaccines(const std::vector< ::CRDHN::VR::Data::TVaccineInfo> & val) {
    vaccines = val;
    __isset.vaccines = true;
  }

  bool operator == (const TCMGetVaccinesResponse & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (__isset.vaccines != rhs.__isset.vaccines)
      return false;
    else if (__isset.vaccines && !(vaccines == rhs.vaccines))
      return false;
    return true;
  }
  bool operator != (const TCMGetVaccinesResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCMGetVaccinesResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCMGetVaccinesResponse &a, TCMGetVaccinesResponse &b);

}}} // namespace

#endif
