/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TStringToI32SetServiceR_H
#define TStringToI32SetServiceR_H

#include <thrift/TDispatchProcessor.h>
#include "stringtoi32setservice_types.h"

namespace CRDHN { namespace Common {

class TStringToI32SetServiceRIf {
 public:
  virtual ~TStringToI32SetServiceRIf() {}
  virtual void getValue( ::CRDHN::Common::Data::StringToI32Set::TValue& _return, const  ::CRDHN::Common::Data::StringToI32Set::TKey& key) = 0;
  virtual void getValue_random( ::CRDHN::Common::Data::StringToI32Set::TValue& _return, const  ::CRDHN::Common::Data::StringToI32Set::TKey& key, const int32_t size) = 0;
  virtual void getValue_slice( ::CRDHN::Common::Data::StringToI32Set::TValue& _return, const  ::CRDHN::Common::Data::StringToI32Set::TKey& key, const int32_t idxFrom, const int32_t size) = 0;
  virtual void getValueMulti(std::map< ::CRDHN::Common::Data::StringToI32Set::TKey,  ::CRDHN::Common::Data::StringToI32Set::TValue> & _return, const std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey> & keys) = 0;
  virtual bool hasItem(const  ::CRDHN::Common::Data::StringToI32Set::TKey& key, const  ::CRDHN::Common::Data::StringToI32Set::TItem item) = 0;
  virtual int32_t getSize(const  ::CRDHN::Common::Data::StringToI32Set::TKey& key) = 0;
  virtual void getSizeMulti(std::map< ::CRDHN::Common::Data::StringToI32Set::TKey, int32_t> & _return, const std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey> & keys) = 0;
};

class TStringToI32SetServiceRIfFactory {
 public:
  typedef TStringToI32SetServiceRIf Handler;

  virtual ~TStringToI32SetServiceRIfFactory() {}

  virtual TStringToI32SetServiceRIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TStringToI32SetServiceRIf* /* handler */) = 0;
};

class TStringToI32SetServiceRIfSingletonFactory : virtual public TStringToI32SetServiceRIfFactory {
 public:
  TStringToI32SetServiceRIfSingletonFactory(const boost::shared_ptr<TStringToI32SetServiceRIf>& iface) : iface_(iface) {}
  virtual ~TStringToI32SetServiceRIfSingletonFactory() {}

  virtual TStringToI32SetServiceRIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TStringToI32SetServiceRIf* /* handler */) {}

 protected:
  boost::shared_ptr<TStringToI32SetServiceRIf> iface_;
};

class TStringToI32SetServiceRNull : virtual public TStringToI32SetServiceRIf {
 public:
  virtual ~TStringToI32SetServiceRNull() {}
  void getValue( ::CRDHN::Common::Data::StringToI32Set::TValue& /* _return */, const  ::CRDHN::Common::Data::StringToI32Set::TKey& /* key */) {
    return;
  }
  void getValue_random( ::CRDHN::Common::Data::StringToI32Set::TValue& /* _return */, const  ::CRDHN::Common::Data::StringToI32Set::TKey& /* key */, const int32_t /* size */) {
    return;
  }
  void getValue_slice( ::CRDHN::Common::Data::StringToI32Set::TValue& /* _return */, const  ::CRDHN::Common::Data::StringToI32Set::TKey& /* key */, const int32_t /* idxFrom */, const int32_t /* size */) {
    return;
  }
  void getValueMulti(std::map< ::CRDHN::Common::Data::StringToI32Set::TKey,  ::CRDHN::Common::Data::StringToI32Set::TValue> & /* _return */, const std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey> & /* keys */) {
    return;
  }
  bool hasItem(const  ::CRDHN::Common::Data::StringToI32Set::TKey& /* key */, const  ::CRDHN::Common::Data::StringToI32Set::TItem /* item */) {
    bool _return = false;
    return _return;
  }
  int32_t getSize(const  ::CRDHN::Common::Data::StringToI32Set::TKey& /* key */) {
    int32_t _return = 0;
    return _return;
  }
  void getSizeMulti(std::map< ::CRDHN::Common::Data::StringToI32Set::TKey, int32_t> & /* _return */, const std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey> & /* keys */) {
    return;
  }
};

typedef struct _TStringToI32SetServiceR_getValue_args__isset {
  _TStringToI32SetServiceR_getValue_args__isset() : key(false) {}
  bool key;
} _TStringToI32SetServiceR_getValue_args__isset;

class TStringToI32SetServiceR_getValue_args {
 public:

  TStringToI32SetServiceR_getValue_args() : key() {
  }

  virtual ~TStringToI32SetServiceR_getValue_args() throw() {}

   ::CRDHN::Common::Data::StringToI32Set::TKey key;

  _TStringToI32SetServiceR_getValue_args__isset __isset;

  void __set_key(const  ::CRDHN::Common::Data::StringToI32Set::TKey& val) {
    key = val;
  }

  bool operator == (const TStringToI32SetServiceR_getValue_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const TStringToI32SetServiceR_getValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringToI32SetServiceR_getValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringToI32SetServiceR_getValue_pargs {
 public:


  virtual ~TStringToI32SetServiceR_getValue_pargs() throw() {}

  const  ::CRDHN::Common::Data::StringToI32Set::TKey* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringToI32SetServiceR_getValue_result__isset {
  _TStringToI32SetServiceR_getValue_result__isset() : success(false) {}
  bool success;
} _TStringToI32SetServiceR_getValue_result__isset;

class TStringToI32SetServiceR_getValue_result {
 public:

  TStringToI32SetServiceR_getValue_result() {
  }

  virtual ~TStringToI32SetServiceR_getValue_result() throw() {}

   ::CRDHN::Common::Data::StringToI32Set::TValue success;

  _TStringToI32SetServiceR_getValue_result__isset __isset;

  void __set_success(const  ::CRDHN::Common::Data::StringToI32Set::TValue& val) {
    success = val;
  }

  bool operator == (const TStringToI32SetServiceR_getValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringToI32SetServiceR_getValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringToI32SetServiceR_getValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringToI32SetServiceR_getValue_presult__isset {
  _TStringToI32SetServiceR_getValue_presult__isset() : success(false) {}
  bool success;
} _TStringToI32SetServiceR_getValue_presult__isset;

class TStringToI32SetServiceR_getValue_presult {
 public:


  virtual ~TStringToI32SetServiceR_getValue_presult() throw() {}

   ::CRDHN::Common::Data::StringToI32Set::TValue* success;

  _TStringToI32SetServiceR_getValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringToI32SetServiceR_getValue_random_args__isset {
  _TStringToI32SetServiceR_getValue_random_args__isset() : key(false), size(false) {}
  bool key;
  bool size;
} _TStringToI32SetServiceR_getValue_random_args__isset;

class TStringToI32SetServiceR_getValue_random_args {
 public:

  TStringToI32SetServiceR_getValue_random_args() : key(), size(0) {
  }

  virtual ~TStringToI32SetServiceR_getValue_random_args() throw() {}

   ::CRDHN::Common::Data::StringToI32Set::TKey key;
  int32_t size;

  _TStringToI32SetServiceR_getValue_random_args__isset __isset;

  void __set_key(const  ::CRDHN::Common::Data::StringToI32Set::TKey& val) {
    key = val;
  }

  void __set_size(const int32_t val) {
    size = val;
  }

  bool operator == (const TStringToI32SetServiceR_getValue_random_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const TStringToI32SetServiceR_getValue_random_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringToI32SetServiceR_getValue_random_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringToI32SetServiceR_getValue_random_pargs {
 public:


  virtual ~TStringToI32SetServiceR_getValue_random_pargs() throw() {}

  const  ::CRDHN::Common::Data::StringToI32Set::TKey* key;
  const int32_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringToI32SetServiceR_getValue_random_result__isset {
  _TStringToI32SetServiceR_getValue_random_result__isset() : success(false) {}
  bool success;
} _TStringToI32SetServiceR_getValue_random_result__isset;

class TStringToI32SetServiceR_getValue_random_result {
 public:

  TStringToI32SetServiceR_getValue_random_result() {
  }

  virtual ~TStringToI32SetServiceR_getValue_random_result() throw() {}

   ::CRDHN::Common::Data::StringToI32Set::TValue success;

  _TStringToI32SetServiceR_getValue_random_result__isset __isset;

  void __set_success(const  ::CRDHN::Common::Data::StringToI32Set::TValue& val) {
    success = val;
  }

  bool operator == (const TStringToI32SetServiceR_getValue_random_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringToI32SetServiceR_getValue_random_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringToI32SetServiceR_getValue_random_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringToI32SetServiceR_getValue_random_presult__isset {
  _TStringToI32SetServiceR_getValue_random_presult__isset() : success(false) {}
  bool success;
} _TStringToI32SetServiceR_getValue_random_presult__isset;

class TStringToI32SetServiceR_getValue_random_presult {
 public:


  virtual ~TStringToI32SetServiceR_getValue_random_presult() throw() {}

   ::CRDHN::Common::Data::StringToI32Set::TValue* success;

  _TStringToI32SetServiceR_getValue_random_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringToI32SetServiceR_getValue_slice_args__isset {
  _TStringToI32SetServiceR_getValue_slice_args__isset() : key(false), idxFrom(false), size(false) {}
  bool key;
  bool idxFrom;
  bool size;
} _TStringToI32SetServiceR_getValue_slice_args__isset;

class TStringToI32SetServiceR_getValue_slice_args {
 public:

  TStringToI32SetServiceR_getValue_slice_args() : key(), idxFrom(0), size(0) {
  }

  virtual ~TStringToI32SetServiceR_getValue_slice_args() throw() {}

   ::CRDHN::Common::Data::StringToI32Set::TKey key;
  int32_t idxFrom;
  int32_t size;

  _TStringToI32SetServiceR_getValue_slice_args__isset __isset;

  void __set_key(const  ::CRDHN::Common::Data::StringToI32Set::TKey& val) {
    key = val;
  }

  void __set_idxFrom(const int32_t val) {
    idxFrom = val;
  }

  void __set_size(const int32_t val) {
    size = val;
  }

  bool operator == (const TStringToI32SetServiceR_getValue_slice_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(idxFrom == rhs.idxFrom))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const TStringToI32SetServiceR_getValue_slice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringToI32SetServiceR_getValue_slice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringToI32SetServiceR_getValue_slice_pargs {
 public:


  virtual ~TStringToI32SetServiceR_getValue_slice_pargs() throw() {}

  const  ::CRDHN::Common::Data::StringToI32Set::TKey* key;
  const int32_t* idxFrom;
  const int32_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringToI32SetServiceR_getValue_slice_result__isset {
  _TStringToI32SetServiceR_getValue_slice_result__isset() : success(false) {}
  bool success;
} _TStringToI32SetServiceR_getValue_slice_result__isset;

class TStringToI32SetServiceR_getValue_slice_result {
 public:

  TStringToI32SetServiceR_getValue_slice_result() {
  }

  virtual ~TStringToI32SetServiceR_getValue_slice_result() throw() {}

   ::CRDHN::Common::Data::StringToI32Set::TValue success;

  _TStringToI32SetServiceR_getValue_slice_result__isset __isset;

  void __set_success(const  ::CRDHN::Common::Data::StringToI32Set::TValue& val) {
    success = val;
  }

  bool operator == (const TStringToI32SetServiceR_getValue_slice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringToI32SetServiceR_getValue_slice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringToI32SetServiceR_getValue_slice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringToI32SetServiceR_getValue_slice_presult__isset {
  _TStringToI32SetServiceR_getValue_slice_presult__isset() : success(false) {}
  bool success;
} _TStringToI32SetServiceR_getValue_slice_presult__isset;

class TStringToI32SetServiceR_getValue_slice_presult {
 public:


  virtual ~TStringToI32SetServiceR_getValue_slice_presult() throw() {}

   ::CRDHN::Common::Data::StringToI32Set::TValue* success;

  _TStringToI32SetServiceR_getValue_slice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringToI32SetServiceR_getValueMulti_args__isset {
  _TStringToI32SetServiceR_getValueMulti_args__isset() : keys(false) {}
  bool keys;
} _TStringToI32SetServiceR_getValueMulti_args__isset;

class TStringToI32SetServiceR_getValueMulti_args {
 public:

  TStringToI32SetServiceR_getValueMulti_args() {
  }

  virtual ~TStringToI32SetServiceR_getValueMulti_args() throw() {}

  std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey>  keys;

  _TStringToI32SetServiceR_getValueMulti_args__isset __isset;

  void __set_keys(const std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey> & val) {
    keys = val;
  }

  bool operator == (const TStringToI32SetServiceR_getValueMulti_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const TStringToI32SetServiceR_getValueMulti_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringToI32SetServiceR_getValueMulti_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringToI32SetServiceR_getValueMulti_pargs {
 public:


  virtual ~TStringToI32SetServiceR_getValueMulti_pargs() throw() {}

  const std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringToI32SetServiceR_getValueMulti_result__isset {
  _TStringToI32SetServiceR_getValueMulti_result__isset() : success(false) {}
  bool success;
} _TStringToI32SetServiceR_getValueMulti_result__isset;

class TStringToI32SetServiceR_getValueMulti_result {
 public:

  TStringToI32SetServiceR_getValueMulti_result() {
  }

  virtual ~TStringToI32SetServiceR_getValueMulti_result() throw() {}

  std::map< ::CRDHN::Common::Data::StringToI32Set::TKey,  ::CRDHN::Common::Data::StringToI32Set::TValue>  success;

  _TStringToI32SetServiceR_getValueMulti_result__isset __isset;

  void __set_success(const std::map< ::CRDHN::Common::Data::StringToI32Set::TKey,  ::CRDHN::Common::Data::StringToI32Set::TValue> & val) {
    success = val;
  }

  bool operator == (const TStringToI32SetServiceR_getValueMulti_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringToI32SetServiceR_getValueMulti_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringToI32SetServiceR_getValueMulti_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringToI32SetServiceR_getValueMulti_presult__isset {
  _TStringToI32SetServiceR_getValueMulti_presult__isset() : success(false) {}
  bool success;
} _TStringToI32SetServiceR_getValueMulti_presult__isset;

class TStringToI32SetServiceR_getValueMulti_presult {
 public:


  virtual ~TStringToI32SetServiceR_getValueMulti_presult() throw() {}

  std::map< ::CRDHN::Common::Data::StringToI32Set::TKey,  ::CRDHN::Common::Data::StringToI32Set::TValue> * success;

  _TStringToI32SetServiceR_getValueMulti_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringToI32SetServiceR_hasItem_args__isset {
  _TStringToI32SetServiceR_hasItem_args__isset() : key(false), item(false) {}
  bool key;
  bool item;
} _TStringToI32SetServiceR_hasItem_args__isset;

class TStringToI32SetServiceR_hasItem_args {
 public:

  TStringToI32SetServiceR_hasItem_args() : key(), item(0) {
  }

  virtual ~TStringToI32SetServiceR_hasItem_args() throw() {}

   ::CRDHN::Common::Data::StringToI32Set::TKey key;
   ::CRDHN::Common::Data::StringToI32Set::TItem item;

  _TStringToI32SetServiceR_hasItem_args__isset __isset;

  void __set_key(const  ::CRDHN::Common::Data::StringToI32Set::TKey& val) {
    key = val;
  }

  void __set_item(const  ::CRDHN::Common::Data::StringToI32Set::TItem val) {
    item = val;
  }

  bool operator == (const TStringToI32SetServiceR_hasItem_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(item == rhs.item))
      return false;
    return true;
  }
  bool operator != (const TStringToI32SetServiceR_hasItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringToI32SetServiceR_hasItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringToI32SetServiceR_hasItem_pargs {
 public:


  virtual ~TStringToI32SetServiceR_hasItem_pargs() throw() {}

  const  ::CRDHN::Common::Data::StringToI32Set::TKey* key;
  const  ::CRDHN::Common::Data::StringToI32Set::TItem* item;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringToI32SetServiceR_hasItem_result__isset {
  _TStringToI32SetServiceR_hasItem_result__isset() : success(false) {}
  bool success;
} _TStringToI32SetServiceR_hasItem_result__isset;

class TStringToI32SetServiceR_hasItem_result {
 public:

  TStringToI32SetServiceR_hasItem_result() : success(0) {
  }

  virtual ~TStringToI32SetServiceR_hasItem_result() throw() {}

  bool success;

  _TStringToI32SetServiceR_hasItem_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TStringToI32SetServiceR_hasItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringToI32SetServiceR_hasItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringToI32SetServiceR_hasItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringToI32SetServiceR_hasItem_presult__isset {
  _TStringToI32SetServiceR_hasItem_presult__isset() : success(false) {}
  bool success;
} _TStringToI32SetServiceR_hasItem_presult__isset;

class TStringToI32SetServiceR_hasItem_presult {
 public:


  virtual ~TStringToI32SetServiceR_hasItem_presult() throw() {}

  bool* success;

  _TStringToI32SetServiceR_hasItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringToI32SetServiceR_getSize_args__isset {
  _TStringToI32SetServiceR_getSize_args__isset() : key(false) {}
  bool key;
} _TStringToI32SetServiceR_getSize_args__isset;

class TStringToI32SetServiceR_getSize_args {
 public:

  TStringToI32SetServiceR_getSize_args() : key() {
  }

  virtual ~TStringToI32SetServiceR_getSize_args() throw() {}

   ::CRDHN::Common::Data::StringToI32Set::TKey key;

  _TStringToI32SetServiceR_getSize_args__isset __isset;

  void __set_key(const  ::CRDHN::Common::Data::StringToI32Set::TKey& val) {
    key = val;
  }

  bool operator == (const TStringToI32SetServiceR_getSize_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const TStringToI32SetServiceR_getSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringToI32SetServiceR_getSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringToI32SetServiceR_getSize_pargs {
 public:


  virtual ~TStringToI32SetServiceR_getSize_pargs() throw() {}

  const  ::CRDHN::Common::Data::StringToI32Set::TKey* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringToI32SetServiceR_getSize_result__isset {
  _TStringToI32SetServiceR_getSize_result__isset() : success(false) {}
  bool success;
} _TStringToI32SetServiceR_getSize_result__isset;

class TStringToI32SetServiceR_getSize_result {
 public:

  TStringToI32SetServiceR_getSize_result() : success(0) {
  }

  virtual ~TStringToI32SetServiceR_getSize_result() throw() {}

  int32_t success;

  _TStringToI32SetServiceR_getSize_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const TStringToI32SetServiceR_getSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringToI32SetServiceR_getSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringToI32SetServiceR_getSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringToI32SetServiceR_getSize_presult__isset {
  _TStringToI32SetServiceR_getSize_presult__isset() : success(false) {}
  bool success;
} _TStringToI32SetServiceR_getSize_presult__isset;

class TStringToI32SetServiceR_getSize_presult {
 public:


  virtual ~TStringToI32SetServiceR_getSize_presult() throw() {}

  int32_t* success;

  _TStringToI32SetServiceR_getSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringToI32SetServiceR_getSizeMulti_args__isset {
  _TStringToI32SetServiceR_getSizeMulti_args__isset() : keys(false) {}
  bool keys;
} _TStringToI32SetServiceR_getSizeMulti_args__isset;

class TStringToI32SetServiceR_getSizeMulti_args {
 public:

  TStringToI32SetServiceR_getSizeMulti_args() {
  }

  virtual ~TStringToI32SetServiceR_getSizeMulti_args() throw() {}

  std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey>  keys;

  _TStringToI32SetServiceR_getSizeMulti_args__isset __isset;

  void __set_keys(const std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey> & val) {
    keys = val;
  }

  bool operator == (const TStringToI32SetServiceR_getSizeMulti_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const TStringToI32SetServiceR_getSizeMulti_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringToI32SetServiceR_getSizeMulti_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringToI32SetServiceR_getSizeMulti_pargs {
 public:


  virtual ~TStringToI32SetServiceR_getSizeMulti_pargs() throw() {}

  const std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringToI32SetServiceR_getSizeMulti_result__isset {
  _TStringToI32SetServiceR_getSizeMulti_result__isset() : success(false) {}
  bool success;
} _TStringToI32SetServiceR_getSizeMulti_result__isset;

class TStringToI32SetServiceR_getSizeMulti_result {
 public:

  TStringToI32SetServiceR_getSizeMulti_result() {
  }

  virtual ~TStringToI32SetServiceR_getSizeMulti_result() throw() {}

  std::map< ::CRDHN::Common::Data::StringToI32Set::TKey, int32_t>  success;

  _TStringToI32SetServiceR_getSizeMulti_result__isset __isset;

  void __set_success(const std::map< ::CRDHN::Common::Data::StringToI32Set::TKey, int32_t> & val) {
    success = val;
  }

  bool operator == (const TStringToI32SetServiceR_getSizeMulti_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringToI32SetServiceR_getSizeMulti_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringToI32SetServiceR_getSizeMulti_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringToI32SetServiceR_getSizeMulti_presult__isset {
  _TStringToI32SetServiceR_getSizeMulti_presult__isset() : success(false) {}
  bool success;
} _TStringToI32SetServiceR_getSizeMulti_presult__isset;

class TStringToI32SetServiceR_getSizeMulti_presult {
 public:


  virtual ~TStringToI32SetServiceR_getSizeMulti_presult() throw() {}

  std::map< ::CRDHN::Common::Data::StringToI32Set::TKey, int32_t> * success;

  _TStringToI32SetServiceR_getSizeMulti_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TStringToI32SetServiceRClient : virtual public TStringToI32SetServiceRIf {
 public:
  TStringToI32SetServiceRClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TStringToI32SetServiceRClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getValue( ::CRDHN::Common::Data::StringToI32Set::TValue& _return, const  ::CRDHN::Common::Data::StringToI32Set::TKey& key);
  void send_getValue(const  ::CRDHN::Common::Data::StringToI32Set::TKey& key);
  void recv_getValue( ::CRDHN::Common::Data::StringToI32Set::TValue& _return);
  void getValue_random( ::CRDHN::Common::Data::StringToI32Set::TValue& _return, const  ::CRDHN::Common::Data::StringToI32Set::TKey& key, const int32_t size);
  void send_getValue_random(const  ::CRDHN::Common::Data::StringToI32Set::TKey& key, const int32_t size);
  void recv_getValue_random( ::CRDHN::Common::Data::StringToI32Set::TValue& _return);
  void getValue_slice( ::CRDHN::Common::Data::StringToI32Set::TValue& _return, const  ::CRDHN::Common::Data::StringToI32Set::TKey& key, const int32_t idxFrom, const int32_t size);
  void send_getValue_slice(const  ::CRDHN::Common::Data::StringToI32Set::TKey& key, const int32_t idxFrom, const int32_t size);
  void recv_getValue_slice( ::CRDHN::Common::Data::StringToI32Set::TValue& _return);
  void getValueMulti(std::map< ::CRDHN::Common::Data::StringToI32Set::TKey,  ::CRDHN::Common::Data::StringToI32Set::TValue> & _return, const std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey> & keys);
  void send_getValueMulti(const std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey> & keys);
  void recv_getValueMulti(std::map< ::CRDHN::Common::Data::StringToI32Set::TKey,  ::CRDHN::Common::Data::StringToI32Set::TValue> & _return);
  bool hasItem(const  ::CRDHN::Common::Data::StringToI32Set::TKey& key, const  ::CRDHN::Common::Data::StringToI32Set::TItem item);
  void send_hasItem(const  ::CRDHN::Common::Data::StringToI32Set::TKey& key, const  ::CRDHN::Common::Data::StringToI32Set::TItem item);
  bool recv_hasItem();
  int32_t getSize(const  ::CRDHN::Common::Data::StringToI32Set::TKey& key);
  void send_getSize(const  ::CRDHN::Common::Data::StringToI32Set::TKey& key);
  int32_t recv_getSize();
  void getSizeMulti(std::map< ::CRDHN::Common::Data::StringToI32Set::TKey, int32_t> & _return, const std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey> & keys);
  void send_getSizeMulti(const std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey> & keys);
  void recv_getSizeMulti(std::map< ::CRDHN::Common::Data::StringToI32Set::TKey, int32_t> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TStringToI32SetServiceRProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TStringToI32SetServiceRIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TStringToI32SetServiceRProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getValue_random(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getValue_slice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getValueMulti(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_hasItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSizeMulti(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TStringToI32SetServiceRProcessor(boost::shared_ptr<TStringToI32SetServiceRIf> iface) :
    iface_(iface) {
    processMap_["getValue"] = &TStringToI32SetServiceRProcessor::process_getValue;
    processMap_["getValue_random"] = &TStringToI32SetServiceRProcessor::process_getValue_random;
    processMap_["getValue_slice"] = &TStringToI32SetServiceRProcessor::process_getValue_slice;
    processMap_["getValueMulti"] = &TStringToI32SetServiceRProcessor::process_getValueMulti;
    processMap_["hasItem"] = &TStringToI32SetServiceRProcessor::process_hasItem;
    processMap_["getSize"] = &TStringToI32SetServiceRProcessor::process_getSize;
    processMap_["getSizeMulti"] = &TStringToI32SetServiceRProcessor::process_getSizeMulti;
  }

  virtual ~TStringToI32SetServiceRProcessor() {}
};

class TStringToI32SetServiceRProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TStringToI32SetServiceRProcessorFactory(const ::boost::shared_ptr< TStringToI32SetServiceRIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TStringToI32SetServiceRIfFactory > handlerFactory_;
};

class TStringToI32SetServiceRMultiface : virtual public TStringToI32SetServiceRIf {
 public:
  TStringToI32SetServiceRMultiface(std::vector<boost::shared_ptr<TStringToI32SetServiceRIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TStringToI32SetServiceRMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TStringToI32SetServiceRIf> > ifaces_;
  TStringToI32SetServiceRMultiface() {}
  void add(boost::shared_ptr<TStringToI32SetServiceRIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getValue( ::CRDHN::Common::Data::StringToI32Set::TValue& _return, const  ::CRDHN::Common::Data::StringToI32Set::TKey& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getValue(_return, key);
    }
    ifaces_[i]->getValue(_return, key);
    return;
  }

  void getValue_random( ::CRDHN::Common::Data::StringToI32Set::TValue& _return, const  ::CRDHN::Common::Data::StringToI32Set::TKey& key, const int32_t size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getValue_random(_return, key, size);
    }
    ifaces_[i]->getValue_random(_return, key, size);
    return;
  }

  void getValue_slice( ::CRDHN::Common::Data::StringToI32Set::TValue& _return, const  ::CRDHN::Common::Data::StringToI32Set::TKey& key, const int32_t idxFrom, const int32_t size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getValue_slice(_return, key, idxFrom, size);
    }
    ifaces_[i]->getValue_slice(_return, key, idxFrom, size);
    return;
  }

  void getValueMulti(std::map< ::CRDHN::Common::Data::StringToI32Set::TKey,  ::CRDHN::Common::Data::StringToI32Set::TValue> & _return, const std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey> & keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getValueMulti(_return, keys);
    }
    ifaces_[i]->getValueMulti(_return, keys);
    return;
  }

  bool hasItem(const  ::CRDHN::Common::Data::StringToI32Set::TKey& key, const  ::CRDHN::Common::Data::StringToI32Set::TItem item) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hasItem(key, item);
    }
    return ifaces_[i]->hasItem(key, item);
  }

  int32_t getSize(const  ::CRDHN::Common::Data::StringToI32Set::TKey& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSize(key);
    }
    return ifaces_[i]->getSize(key);
  }

  void getSizeMulti(std::map< ::CRDHN::Common::Data::StringToI32Set::TKey, int32_t> & _return, const std::vector< ::CRDHN::Common::Data::StringToI32Set::TKey> & keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSizeMulti(_return, keys);
    }
    ifaces_[i]->getSizeMulti(_return, keys);
    return;
  }

};

}} // namespace

#endif
