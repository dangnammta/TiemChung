/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TVRVaccineInfoStoreService_H
#define TVRVaccineInfoStoreService_H

#include <thrift/TDispatchProcessor.h>
#include "vrvaccineinfostoreservice_types.h"

namespace CRDHN { namespace VR {

class TVRVaccineInfoStoreServiceIf {
 public:
  virtual ~TVRVaccineInfoStoreServiceIf() {}
  virtual  ::CRDHN::VR::Data::TVID add(const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo) = 0;
  virtual void get( ::CRDHN::VR::Data::TVaccineInfo& _return, const  ::CRDHN::VR::Data::TVID vaccineId) = 0;
  virtual bool update(const  ::CRDHN::VR::Data::TVID vaccineId, const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo) = 0;
  virtual bool remove(const  ::CRDHN::VR::Data::TVID vaccineId) = 0;
};

class TVRVaccineInfoStoreServiceIfFactory {
 public:
  typedef TVRVaccineInfoStoreServiceIf Handler;

  virtual ~TVRVaccineInfoStoreServiceIfFactory() {}

  virtual TVRVaccineInfoStoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TVRVaccineInfoStoreServiceIf* /* handler */) = 0;
};

class TVRVaccineInfoStoreServiceIfSingletonFactory : virtual public TVRVaccineInfoStoreServiceIfFactory {
 public:
  TVRVaccineInfoStoreServiceIfSingletonFactory(const boost::shared_ptr<TVRVaccineInfoStoreServiceIf>& iface) : iface_(iface) {}
  virtual ~TVRVaccineInfoStoreServiceIfSingletonFactory() {}

  virtual TVRVaccineInfoStoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TVRVaccineInfoStoreServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TVRVaccineInfoStoreServiceIf> iface_;
};

class TVRVaccineInfoStoreServiceNull : virtual public TVRVaccineInfoStoreServiceIf {
 public:
  virtual ~TVRVaccineInfoStoreServiceNull() {}
   ::CRDHN::VR::Data::TVID add(const  ::CRDHN::VR::Data::TVaccineInfo& /* vaccineInfo */) {
     ::CRDHN::VR::Data::TVID _return = 0;
    return _return;
  }
  void get( ::CRDHN::VR::Data::TVaccineInfo& /* _return */, const  ::CRDHN::VR::Data::TVID /* vaccineId */) {
    return;
  }
  bool update(const  ::CRDHN::VR::Data::TVID /* vaccineId */, const  ::CRDHN::VR::Data::TVaccineInfo& /* vaccineInfo */) {
    bool _return = false;
    return _return;
  }
  bool remove(const  ::CRDHN::VR::Data::TVID /* vaccineId */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _TVRVaccineInfoStoreService_add_args__isset {
  _TVRVaccineInfoStoreService_add_args__isset() : vaccineInfo(false) {}
  bool vaccineInfo;
} _TVRVaccineInfoStoreService_add_args__isset;

class TVRVaccineInfoStoreService_add_args {
 public:

  TVRVaccineInfoStoreService_add_args() {
  }

  virtual ~TVRVaccineInfoStoreService_add_args() throw() {}

   ::CRDHN::VR::Data::TVaccineInfo vaccineInfo;

  _TVRVaccineInfoStoreService_add_args__isset __isset;

  void __set_vaccineInfo(const  ::CRDHN::VR::Data::TVaccineInfo& val) {
    vaccineInfo = val;
  }

  bool operator == (const TVRVaccineInfoStoreService_add_args & rhs) const
  {
    if (!(vaccineInfo == rhs.vaccineInfo))
      return false;
    return true;
  }
  bool operator != (const TVRVaccineInfoStoreService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRVaccineInfoStoreService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRVaccineInfoStoreService_add_pargs {
 public:


  virtual ~TVRVaccineInfoStoreService_add_pargs() throw() {}

  const  ::CRDHN::VR::Data::TVaccineInfo* vaccineInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRVaccineInfoStoreService_add_result__isset {
  _TVRVaccineInfoStoreService_add_result__isset() : success(false) {}
  bool success;
} _TVRVaccineInfoStoreService_add_result__isset;

class TVRVaccineInfoStoreService_add_result {
 public:

  TVRVaccineInfoStoreService_add_result() : success(0) {
  }

  virtual ~TVRVaccineInfoStoreService_add_result() throw() {}

   ::CRDHN::VR::Data::TVID success;

  _TVRVaccineInfoStoreService_add_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Data::TVID val) {
    success = val;
  }

  bool operator == (const TVRVaccineInfoStoreService_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRVaccineInfoStoreService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRVaccineInfoStoreService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRVaccineInfoStoreService_add_presult__isset {
  _TVRVaccineInfoStoreService_add_presult__isset() : success(false) {}
  bool success;
} _TVRVaccineInfoStoreService_add_presult__isset;

class TVRVaccineInfoStoreService_add_presult {
 public:


  virtual ~TVRVaccineInfoStoreService_add_presult() throw() {}

   ::CRDHN::VR::Data::TVID* success;

  _TVRVaccineInfoStoreService_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRVaccineInfoStoreService_get_args__isset {
  _TVRVaccineInfoStoreService_get_args__isset() : vaccineId(false) {}
  bool vaccineId;
} _TVRVaccineInfoStoreService_get_args__isset;

class TVRVaccineInfoStoreService_get_args {
 public:

  TVRVaccineInfoStoreService_get_args() : vaccineId(0) {
  }

  virtual ~TVRVaccineInfoStoreService_get_args() throw() {}

   ::CRDHN::VR::Data::TVID vaccineId;

  _TVRVaccineInfoStoreService_get_args__isset __isset;

  void __set_vaccineId(const  ::CRDHN::VR::Data::TVID val) {
    vaccineId = val;
  }

  bool operator == (const TVRVaccineInfoStoreService_get_args & rhs) const
  {
    if (!(vaccineId == rhs.vaccineId))
      return false;
    return true;
  }
  bool operator != (const TVRVaccineInfoStoreService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRVaccineInfoStoreService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRVaccineInfoStoreService_get_pargs {
 public:


  virtual ~TVRVaccineInfoStoreService_get_pargs() throw() {}

  const  ::CRDHN::VR::Data::TVID* vaccineId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRVaccineInfoStoreService_get_result__isset {
  _TVRVaccineInfoStoreService_get_result__isset() : success(false) {}
  bool success;
} _TVRVaccineInfoStoreService_get_result__isset;

class TVRVaccineInfoStoreService_get_result {
 public:

  TVRVaccineInfoStoreService_get_result() {
  }

  virtual ~TVRVaccineInfoStoreService_get_result() throw() {}

   ::CRDHN::VR::Data::TVaccineInfo success;

  _TVRVaccineInfoStoreService_get_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Data::TVaccineInfo& val) {
    success = val;
  }

  bool operator == (const TVRVaccineInfoStoreService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRVaccineInfoStoreService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRVaccineInfoStoreService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRVaccineInfoStoreService_get_presult__isset {
  _TVRVaccineInfoStoreService_get_presult__isset() : success(false) {}
  bool success;
} _TVRVaccineInfoStoreService_get_presult__isset;

class TVRVaccineInfoStoreService_get_presult {
 public:


  virtual ~TVRVaccineInfoStoreService_get_presult() throw() {}

   ::CRDHN::VR::Data::TVaccineInfo* success;

  _TVRVaccineInfoStoreService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRVaccineInfoStoreService_update_args__isset {
  _TVRVaccineInfoStoreService_update_args__isset() : vaccineId(false), vaccineInfo(false) {}
  bool vaccineId;
  bool vaccineInfo;
} _TVRVaccineInfoStoreService_update_args__isset;

class TVRVaccineInfoStoreService_update_args {
 public:

  TVRVaccineInfoStoreService_update_args() : vaccineId(0) {
  }

  virtual ~TVRVaccineInfoStoreService_update_args() throw() {}

   ::CRDHN::VR::Data::TVID vaccineId;
   ::CRDHN::VR::Data::TVaccineInfo vaccineInfo;

  _TVRVaccineInfoStoreService_update_args__isset __isset;

  void __set_vaccineId(const  ::CRDHN::VR::Data::TVID val) {
    vaccineId = val;
  }

  void __set_vaccineInfo(const  ::CRDHN::VR::Data::TVaccineInfo& val) {
    vaccineInfo = val;
  }

  bool operator == (const TVRVaccineInfoStoreService_update_args & rhs) const
  {
    if (!(vaccineId == rhs.vaccineId))
      return false;
    if (!(vaccineInfo == rhs.vaccineInfo))
      return false;
    return true;
  }
  bool operator != (const TVRVaccineInfoStoreService_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRVaccineInfoStoreService_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRVaccineInfoStoreService_update_pargs {
 public:


  virtual ~TVRVaccineInfoStoreService_update_pargs() throw() {}

  const  ::CRDHN::VR::Data::TVID* vaccineId;
  const  ::CRDHN::VR::Data::TVaccineInfo* vaccineInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRVaccineInfoStoreService_update_result__isset {
  _TVRVaccineInfoStoreService_update_result__isset() : success(false) {}
  bool success;
} _TVRVaccineInfoStoreService_update_result__isset;

class TVRVaccineInfoStoreService_update_result {
 public:

  TVRVaccineInfoStoreService_update_result() : success(0) {
  }

  virtual ~TVRVaccineInfoStoreService_update_result() throw() {}

  bool success;

  _TVRVaccineInfoStoreService_update_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVRVaccineInfoStoreService_update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRVaccineInfoStoreService_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRVaccineInfoStoreService_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRVaccineInfoStoreService_update_presult__isset {
  _TVRVaccineInfoStoreService_update_presult__isset() : success(false) {}
  bool success;
} _TVRVaccineInfoStoreService_update_presult__isset;

class TVRVaccineInfoStoreService_update_presult {
 public:


  virtual ~TVRVaccineInfoStoreService_update_presult() throw() {}

  bool* success;

  _TVRVaccineInfoStoreService_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRVaccineInfoStoreService_remove_args__isset {
  _TVRVaccineInfoStoreService_remove_args__isset() : vaccineId(false) {}
  bool vaccineId;
} _TVRVaccineInfoStoreService_remove_args__isset;

class TVRVaccineInfoStoreService_remove_args {
 public:

  TVRVaccineInfoStoreService_remove_args() : vaccineId(0) {
  }

  virtual ~TVRVaccineInfoStoreService_remove_args() throw() {}

   ::CRDHN::VR::Data::TVID vaccineId;

  _TVRVaccineInfoStoreService_remove_args__isset __isset;

  void __set_vaccineId(const  ::CRDHN::VR::Data::TVID val) {
    vaccineId = val;
  }

  bool operator == (const TVRVaccineInfoStoreService_remove_args & rhs) const
  {
    if (!(vaccineId == rhs.vaccineId))
      return false;
    return true;
  }
  bool operator != (const TVRVaccineInfoStoreService_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRVaccineInfoStoreService_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRVaccineInfoStoreService_remove_pargs {
 public:


  virtual ~TVRVaccineInfoStoreService_remove_pargs() throw() {}

  const  ::CRDHN::VR::Data::TVID* vaccineId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRVaccineInfoStoreService_remove_result__isset {
  _TVRVaccineInfoStoreService_remove_result__isset() : success(false) {}
  bool success;
} _TVRVaccineInfoStoreService_remove_result__isset;

class TVRVaccineInfoStoreService_remove_result {
 public:

  TVRVaccineInfoStoreService_remove_result() : success(0) {
  }

  virtual ~TVRVaccineInfoStoreService_remove_result() throw() {}

  bool success;

  _TVRVaccineInfoStoreService_remove_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVRVaccineInfoStoreService_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRVaccineInfoStoreService_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRVaccineInfoStoreService_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRVaccineInfoStoreService_remove_presult__isset {
  _TVRVaccineInfoStoreService_remove_presult__isset() : success(false) {}
  bool success;
} _TVRVaccineInfoStoreService_remove_presult__isset;

class TVRVaccineInfoStoreService_remove_presult {
 public:


  virtual ~TVRVaccineInfoStoreService_remove_presult() throw() {}

  bool* success;

  _TVRVaccineInfoStoreService_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TVRVaccineInfoStoreServiceClient : virtual public TVRVaccineInfoStoreServiceIf {
 public:
  TVRVaccineInfoStoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TVRVaccineInfoStoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::CRDHN::VR::Data::TVID add(const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo);
  void send_add(const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo);
   ::CRDHN::VR::Data::TVID recv_add();
  void get( ::CRDHN::VR::Data::TVaccineInfo& _return, const  ::CRDHN::VR::Data::TVID vaccineId);
  void send_get(const  ::CRDHN::VR::Data::TVID vaccineId);
  void recv_get( ::CRDHN::VR::Data::TVaccineInfo& _return);
  bool update(const  ::CRDHN::VR::Data::TVID vaccineId, const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo);
  void send_update(const  ::CRDHN::VR::Data::TVID vaccineId, const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo);
  bool recv_update();
  bool remove(const  ::CRDHN::VR::Data::TVID vaccineId);
  void send_remove(const  ::CRDHN::VR::Data::TVID vaccineId);
  bool recv_remove();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TVRVaccineInfoStoreServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TVRVaccineInfoStoreServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TVRVaccineInfoStoreServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TVRVaccineInfoStoreServiceProcessor(boost::shared_ptr<TVRVaccineInfoStoreServiceIf> iface) :
    iface_(iface) {
    processMap_["add"] = &TVRVaccineInfoStoreServiceProcessor::process_add;
    processMap_["get"] = &TVRVaccineInfoStoreServiceProcessor::process_get;
    processMap_["update"] = &TVRVaccineInfoStoreServiceProcessor::process_update;
    processMap_["remove"] = &TVRVaccineInfoStoreServiceProcessor::process_remove;
  }

  virtual ~TVRVaccineInfoStoreServiceProcessor() {}
};

class TVRVaccineInfoStoreServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TVRVaccineInfoStoreServiceProcessorFactory(const ::boost::shared_ptr< TVRVaccineInfoStoreServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TVRVaccineInfoStoreServiceIfFactory > handlerFactory_;
};

class TVRVaccineInfoStoreServiceMultiface : virtual public TVRVaccineInfoStoreServiceIf {
 public:
  TVRVaccineInfoStoreServiceMultiface(std::vector<boost::shared_ptr<TVRVaccineInfoStoreServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TVRVaccineInfoStoreServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TVRVaccineInfoStoreServiceIf> > ifaces_;
  TVRVaccineInfoStoreServiceMultiface() {}
  void add(boost::shared_ptr<TVRVaccineInfoStoreServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
   ::CRDHN::VR::Data::TVID add(const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(vaccineInfo);
    }
    return ifaces_[i]->add(vaccineInfo);
  }

  void get( ::CRDHN::VR::Data::TVaccineInfo& _return, const  ::CRDHN::VR::Data::TVID vaccineId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, vaccineId);
    }
    ifaces_[i]->get(_return, vaccineId);
    return;
  }

  bool update(const  ::CRDHN::VR::Data::TVID vaccineId, const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update(vaccineId, vaccineInfo);
    }
    return ifaces_[i]->update(vaccineId, vaccineInfo);
  }

  bool remove(const  ::CRDHN::VR::Data::TVID vaccineId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(vaccineId);
    }
    return ifaces_[i]->remove(vaccineId);
  }

};

}} // namespace

#endif
