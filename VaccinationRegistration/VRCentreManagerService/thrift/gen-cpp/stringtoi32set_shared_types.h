/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef stringtoi32set_shared_TYPES_H
#define stringtoi32set_shared_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace CRDHN { namespace Common { namespace Data { namespace StringToI32Set {

typedef std::string TKey;

typedef int32_t TItem;


class TValue {
 public:

  static const char* ascii_fingerprint; // = "A803C54EAD95E24D90C5E66FB98EA72B";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};

  TValue() {
  }

  virtual ~TValue() throw() {}

  std::vector<TItem>  items;

  void __set_items(const std::vector<TItem> & val) {
    items = val;
  }

  bool operator == (const TValue & rhs) const
  {
    if (!(items == rhs.items))
      return false;
    return true;
  }
  bool operator != (const TValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TValue &a, TValue &b);

}}}} // namespace

#endif
