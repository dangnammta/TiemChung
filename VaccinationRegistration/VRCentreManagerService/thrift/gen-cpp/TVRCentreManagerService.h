/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TVRCentreManagerService_H
#define TVRCentreManagerService_H

#include <thrift/TDispatchProcessor.h>
#include "vrcentremanagerservice_types.h"

namespace CRDHN { namespace VR {

class TVRCentreManagerServiceIf {
 public:
  virtual ~TVRCentreManagerServiceIf() {}
  virtual void createCentre( ::CRDHN::VR::Response::TCMCreateCentreResponse& _return, const  ::CRDHN::VR::Data::TCentreInfo& centreInfo) = 0;
  virtual void getCentreInfo( ::CRDHN::VR::Response::TCMGetCentreInfoResponse& _return, const  ::CRDHN::VR::Data::TCID centreId) = 0;
  virtual void updateCentreInfo( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TCID centreId, const  ::CRDHN::VR::Data::TCentreInfo& centreInfo) = 0;
  virtual void removeCentre( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TCID centreId) = 0;
  virtual void getCentres( ::CRDHN::VR::Response::TCMGetCentresResponse& _return) = 0;
  virtual void addVaccine( ::CRDHN::VR::Response::TCMAddVaccineResponse& _return, const  ::CRDHN::VR::Data::TCID centreId, const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo) = 0;
  virtual void getVaccineInfo( ::CRDHN::VR::Response::TCMGetVaccineInfoResponse& _return, const  ::CRDHN::VR::Data::TVID vaccineId) = 0;
  virtual void updateVaccineInfo( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TVID vaccineId, const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo) = 0;
  virtual void removeVaccine( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TCID centreId, const  ::CRDHN::VR::Data::TVID vaccineId) = 0;
  virtual void getVaccines( ::CRDHN::VR::Response::TCMGetVaccinesResponse& _return, const  ::CRDHN::VR::Data::TCID centreId) = 0;
};

class TVRCentreManagerServiceIfFactory {
 public:
  typedef TVRCentreManagerServiceIf Handler;

  virtual ~TVRCentreManagerServiceIfFactory() {}

  virtual TVRCentreManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TVRCentreManagerServiceIf* /* handler */) = 0;
};

class TVRCentreManagerServiceIfSingletonFactory : virtual public TVRCentreManagerServiceIfFactory {
 public:
  TVRCentreManagerServiceIfSingletonFactory(const boost::shared_ptr<TVRCentreManagerServiceIf>& iface) : iface_(iface) {}
  virtual ~TVRCentreManagerServiceIfSingletonFactory() {}

  virtual TVRCentreManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TVRCentreManagerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TVRCentreManagerServiceIf> iface_;
};

class TVRCentreManagerServiceNull : virtual public TVRCentreManagerServiceIf {
 public:
  virtual ~TVRCentreManagerServiceNull() {}
  void createCentre( ::CRDHN::VR::Response::TCMCreateCentreResponse& /* _return */, const  ::CRDHN::VR::Data::TCentreInfo& /* centreInfo */) {
    return;
  }
  void getCentreInfo( ::CRDHN::VR::Response::TCMGetCentreInfoResponse& /* _return */, const  ::CRDHN::VR::Data::TCID /* centreId */) {
    return;
  }
  void updateCentreInfo( ::CRDHN::VR::Response::TError& /* _return */, const  ::CRDHN::VR::Data::TCID /* centreId */, const  ::CRDHN::VR::Data::TCentreInfo& /* centreInfo */) {
    return;
  }
  void removeCentre( ::CRDHN::VR::Response::TError& /* _return */, const  ::CRDHN::VR::Data::TCID /* centreId */) {
    return;
  }
  void getCentres( ::CRDHN::VR::Response::TCMGetCentresResponse& /* _return */) {
    return;
  }
  void addVaccine( ::CRDHN::VR::Response::TCMAddVaccineResponse& /* _return */, const  ::CRDHN::VR::Data::TCID /* centreId */, const  ::CRDHN::VR::Data::TVaccineInfo& /* vaccineInfo */) {
    return;
  }
  void getVaccineInfo( ::CRDHN::VR::Response::TCMGetVaccineInfoResponse& /* _return */, const  ::CRDHN::VR::Data::TVID /* vaccineId */) {
    return;
  }
  void updateVaccineInfo( ::CRDHN::VR::Response::TError& /* _return */, const  ::CRDHN::VR::Data::TVID /* vaccineId */, const  ::CRDHN::VR::Data::TVaccineInfo& /* vaccineInfo */) {
    return;
  }
  void removeVaccine( ::CRDHN::VR::Response::TError& /* _return */, const  ::CRDHN::VR::Data::TCID /* centreId */, const  ::CRDHN::VR::Data::TVID /* vaccineId */) {
    return;
  }
  void getVaccines( ::CRDHN::VR::Response::TCMGetVaccinesResponse& /* _return */, const  ::CRDHN::VR::Data::TCID /* centreId */) {
    return;
  }
};

typedef struct _TVRCentreManagerService_createCentre_args__isset {
  _TVRCentreManagerService_createCentre_args__isset() : centreInfo(false) {}
  bool centreInfo;
} _TVRCentreManagerService_createCentre_args__isset;

class TVRCentreManagerService_createCentre_args {
 public:

  TVRCentreManagerService_createCentre_args() {
  }

  virtual ~TVRCentreManagerService_createCentre_args() throw() {}

   ::CRDHN::VR::Data::TCentreInfo centreInfo;

  _TVRCentreManagerService_createCentre_args__isset __isset;

  void __set_centreInfo(const  ::CRDHN::VR::Data::TCentreInfo& val) {
    centreInfo = val;
  }

  bool operator == (const TVRCentreManagerService_createCentre_args & rhs) const
  {
    if (!(centreInfo == rhs.centreInfo))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_createCentre_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_createCentre_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRCentreManagerService_createCentre_pargs {
 public:


  virtual ~TVRCentreManagerService_createCentre_pargs() throw() {}

  const  ::CRDHN::VR::Data::TCentreInfo* centreInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_createCentre_result__isset {
  _TVRCentreManagerService_createCentre_result__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_createCentre_result__isset;

class TVRCentreManagerService_createCentre_result {
 public:

  TVRCentreManagerService_createCentre_result() {
  }

  virtual ~TVRCentreManagerService_createCentre_result() throw() {}

   ::CRDHN::VR::Response::TCMCreateCentreResponse success;

  _TVRCentreManagerService_createCentre_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TCMCreateCentreResponse& val) {
    success = val;
  }

  bool operator == (const TVRCentreManagerService_createCentre_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_createCentre_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_createCentre_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_createCentre_presult__isset {
  _TVRCentreManagerService_createCentre_presult__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_createCentre_presult__isset;

class TVRCentreManagerService_createCentre_presult {
 public:


  virtual ~TVRCentreManagerService_createCentre_presult() throw() {}

   ::CRDHN::VR::Response::TCMCreateCentreResponse* success;

  _TVRCentreManagerService_createCentre_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRCentreManagerService_getCentreInfo_args__isset {
  _TVRCentreManagerService_getCentreInfo_args__isset() : centreId(false) {}
  bool centreId;
} _TVRCentreManagerService_getCentreInfo_args__isset;

class TVRCentreManagerService_getCentreInfo_args {
 public:

  TVRCentreManagerService_getCentreInfo_args() : centreId(0) {
  }

  virtual ~TVRCentreManagerService_getCentreInfo_args() throw() {}

   ::CRDHN::VR::Data::TCID centreId;

  _TVRCentreManagerService_getCentreInfo_args__isset __isset;

  void __set_centreId(const  ::CRDHN::VR::Data::TCID val) {
    centreId = val;
  }

  bool operator == (const TVRCentreManagerService_getCentreInfo_args & rhs) const
  {
    if (!(centreId == rhs.centreId))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_getCentreInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_getCentreInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRCentreManagerService_getCentreInfo_pargs {
 public:


  virtual ~TVRCentreManagerService_getCentreInfo_pargs() throw() {}

  const  ::CRDHN::VR::Data::TCID* centreId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_getCentreInfo_result__isset {
  _TVRCentreManagerService_getCentreInfo_result__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_getCentreInfo_result__isset;

class TVRCentreManagerService_getCentreInfo_result {
 public:

  TVRCentreManagerService_getCentreInfo_result() {
  }

  virtual ~TVRCentreManagerService_getCentreInfo_result() throw() {}

   ::CRDHN::VR::Response::TCMGetCentreInfoResponse success;

  _TVRCentreManagerService_getCentreInfo_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TCMGetCentreInfoResponse& val) {
    success = val;
  }

  bool operator == (const TVRCentreManagerService_getCentreInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_getCentreInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_getCentreInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_getCentreInfo_presult__isset {
  _TVRCentreManagerService_getCentreInfo_presult__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_getCentreInfo_presult__isset;

class TVRCentreManagerService_getCentreInfo_presult {
 public:


  virtual ~TVRCentreManagerService_getCentreInfo_presult() throw() {}

   ::CRDHN::VR::Response::TCMGetCentreInfoResponse* success;

  _TVRCentreManagerService_getCentreInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRCentreManagerService_updateCentreInfo_args__isset {
  _TVRCentreManagerService_updateCentreInfo_args__isset() : centreId(false), centreInfo(false) {}
  bool centreId;
  bool centreInfo;
} _TVRCentreManagerService_updateCentreInfo_args__isset;

class TVRCentreManagerService_updateCentreInfo_args {
 public:

  TVRCentreManagerService_updateCentreInfo_args() : centreId(0) {
  }

  virtual ~TVRCentreManagerService_updateCentreInfo_args() throw() {}

   ::CRDHN::VR::Data::TCID centreId;
   ::CRDHN::VR::Data::TCentreInfo centreInfo;

  _TVRCentreManagerService_updateCentreInfo_args__isset __isset;

  void __set_centreId(const  ::CRDHN::VR::Data::TCID val) {
    centreId = val;
  }

  void __set_centreInfo(const  ::CRDHN::VR::Data::TCentreInfo& val) {
    centreInfo = val;
  }

  bool operator == (const TVRCentreManagerService_updateCentreInfo_args & rhs) const
  {
    if (!(centreId == rhs.centreId))
      return false;
    if (!(centreInfo == rhs.centreInfo))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_updateCentreInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_updateCentreInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRCentreManagerService_updateCentreInfo_pargs {
 public:


  virtual ~TVRCentreManagerService_updateCentreInfo_pargs() throw() {}

  const  ::CRDHN::VR::Data::TCID* centreId;
  const  ::CRDHN::VR::Data::TCentreInfo* centreInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_updateCentreInfo_result__isset {
  _TVRCentreManagerService_updateCentreInfo_result__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_updateCentreInfo_result__isset;

class TVRCentreManagerService_updateCentreInfo_result {
 public:

  TVRCentreManagerService_updateCentreInfo_result() {
  }

  virtual ~TVRCentreManagerService_updateCentreInfo_result() throw() {}

   ::CRDHN::VR::Response::TError success;

  _TVRCentreManagerService_updateCentreInfo_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TError& val) {
    success = val;
  }

  bool operator == (const TVRCentreManagerService_updateCentreInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_updateCentreInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_updateCentreInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_updateCentreInfo_presult__isset {
  _TVRCentreManagerService_updateCentreInfo_presult__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_updateCentreInfo_presult__isset;

class TVRCentreManagerService_updateCentreInfo_presult {
 public:


  virtual ~TVRCentreManagerService_updateCentreInfo_presult() throw() {}

   ::CRDHN::VR::Response::TError* success;

  _TVRCentreManagerService_updateCentreInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRCentreManagerService_removeCentre_args__isset {
  _TVRCentreManagerService_removeCentre_args__isset() : centreId(false) {}
  bool centreId;
} _TVRCentreManagerService_removeCentre_args__isset;

class TVRCentreManagerService_removeCentre_args {
 public:

  TVRCentreManagerService_removeCentre_args() : centreId(0) {
  }

  virtual ~TVRCentreManagerService_removeCentre_args() throw() {}

   ::CRDHN::VR::Data::TCID centreId;

  _TVRCentreManagerService_removeCentre_args__isset __isset;

  void __set_centreId(const  ::CRDHN::VR::Data::TCID val) {
    centreId = val;
  }

  bool operator == (const TVRCentreManagerService_removeCentre_args & rhs) const
  {
    if (!(centreId == rhs.centreId))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_removeCentre_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_removeCentre_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRCentreManagerService_removeCentre_pargs {
 public:


  virtual ~TVRCentreManagerService_removeCentre_pargs() throw() {}

  const  ::CRDHN::VR::Data::TCID* centreId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_removeCentre_result__isset {
  _TVRCentreManagerService_removeCentre_result__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_removeCentre_result__isset;

class TVRCentreManagerService_removeCentre_result {
 public:

  TVRCentreManagerService_removeCentre_result() {
  }

  virtual ~TVRCentreManagerService_removeCentre_result() throw() {}

   ::CRDHN::VR::Response::TError success;

  _TVRCentreManagerService_removeCentre_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TError& val) {
    success = val;
  }

  bool operator == (const TVRCentreManagerService_removeCentre_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_removeCentre_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_removeCentre_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_removeCentre_presult__isset {
  _TVRCentreManagerService_removeCentre_presult__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_removeCentre_presult__isset;

class TVRCentreManagerService_removeCentre_presult {
 public:


  virtual ~TVRCentreManagerService_removeCentre_presult() throw() {}

   ::CRDHN::VR::Response::TError* success;

  _TVRCentreManagerService_removeCentre_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TVRCentreManagerService_getCentres_args {
 public:

  TVRCentreManagerService_getCentres_args() {
  }

  virtual ~TVRCentreManagerService_getCentres_args() throw() {}


  bool operator == (const TVRCentreManagerService_getCentres_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TVRCentreManagerService_getCentres_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_getCentres_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRCentreManagerService_getCentres_pargs {
 public:


  virtual ~TVRCentreManagerService_getCentres_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_getCentres_result__isset {
  _TVRCentreManagerService_getCentres_result__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_getCentres_result__isset;

class TVRCentreManagerService_getCentres_result {
 public:

  TVRCentreManagerService_getCentres_result() {
  }

  virtual ~TVRCentreManagerService_getCentres_result() throw() {}

   ::CRDHN::VR::Response::TCMGetCentresResponse success;

  _TVRCentreManagerService_getCentres_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TCMGetCentresResponse& val) {
    success = val;
  }

  bool operator == (const TVRCentreManagerService_getCentres_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_getCentres_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_getCentres_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_getCentres_presult__isset {
  _TVRCentreManagerService_getCentres_presult__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_getCentres_presult__isset;

class TVRCentreManagerService_getCentres_presult {
 public:


  virtual ~TVRCentreManagerService_getCentres_presult() throw() {}

   ::CRDHN::VR::Response::TCMGetCentresResponse* success;

  _TVRCentreManagerService_getCentres_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRCentreManagerService_addVaccine_args__isset {
  _TVRCentreManagerService_addVaccine_args__isset() : centreId(false), vaccineInfo(false) {}
  bool centreId;
  bool vaccineInfo;
} _TVRCentreManagerService_addVaccine_args__isset;

class TVRCentreManagerService_addVaccine_args {
 public:

  TVRCentreManagerService_addVaccine_args() : centreId(0) {
  }

  virtual ~TVRCentreManagerService_addVaccine_args() throw() {}

   ::CRDHN::VR::Data::TCID centreId;
   ::CRDHN::VR::Data::TVaccineInfo vaccineInfo;

  _TVRCentreManagerService_addVaccine_args__isset __isset;

  void __set_centreId(const  ::CRDHN::VR::Data::TCID val) {
    centreId = val;
  }

  void __set_vaccineInfo(const  ::CRDHN::VR::Data::TVaccineInfo& val) {
    vaccineInfo = val;
  }

  bool operator == (const TVRCentreManagerService_addVaccine_args & rhs) const
  {
    if (!(centreId == rhs.centreId))
      return false;
    if (!(vaccineInfo == rhs.vaccineInfo))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_addVaccine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_addVaccine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRCentreManagerService_addVaccine_pargs {
 public:


  virtual ~TVRCentreManagerService_addVaccine_pargs() throw() {}

  const  ::CRDHN::VR::Data::TCID* centreId;
  const  ::CRDHN::VR::Data::TVaccineInfo* vaccineInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_addVaccine_result__isset {
  _TVRCentreManagerService_addVaccine_result__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_addVaccine_result__isset;

class TVRCentreManagerService_addVaccine_result {
 public:

  TVRCentreManagerService_addVaccine_result() {
  }

  virtual ~TVRCentreManagerService_addVaccine_result() throw() {}

   ::CRDHN::VR::Response::TCMAddVaccineResponse success;

  _TVRCentreManagerService_addVaccine_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TCMAddVaccineResponse& val) {
    success = val;
  }

  bool operator == (const TVRCentreManagerService_addVaccine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_addVaccine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_addVaccine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_addVaccine_presult__isset {
  _TVRCentreManagerService_addVaccine_presult__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_addVaccine_presult__isset;

class TVRCentreManagerService_addVaccine_presult {
 public:


  virtual ~TVRCentreManagerService_addVaccine_presult() throw() {}

   ::CRDHN::VR::Response::TCMAddVaccineResponse* success;

  _TVRCentreManagerService_addVaccine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRCentreManagerService_getVaccineInfo_args__isset {
  _TVRCentreManagerService_getVaccineInfo_args__isset() : vaccineId(false) {}
  bool vaccineId;
} _TVRCentreManagerService_getVaccineInfo_args__isset;

class TVRCentreManagerService_getVaccineInfo_args {
 public:

  TVRCentreManagerService_getVaccineInfo_args() : vaccineId(0) {
  }

  virtual ~TVRCentreManagerService_getVaccineInfo_args() throw() {}

   ::CRDHN::VR::Data::TVID vaccineId;

  _TVRCentreManagerService_getVaccineInfo_args__isset __isset;

  void __set_vaccineId(const  ::CRDHN::VR::Data::TVID val) {
    vaccineId = val;
  }

  bool operator == (const TVRCentreManagerService_getVaccineInfo_args & rhs) const
  {
    if (!(vaccineId == rhs.vaccineId))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_getVaccineInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_getVaccineInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRCentreManagerService_getVaccineInfo_pargs {
 public:


  virtual ~TVRCentreManagerService_getVaccineInfo_pargs() throw() {}

  const  ::CRDHN::VR::Data::TVID* vaccineId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_getVaccineInfo_result__isset {
  _TVRCentreManagerService_getVaccineInfo_result__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_getVaccineInfo_result__isset;

class TVRCentreManagerService_getVaccineInfo_result {
 public:

  TVRCentreManagerService_getVaccineInfo_result() {
  }

  virtual ~TVRCentreManagerService_getVaccineInfo_result() throw() {}

   ::CRDHN::VR::Response::TCMGetVaccineInfoResponse success;

  _TVRCentreManagerService_getVaccineInfo_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TCMGetVaccineInfoResponse& val) {
    success = val;
  }

  bool operator == (const TVRCentreManagerService_getVaccineInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_getVaccineInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_getVaccineInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_getVaccineInfo_presult__isset {
  _TVRCentreManagerService_getVaccineInfo_presult__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_getVaccineInfo_presult__isset;

class TVRCentreManagerService_getVaccineInfo_presult {
 public:


  virtual ~TVRCentreManagerService_getVaccineInfo_presult() throw() {}

   ::CRDHN::VR::Response::TCMGetVaccineInfoResponse* success;

  _TVRCentreManagerService_getVaccineInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRCentreManagerService_updateVaccineInfo_args__isset {
  _TVRCentreManagerService_updateVaccineInfo_args__isset() : vaccineId(false), vaccineInfo(false) {}
  bool vaccineId;
  bool vaccineInfo;
} _TVRCentreManagerService_updateVaccineInfo_args__isset;

class TVRCentreManagerService_updateVaccineInfo_args {
 public:

  TVRCentreManagerService_updateVaccineInfo_args() : vaccineId(0) {
  }

  virtual ~TVRCentreManagerService_updateVaccineInfo_args() throw() {}

   ::CRDHN::VR::Data::TVID vaccineId;
   ::CRDHN::VR::Data::TVaccineInfo vaccineInfo;

  _TVRCentreManagerService_updateVaccineInfo_args__isset __isset;

  void __set_vaccineId(const  ::CRDHN::VR::Data::TVID val) {
    vaccineId = val;
  }

  void __set_vaccineInfo(const  ::CRDHN::VR::Data::TVaccineInfo& val) {
    vaccineInfo = val;
  }

  bool operator == (const TVRCentreManagerService_updateVaccineInfo_args & rhs) const
  {
    if (!(vaccineId == rhs.vaccineId))
      return false;
    if (!(vaccineInfo == rhs.vaccineInfo))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_updateVaccineInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_updateVaccineInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRCentreManagerService_updateVaccineInfo_pargs {
 public:


  virtual ~TVRCentreManagerService_updateVaccineInfo_pargs() throw() {}

  const  ::CRDHN::VR::Data::TVID* vaccineId;
  const  ::CRDHN::VR::Data::TVaccineInfo* vaccineInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_updateVaccineInfo_result__isset {
  _TVRCentreManagerService_updateVaccineInfo_result__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_updateVaccineInfo_result__isset;

class TVRCentreManagerService_updateVaccineInfo_result {
 public:

  TVRCentreManagerService_updateVaccineInfo_result() {
  }

  virtual ~TVRCentreManagerService_updateVaccineInfo_result() throw() {}

   ::CRDHN::VR::Response::TError success;

  _TVRCentreManagerService_updateVaccineInfo_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TError& val) {
    success = val;
  }

  bool operator == (const TVRCentreManagerService_updateVaccineInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_updateVaccineInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_updateVaccineInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_updateVaccineInfo_presult__isset {
  _TVRCentreManagerService_updateVaccineInfo_presult__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_updateVaccineInfo_presult__isset;

class TVRCentreManagerService_updateVaccineInfo_presult {
 public:


  virtual ~TVRCentreManagerService_updateVaccineInfo_presult() throw() {}

   ::CRDHN::VR::Response::TError* success;

  _TVRCentreManagerService_updateVaccineInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRCentreManagerService_removeVaccine_args__isset {
  _TVRCentreManagerService_removeVaccine_args__isset() : centreId(false), vaccineId(false) {}
  bool centreId;
  bool vaccineId;
} _TVRCentreManagerService_removeVaccine_args__isset;

class TVRCentreManagerService_removeVaccine_args {
 public:

  TVRCentreManagerService_removeVaccine_args() : centreId(0), vaccineId(0) {
  }

  virtual ~TVRCentreManagerService_removeVaccine_args() throw() {}

   ::CRDHN::VR::Data::TCID centreId;
   ::CRDHN::VR::Data::TVID vaccineId;

  _TVRCentreManagerService_removeVaccine_args__isset __isset;

  void __set_centreId(const  ::CRDHN::VR::Data::TCID val) {
    centreId = val;
  }

  void __set_vaccineId(const  ::CRDHN::VR::Data::TVID val) {
    vaccineId = val;
  }

  bool operator == (const TVRCentreManagerService_removeVaccine_args & rhs) const
  {
    if (!(centreId == rhs.centreId))
      return false;
    if (!(vaccineId == rhs.vaccineId))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_removeVaccine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_removeVaccine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRCentreManagerService_removeVaccine_pargs {
 public:


  virtual ~TVRCentreManagerService_removeVaccine_pargs() throw() {}

  const  ::CRDHN::VR::Data::TCID* centreId;
  const  ::CRDHN::VR::Data::TVID* vaccineId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_removeVaccine_result__isset {
  _TVRCentreManagerService_removeVaccine_result__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_removeVaccine_result__isset;

class TVRCentreManagerService_removeVaccine_result {
 public:

  TVRCentreManagerService_removeVaccine_result() {
  }

  virtual ~TVRCentreManagerService_removeVaccine_result() throw() {}

   ::CRDHN::VR::Response::TError success;

  _TVRCentreManagerService_removeVaccine_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TError& val) {
    success = val;
  }

  bool operator == (const TVRCentreManagerService_removeVaccine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_removeVaccine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_removeVaccine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_removeVaccine_presult__isset {
  _TVRCentreManagerService_removeVaccine_presult__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_removeVaccine_presult__isset;

class TVRCentreManagerService_removeVaccine_presult {
 public:


  virtual ~TVRCentreManagerService_removeVaccine_presult() throw() {}

   ::CRDHN::VR::Response::TError* success;

  _TVRCentreManagerService_removeVaccine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRCentreManagerService_getVaccines_args__isset {
  _TVRCentreManagerService_getVaccines_args__isset() : centreId(false) {}
  bool centreId;
} _TVRCentreManagerService_getVaccines_args__isset;

class TVRCentreManagerService_getVaccines_args {
 public:

  TVRCentreManagerService_getVaccines_args() : centreId(0) {
  }

  virtual ~TVRCentreManagerService_getVaccines_args() throw() {}

   ::CRDHN::VR::Data::TCID centreId;

  _TVRCentreManagerService_getVaccines_args__isset __isset;

  void __set_centreId(const  ::CRDHN::VR::Data::TCID val) {
    centreId = val;
  }

  bool operator == (const TVRCentreManagerService_getVaccines_args & rhs) const
  {
    if (!(centreId == rhs.centreId))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_getVaccines_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_getVaccines_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRCentreManagerService_getVaccines_pargs {
 public:


  virtual ~TVRCentreManagerService_getVaccines_pargs() throw() {}

  const  ::CRDHN::VR::Data::TCID* centreId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_getVaccines_result__isset {
  _TVRCentreManagerService_getVaccines_result__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_getVaccines_result__isset;

class TVRCentreManagerService_getVaccines_result {
 public:

  TVRCentreManagerService_getVaccines_result() {
  }

  virtual ~TVRCentreManagerService_getVaccines_result() throw() {}

   ::CRDHN::VR::Response::TCMGetVaccinesResponse success;

  _TVRCentreManagerService_getVaccines_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TCMGetVaccinesResponse& val) {
    success = val;
  }

  bool operator == (const TVRCentreManagerService_getVaccines_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRCentreManagerService_getVaccines_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRCentreManagerService_getVaccines_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRCentreManagerService_getVaccines_presult__isset {
  _TVRCentreManagerService_getVaccines_presult__isset() : success(false) {}
  bool success;
} _TVRCentreManagerService_getVaccines_presult__isset;

class TVRCentreManagerService_getVaccines_presult {
 public:


  virtual ~TVRCentreManagerService_getVaccines_presult() throw() {}

   ::CRDHN::VR::Response::TCMGetVaccinesResponse* success;

  _TVRCentreManagerService_getVaccines_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TVRCentreManagerServiceClient : virtual public TVRCentreManagerServiceIf {
 public:
  TVRCentreManagerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TVRCentreManagerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createCentre( ::CRDHN::VR::Response::TCMCreateCentreResponse& _return, const  ::CRDHN::VR::Data::TCentreInfo& centreInfo);
  void send_createCentre(const  ::CRDHN::VR::Data::TCentreInfo& centreInfo);
  void recv_createCentre( ::CRDHN::VR::Response::TCMCreateCentreResponse& _return);
  void getCentreInfo( ::CRDHN::VR::Response::TCMGetCentreInfoResponse& _return, const  ::CRDHN::VR::Data::TCID centreId);
  void send_getCentreInfo(const  ::CRDHN::VR::Data::TCID centreId);
  void recv_getCentreInfo( ::CRDHN::VR::Response::TCMGetCentreInfoResponse& _return);
  void updateCentreInfo( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TCID centreId, const  ::CRDHN::VR::Data::TCentreInfo& centreInfo);
  void send_updateCentreInfo(const  ::CRDHN::VR::Data::TCID centreId, const  ::CRDHN::VR::Data::TCentreInfo& centreInfo);
  void recv_updateCentreInfo( ::CRDHN::VR::Response::TError& _return);
  void removeCentre( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TCID centreId);
  void send_removeCentre(const  ::CRDHN::VR::Data::TCID centreId);
  void recv_removeCentre( ::CRDHN::VR::Response::TError& _return);
  void getCentres( ::CRDHN::VR::Response::TCMGetCentresResponse& _return);
  void send_getCentres();
  void recv_getCentres( ::CRDHN::VR::Response::TCMGetCentresResponse& _return);
  void addVaccine( ::CRDHN::VR::Response::TCMAddVaccineResponse& _return, const  ::CRDHN::VR::Data::TCID centreId, const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo);
  void send_addVaccine(const  ::CRDHN::VR::Data::TCID centreId, const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo);
  void recv_addVaccine( ::CRDHN::VR::Response::TCMAddVaccineResponse& _return);
  void getVaccineInfo( ::CRDHN::VR::Response::TCMGetVaccineInfoResponse& _return, const  ::CRDHN::VR::Data::TVID vaccineId);
  void send_getVaccineInfo(const  ::CRDHN::VR::Data::TVID vaccineId);
  void recv_getVaccineInfo( ::CRDHN::VR::Response::TCMGetVaccineInfoResponse& _return);
  void updateVaccineInfo( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TVID vaccineId, const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo);
  void send_updateVaccineInfo(const  ::CRDHN::VR::Data::TVID vaccineId, const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo);
  void recv_updateVaccineInfo( ::CRDHN::VR::Response::TError& _return);
  void removeVaccine( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TCID centreId, const  ::CRDHN::VR::Data::TVID vaccineId);
  void send_removeVaccine(const  ::CRDHN::VR::Data::TCID centreId, const  ::CRDHN::VR::Data::TVID vaccineId);
  void recv_removeVaccine( ::CRDHN::VR::Response::TError& _return);
  void getVaccines( ::CRDHN::VR::Response::TCMGetVaccinesResponse& _return, const  ::CRDHN::VR::Data::TCID centreId);
  void send_getVaccines(const  ::CRDHN::VR::Data::TCID centreId);
  void recv_getVaccines( ::CRDHN::VR::Response::TCMGetVaccinesResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TVRCentreManagerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TVRCentreManagerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TVRCentreManagerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createCentre(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCentreInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateCentreInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeCentre(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCentres(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addVaccine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getVaccineInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateVaccineInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeVaccine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getVaccines(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TVRCentreManagerServiceProcessor(boost::shared_ptr<TVRCentreManagerServiceIf> iface) :
    iface_(iface) {
    processMap_["createCentre"] = &TVRCentreManagerServiceProcessor::process_createCentre;
    processMap_["getCentreInfo"] = &TVRCentreManagerServiceProcessor::process_getCentreInfo;
    processMap_["updateCentreInfo"] = &TVRCentreManagerServiceProcessor::process_updateCentreInfo;
    processMap_["removeCentre"] = &TVRCentreManagerServiceProcessor::process_removeCentre;
    processMap_["getCentres"] = &TVRCentreManagerServiceProcessor::process_getCentres;
    processMap_["addVaccine"] = &TVRCentreManagerServiceProcessor::process_addVaccine;
    processMap_["getVaccineInfo"] = &TVRCentreManagerServiceProcessor::process_getVaccineInfo;
    processMap_["updateVaccineInfo"] = &TVRCentreManagerServiceProcessor::process_updateVaccineInfo;
    processMap_["removeVaccine"] = &TVRCentreManagerServiceProcessor::process_removeVaccine;
    processMap_["getVaccines"] = &TVRCentreManagerServiceProcessor::process_getVaccines;
  }

  virtual ~TVRCentreManagerServiceProcessor() {}
};

class TVRCentreManagerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TVRCentreManagerServiceProcessorFactory(const ::boost::shared_ptr< TVRCentreManagerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TVRCentreManagerServiceIfFactory > handlerFactory_;
};

class TVRCentreManagerServiceMultiface : virtual public TVRCentreManagerServiceIf {
 public:
  TVRCentreManagerServiceMultiface(std::vector<boost::shared_ptr<TVRCentreManagerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TVRCentreManagerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TVRCentreManagerServiceIf> > ifaces_;
  TVRCentreManagerServiceMultiface() {}
  void add(boost::shared_ptr<TVRCentreManagerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void createCentre( ::CRDHN::VR::Response::TCMCreateCentreResponse& _return, const  ::CRDHN::VR::Data::TCentreInfo& centreInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createCentre(_return, centreInfo);
    }
    ifaces_[i]->createCentre(_return, centreInfo);
    return;
  }

  void getCentreInfo( ::CRDHN::VR::Response::TCMGetCentreInfoResponse& _return, const  ::CRDHN::VR::Data::TCID centreId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCentreInfo(_return, centreId);
    }
    ifaces_[i]->getCentreInfo(_return, centreId);
    return;
  }

  void updateCentreInfo( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TCID centreId, const  ::CRDHN::VR::Data::TCentreInfo& centreInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateCentreInfo(_return, centreId, centreInfo);
    }
    ifaces_[i]->updateCentreInfo(_return, centreId, centreInfo);
    return;
  }

  void removeCentre( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TCID centreId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeCentre(_return, centreId);
    }
    ifaces_[i]->removeCentre(_return, centreId);
    return;
  }

  void getCentres( ::CRDHN::VR::Response::TCMGetCentresResponse& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCentres(_return);
    }
    ifaces_[i]->getCentres(_return);
    return;
  }

  void addVaccine( ::CRDHN::VR::Response::TCMAddVaccineResponse& _return, const  ::CRDHN::VR::Data::TCID centreId, const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addVaccine(_return, centreId, vaccineInfo);
    }
    ifaces_[i]->addVaccine(_return, centreId, vaccineInfo);
    return;
  }

  void getVaccineInfo( ::CRDHN::VR::Response::TCMGetVaccineInfoResponse& _return, const  ::CRDHN::VR::Data::TVID vaccineId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getVaccineInfo(_return, vaccineId);
    }
    ifaces_[i]->getVaccineInfo(_return, vaccineId);
    return;
  }

  void updateVaccineInfo( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TVID vaccineId, const  ::CRDHN::VR::Data::TVaccineInfo& vaccineInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateVaccineInfo(_return, vaccineId, vaccineInfo);
    }
    ifaces_[i]->updateVaccineInfo(_return, vaccineId, vaccineInfo);
    return;
  }

  void removeVaccine( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TCID centreId, const  ::CRDHN::VR::Data::TVID vaccineId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeVaccine(_return, centreId, vaccineId);
    }
    ifaces_[i]->removeVaccine(_return, centreId, vaccineId);
    return;
  }

  void getVaccines( ::CRDHN::VR::Response::TCMGetVaccinesResponse& _return, const  ::CRDHN::VR::Data::TCID centreId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getVaccines(_return, centreId);
    }
    ifaces_[i]->getVaccines(_return, centreId);
    return;
  }

};

}} // namespace

#endif
