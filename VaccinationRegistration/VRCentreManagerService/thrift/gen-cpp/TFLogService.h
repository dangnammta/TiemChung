/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TFLogService_H
#define TFLogService_H

#include <thrift/TDispatchProcessor.h>
#include "flogservice_types.h"

namespace CRDHN { namespace Common { namespace Log {

class TFLogServiceIf {
 public:
  virtual ~TFLogServiceIf() {}
  virtual void printLog(const std::string& category, const std::string& message) = 0;
  virtual void printLog_ow(const std::string& category, const std::string& message) = 0;
};

class TFLogServiceIfFactory {
 public:
  typedef TFLogServiceIf Handler;

  virtual ~TFLogServiceIfFactory() {}

  virtual TFLogServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TFLogServiceIf* /* handler */) = 0;
};

class TFLogServiceIfSingletonFactory : virtual public TFLogServiceIfFactory {
 public:
  TFLogServiceIfSingletonFactory(const boost::shared_ptr<TFLogServiceIf>& iface) : iface_(iface) {}
  virtual ~TFLogServiceIfSingletonFactory() {}

  virtual TFLogServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TFLogServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TFLogServiceIf> iface_;
};

class TFLogServiceNull : virtual public TFLogServiceIf {
 public:
  virtual ~TFLogServiceNull() {}
  void printLog(const std::string& /* category */, const std::string& /* message */) {
    return;
  }
  void printLog_ow(const std::string& /* category */, const std::string& /* message */) {
    return;
  }
};

typedef struct _TFLogService_printLog_args__isset {
  _TFLogService_printLog_args__isset() : category(false), message(false) {}
  bool category;
  bool message;
} _TFLogService_printLog_args__isset;

class TFLogService_printLog_args {
 public:

  TFLogService_printLog_args() : category(), message() {
  }

  virtual ~TFLogService_printLog_args() throw() {}

  std::string category;
  std::string message;

  _TFLogService_printLog_args__isset __isset;

  void __set_category(const std::string& val) {
    category = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const TFLogService_printLog_args & rhs) const
  {
    if (!(category == rhs.category))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TFLogService_printLog_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFLogService_printLog_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TFLogService_printLog_pargs {
 public:


  virtual ~TFLogService_printLog_pargs() throw() {}

  const std::string* category;
  const std::string* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TFLogService_printLog_result {
 public:

  TFLogService_printLog_result() {
  }

  virtual ~TFLogService_printLog_result() throw() {}


  bool operator == (const TFLogService_printLog_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TFLogService_printLog_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFLogService_printLog_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TFLogService_printLog_presult {
 public:


  virtual ~TFLogService_printLog_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TFLogService_printLog_ow_args__isset {
  _TFLogService_printLog_ow_args__isset() : category(false), message(false) {}
  bool category;
  bool message;
} _TFLogService_printLog_ow_args__isset;

class TFLogService_printLog_ow_args {
 public:

  TFLogService_printLog_ow_args() : category(), message() {
  }

  virtual ~TFLogService_printLog_ow_args() throw() {}

  std::string category;
  std::string message;

  _TFLogService_printLog_ow_args__isset __isset;

  void __set_category(const std::string& val) {
    category = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const TFLogService_printLog_ow_args & rhs) const
  {
    if (!(category == rhs.category))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TFLogService_printLog_ow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFLogService_printLog_ow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TFLogService_printLog_ow_pargs {
 public:


  virtual ~TFLogService_printLog_ow_pargs() throw() {}

  const std::string* category;
  const std::string* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class TFLogServiceClient : virtual public TFLogServiceIf {
 public:
  TFLogServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TFLogServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void printLog(const std::string& category, const std::string& message);
  void send_printLog(const std::string& category, const std::string& message);
  void recv_printLog();
  void printLog_ow(const std::string& category, const std::string& message);
  void send_printLog_ow(const std::string& category, const std::string& message);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TFLogServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TFLogServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TFLogServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_printLog(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_printLog_ow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TFLogServiceProcessor(boost::shared_ptr<TFLogServiceIf> iface) :
    iface_(iface) {
    processMap_["printLog"] = &TFLogServiceProcessor::process_printLog;
    processMap_["printLog_ow"] = &TFLogServiceProcessor::process_printLog_ow;
  }

  virtual ~TFLogServiceProcessor() {}
};

class TFLogServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TFLogServiceProcessorFactory(const ::boost::shared_ptr< TFLogServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TFLogServiceIfFactory > handlerFactory_;
};

class TFLogServiceMultiface : virtual public TFLogServiceIf {
 public:
  TFLogServiceMultiface(std::vector<boost::shared_ptr<TFLogServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TFLogServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TFLogServiceIf> > ifaces_;
  TFLogServiceMultiface() {}
  void add(boost::shared_ptr<TFLogServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void printLog(const std::string& category, const std::string& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->printLog(category, message);
    }
    ifaces_[i]->printLog(category, message);
  }

  void printLog_ow(const std::string& category, const std::string& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->printLog_ow(category, message);
    }
    ifaces_[i]->printLog_ow(category, message);
  }

};

}}} // namespace

#endif
