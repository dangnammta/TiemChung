/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TVRRegistrationCodesStoreService_H
#define TVRRegistrationCodesStoreService_H

#include <thrift/TDispatchProcessor.h>
#include "vrregistrationcodesstoreservice_types.h"

namespace CRDHN { namespace VR {

class TVRRegistrationCodesStoreServiceIf {
 public:
  virtual ~TVRRegistrationCodesStoreServiceIf() {}
  virtual bool add(const  ::CRDHN::VR::Data::TEID eventId, const std::string& registrationCode, const  ::CRDHN::VR::Data::TRID registrationId) = 0;
  virtual bool remove(const  ::CRDHN::VR::Data::TEID eventId, const std::string& registrationCode, const  ::CRDHN::VR::Data::TRID registrationId) = 0;
  virtual  ::CRDHN::VR::Data::TRID getRegistrationId(const  ::CRDHN::VR::Data::TEID eventId, const std::string& registrationCode) = 0;
  virtual void getRegistrationCodes( ::CRDHN::VR::Data::TRegistrationCodes& _return, const  ::CRDHN::VR::Data::TEID eventId) = 0;
  virtual bool removeRegistrationCodes(const  ::CRDHN::VR::Data::TEID eventId) = 0;
};

class TVRRegistrationCodesStoreServiceIfFactory {
 public:
  typedef TVRRegistrationCodesStoreServiceIf Handler;

  virtual ~TVRRegistrationCodesStoreServiceIfFactory() {}

  virtual TVRRegistrationCodesStoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TVRRegistrationCodesStoreServiceIf* /* handler */) = 0;
};

class TVRRegistrationCodesStoreServiceIfSingletonFactory : virtual public TVRRegistrationCodesStoreServiceIfFactory {
 public:
  TVRRegistrationCodesStoreServiceIfSingletonFactory(const boost::shared_ptr<TVRRegistrationCodesStoreServiceIf>& iface) : iface_(iface) {}
  virtual ~TVRRegistrationCodesStoreServiceIfSingletonFactory() {}

  virtual TVRRegistrationCodesStoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TVRRegistrationCodesStoreServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TVRRegistrationCodesStoreServiceIf> iface_;
};

class TVRRegistrationCodesStoreServiceNull : virtual public TVRRegistrationCodesStoreServiceIf {
 public:
  virtual ~TVRRegistrationCodesStoreServiceNull() {}
  bool add(const  ::CRDHN::VR::Data::TEID /* eventId */, const std::string& /* registrationCode */, const  ::CRDHN::VR::Data::TRID /* registrationId */) {
    bool _return = false;
    return _return;
  }
  bool remove(const  ::CRDHN::VR::Data::TEID /* eventId */, const std::string& /* registrationCode */, const  ::CRDHN::VR::Data::TRID /* registrationId */) {
    bool _return = false;
    return _return;
  }
   ::CRDHN::VR::Data::TRID getRegistrationId(const  ::CRDHN::VR::Data::TEID /* eventId */, const std::string& /* registrationCode */) {
     ::CRDHN::VR::Data::TRID _return = 0;
    return _return;
  }
  void getRegistrationCodes( ::CRDHN::VR::Data::TRegistrationCodes& /* _return */, const  ::CRDHN::VR::Data::TEID /* eventId */) {
    return;
  }
  bool removeRegistrationCodes(const  ::CRDHN::VR::Data::TEID /* eventId */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _TVRRegistrationCodesStoreService_add_args__isset {
  _TVRRegistrationCodesStoreService_add_args__isset() : eventId(false), registrationCode(false), registrationId(false) {}
  bool eventId;
  bool registrationCode;
  bool registrationId;
} _TVRRegistrationCodesStoreService_add_args__isset;

class TVRRegistrationCodesStoreService_add_args {
 public:

  TVRRegistrationCodesStoreService_add_args() : eventId(0), registrationCode(), registrationId(0) {
  }

  virtual ~TVRRegistrationCodesStoreService_add_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;
  std::string registrationCode;
   ::CRDHN::VR::Data::TRID registrationId;

  _TVRRegistrationCodesStoreService_add_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  void __set_registrationCode(const std::string& val) {
    registrationCode = val;
  }

  void __set_registrationId(const  ::CRDHN::VR::Data::TRID val) {
    registrationId = val;
  }

  bool operator == (const TVRRegistrationCodesStoreService_add_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    if (!(registrationCode == rhs.registrationCode))
      return false;
    if (!(registrationId == rhs.registrationId))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationCodesStoreService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationCodesStoreService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRRegistrationCodesStoreService_add_pargs {
 public:


  virtual ~TVRRegistrationCodesStoreService_add_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;
  const std::string* registrationCode;
  const  ::CRDHN::VR::Data::TRID* registrationId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationCodesStoreService_add_result__isset {
  _TVRRegistrationCodesStoreService_add_result__isset() : success(false) {}
  bool success;
} _TVRRegistrationCodesStoreService_add_result__isset;

class TVRRegistrationCodesStoreService_add_result {
 public:

  TVRRegistrationCodesStoreService_add_result() : success(0) {
  }

  virtual ~TVRRegistrationCodesStoreService_add_result() throw() {}

  bool success;

  _TVRRegistrationCodesStoreService_add_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVRRegistrationCodesStoreService_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationCodesStoreService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationCodesStoreService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationCodesStoreService_add_presult__isset {
  _TVRRegistrationCodesStoreService_add_presult__isset() : success(false) {}
  bool success;
} _TVRRegistrationCodesStoreService_add_presult__isset;

class TVRRegistrationCodesStoreService_add_presult {
 public:


  virtual ~TVRRegistrationCodesStoreService_add_presult() throw() {}

  bool* success;

  _TVRRegistrationCodesStoreService_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRRegistrationCodesStoreService_remove_args__isset {
  _TVRRegistrationCodesStoreService_remove_args__isset() : eventId(false), registrationCode(false), registrationId(false) {}
  bool eventId;
  bool registrationCode;
  bool registrationId;
} _TVRRegistrationCodesStoreService_remove_args__isset;

class TVRRegistrationCodesStoreService_remove_args {
 public:

  TVRRegistrationCodesStoreService_remove_args() : eventId(0), registrationCode(), registrationId(0) {
  }

  virtual ~TVRRegistrationCodesStoreService_remove_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;
  std::string registrationCode;
   ::CRDHN::VR::Data::TRID registrationId;

  _TVRRegistrationCodesStoreService_remove_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  void __set_registrationCode(const std::string& val) {
    registrationCode = val;
  }

  void __set_registrationId(const  ::CRDHN::VR::Data::TRID val) {
    registrationId = val;
  }

  bool operator == (const TVRRegistrationCodesStoreService_remove_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    if (!(registrationCode == rhs.registrationCode))
      return false;
    if (!(registrationId == rhs.registrationId))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationCodesStoreService_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationCodesStoreService_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRRegistrationCodesStoreService_remove_pargs {
 public:


  virtual ~TVRRegistrationCodesStoreService_remove_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;
  const std::string* registrationCode;
  const  ::CRDHN::VR::Data::TRID* registrationId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationCodesStoreService_remove_result__isset {
  _TVRRegistrationCodesStoreService_remove_result__isset() : success(false) {}
  bool success;
} _TVRRegistrationCodesStoreService_remove_result__isset;

class TVRRegistrationCodesStoreService_remove_result {
 public:

  TVRRegistrationCodesStoreService_remove_result() : success(0) {
  }

  virtual ~TVRRegistrationCodesStoreService_remove_result() throw() {}

  bool success;

  _TVRRegistrationCodesStoreService_remove_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVRRegistrationCodesStoreService_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationCodesStoreService_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationCodesStoreService_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationCodesStoreService_remove_presult__isset {
  _TVRRegistrationCodesStoreService_remove_presult__isset() : success(false) {}
  bool success;
} _TVRRegistrationCodesStoreService_remove_presult__isset;

class TVRRegistrationCodesStoreService_remove_presult {
 public:


  virtual ~TVRRegistrationCodesStoreService_remove_presult() throw() {}

  bool* success;

  _TVRRegistrationCodesStoreService_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRRegistrationCodesStoreService_getRegistrationId_args__isset {
  _TVRRegistrationCodesStoreService_getRegistrationId_args__isset() : eventId(false), registrationCode(false) {}
  bool eventId;
  bool registrationCode;
} _TVRRegistrationCodesStoreService_getRegistrationId_args__isset;

class TVRRegistrationCodesStoreService_getRegistrationId_args {
 public:

  TVRRegistrationCodesStoreService_getRegistrationId_args() : eventId(0), registrationCode() {
  }

  virtual ~TVRRegistrationCodesStoreService_getRegistrationId_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;
  std::string registrationCode;

  _TVRRegistrationCodesStoreService_getRegistrationId_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  void __set_registrationCode(const std::string& val) {
    registrationCode = val;
  }

  bool operator == (const TVRRegistrationCodesStoreService_getRegistrationId_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    if (!(registrationCode == rhs.registrationCode))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationCodesStoreService_getRegistrationId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationCodesStoreService_getRegistrationId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRRegistrationCodesStoreService_getRegistrationId_pargs {
 public:


  virtual ~TVRRegistrationCodesStoreService_getRegistrationId_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;
  const std::string* registrationCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationCodesStoreService_getRegistrationId_result__isset {
  _TVRRegistrationCodesStoreService_getRegistrationId_result__isset() : success(false) {}
  bool success;
} _TVRRegistrationCodesStoreService_getRegistrationId_result__isset;

class TVRRegistrationCodesStoreService_getRegistrationId_result {
 public:

  TVRRegistrationCodesStoreService_getRegistrationId_result() : success(0) {
  }

  virtual ~TVRRegistrationCodesStoreService_getRegistrationId_result() throw() {}

   ::CRDHN::VR::Data::TRID success;

  _TVRRegistrationCodesStoreService_getRegistrationId_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Data::TRID val) {
    success = val;
  }

  bool operator == (const TVRRegistrationCodesStoreService_getRegistrationId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationCodesStoreService_getRegistrationId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationCodesStoreService_getRegistrationId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationCodesStoreService_getRegistrationId_presult__isset {
  _TVRRegistrationCodesStoreService_getRegistrationId_presult__isset() : success(false) {}
  bool success;
} _TVRRegistrationCodesStoreService_getRegistrationId_presult__isset;

class TVRRegistrationCodesStoreService_getRegistrationId_presult {
 public:


  virtual ~TVRRegistrationCodesStoreService_getRegistrationId_presult() throw() {}

   ::CRDHN::VR::Data::TRID* success;

  _TVRRegistrationCodesStoreService_getRegistrationId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRRegistrationCodesStoreService_getRegistrationCodes_args__isset {
  _TVRRegistrationCodesStoreService_getRegistrationCodes_args__isset() : eventId(false) {}
  bool eventId;
} _TVRRegistrationCodesStoreService_getRegistrationCodes_args__isset;

class TVRRegistrationCodesStoreService_getRegistrationCodes_args {
 public:

  TVRRegistrationCodesStoreService_getRegistrationCodes_args() : eventId(0) {
  }

  virtual ~TVRRegistrationCodesStoreService_getRegistrationCodes_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;

  _TVRRegistrationCodesStoreService_getRegistrationCodes_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  bool operator == (const TVRRegistrationCodesStoreService_getRegistrationCodes_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationCodesStoreService_getRegistrationCodes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationCodesStoreService_getRegistrationCodes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRRegistrationCodesStoreService_getRegistrationCodes_pargs {
 public:


  virtual ~TVRRegistrationCodesStoreService_getRegistrationCodes_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationCodesStoreService_getRegistrationCodes_result__isset {
  _TVRRegistrationCodesStoreService_getRegistrationCodes_result__isset() : success(false) {}
  bool success;
} _TVRRegistrationCodesStoreService_getRegistrationCodes_result__isset;

class TVRRegistrationCodesStoreService_getRegistrationCodes_result {
 public:

  TVRRegistrationCodesStoreService_getRegistrationCodes_result() {
  }

  virtual ~TVRRegistrationCodesStoreService_getRegistrationCodes_result() throw() {}

   ::CRDHN::VR::Data::TRegistrationCodes success;

  _TVRRegistrationCodesStoreService_getRegistrationCodes_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Data::TRegistrationCodes& val) {
    success = val;
  }

  bool operator == (const TVRRegistrationCodesStoreService_getRegistrationCodes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationCodesStoreService_getRegistrationCodes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationCodesStoreService_getRegistrationCodes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationCodesStoreService_getRegistrationCodes_presult__isset {
  _TVRRegistrationCodesStoreService_getRegistrationCodes_presult__isset() : success(false) {}
  bool success;
} _TVRRegistrationCodesStoreService_getRegistrationCodes_presult__isset;

class TVRRegistrationCodesStoreService_getRegistrationCodes_presult {
 public:


  virtual ~TVRRegistrationCodesStoreService_getRegistrationCodes_presult() throw() {}

   ::CRDHN::VR::Data::TRegistrationCodes* success;

  _TVRRegistrationCodesStoreService_getRegistrationCodes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRRegistrationCodesStoreService_removeRegistrationCodes_args__isset {
  _TVRRegistrationCodesStoreService_removeRegistrationCodes_args__isset() : eventId(false) {}
  bool eventId;
} _TVRRegistrationCodesStoreService_removeRegistrationCodes_args__isset;

class TVRRegistrationCodesStoreService_removeRegistrationCodes_args {
 public:

  TVRRegistrationCodesStoreService_removeRegistrationCodes_args() : eventId(0) {
  }

  virtual ~TVRRegistrationCodesStoreService_removeRegistrationCodes_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;

  _TVRRegistrationCodesStoreService_removeRegistrationCodes_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  bool operator == (const TVRRegistrationCodesStoreService_removeRegistrationCodes_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationCodesStoreService_removeRegistrationCodes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationCodesStoreService_removeRegistrationCodes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRRegistrationCodesStoreService_removeRegistrationCodes_pargs {
 public:


  virtual ~TVRRegistrationCodesStoreService_removeRegistrationCodes_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationCodesStoreService_removeRegistrationCodes_result__isset {
  _TVRRegistrationCodesStoreService_removeRegistrationCodes_result__isset() : success(false) {}
  bool success;
} _TVRRegistrationCodesStoreService_removeRegistrationCodes_result__isset;

class TVRRegistrationCodesStoreService_removeRegistrationCodes_result {
 public:

  TVRRegistrationCodesStoreService_removeRegistrationCodes_result() : success(0) {
  }

  virtual ~TVRRegistrationCodesStoreService_removeRegistrationCodes_result() throw() {}

  bool success;

  _TVRRegistrationCodesStoreService_removeRegistrationCodes_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVRRegistrationCodesStoreService_removeRegistrationCodes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationCodesStoreService_removeRegistrationCodes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationCodesStoreService_removeRegistrationCodes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationCodesStoreService_removeRegistrationCodes_presult__isset {
  _TVRRegistrationCodesStoreService_removeRegistrationCodes_presult__isset() : success(false) {}
  bool success;
} _TVRRegistrationCodesStoreService_removeRegistrationCodes_presult__isset;

class TVRRegistrationCodesStoreService_removeRegistrationCodes_presult {
 public:


  virtual ~TVRRegistrationCodesStoreService_removeRegistrationCodes_presult() throw() {}

  bool* success;

  _TVRRegistrationCodesStoreService_removeRegistrationCodes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TVRRegistrationCodesStoreServiceClient : virtual public TVRRegistrationCodesStoreServiceIf {
 public:
  TVRRegistrationCodesStoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TVRRegistrationCodesStoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool add(const  ::CRDHN::VR::Data::TEID eventId, const std::string& registrationCode, const  ::CRDHN::VR::Data::TRID registrationId);
  void send_add(const  ::CRDHN::VR::Data::TEID eventId, const std::string& registrationCode, const  ::CRDHN::VR::Data::TRID registrationId);
  bool recv_add();
  bool remove(const  ::CRDHN::VR::Data::TEID eventId, const std::string& registrationCode, const  ::CRDHN::VR::Data::TRID registrationId);
  void send_remove(const  ::CRDHN::VR::Data::TEID eventId, const std::string& registrationCode, const  ::CRDHN::VR::Data::TRID registrationId);
  bool recv_remove();
   ::CRDHN::VR::Data::TRID getRegistrationId(const  ::CRDHN::VR::Data::TEID eventId, const std::string& registrationCode);
  void send_getRegistrationId(const  ::CRDHN::VR::Data::TEID eventId, const std::string& registrationCode);
   ::CRDHN::VR::Data::TRID recv_getRegistrationId();
  void getRegistrationCodes( ::CRDHN::VR::Data::TRegistrationCodes& _return, const  ::CRDHN::VR::Data::TEID eventId);
  void send_getRegistrationCodes(const  ::CRDHN::VR::Data::TEID eventId);
  void recv_getRegistrationCodes( ::CRDHN::VR::Data::TRegistrationCodes& _return);
  bool removeRegistrationCodes(const  ::CRDHN::VR::Data::TEID eventId);
  void send_removeRegistrationCodes(const  ::CRDHN::VR::Data::TEID eventId);
  bool recv_removeRegistrationCodes();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TVRRegistrationCodesStoreServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TVRRegistrationCodesStoreServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TVRRegistrationCodesStoreServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRegistrationId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRegistrationCodes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeRegistrationCodes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TVRRegistrationCodesStoreServiceProcessor(boost::shared_ptr<TVRRegistrationCodesStoreServiceIf> iface) :
    iface_(iface) {
    processMap_["add"] = &TVRRegistrationCodesStoreServiceProcessor::process_add;
    processMap_["remove"] = &TVRRegistrationCodesStoreServiceProcessor::process_remove;
    processMap_["getRegistrationId"] = &TVRRegistrationCodesStoreServiceProcessor::process_getRegistrationId;
    processMap_["getRegistrationCodes"] = &TVRRegistrationCodesStoreServiceProcessor::process_getRegistrationCodes;
    processMap_["removeRegistrationCodes"] = &TVRRegistrationCodesStoreServiceProcessor::process_removeRegistrationCodes;
  }

  virtual ~TVRRegistrationCodesStoreServiceProcessor() {}
};

class TVRRegistrationCodesStoreServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TVRRegistrationCodesStoreServiceProcessorFactory(const ::boost::shared_ptr< TVRRegistrationCodesStoreServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TVRRegistrationCodesStoreServiceIfFactory > handlerFactory_;
};

class TVRRegistrationCodesStoreServiceMultiface : virtual public TVRRegistrationCodesStoreServiceIf {
 public:
  TVRRegistrationCodesStoreServiceMultiface(std::vector<boost::shared_ptr<TVRRegistrationCodesStoreServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TVRRegistrationCodesStoreServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TVRRegistrationCodesStoreServiceIf> > ifaces_;
  TVRRegistrationCodesStoreServiceMultiface() {}
  void add(boost::shared_ptr<TVRRegistrationCodesStoreServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool add(const  ::CRDHN::VR::Data::TEID eventId, const std::string& registrationCode, const  ::CRDHN::VR::Data::TRID registrationId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(eventId, registrationCode, registrationId);
    }
    return ifaces_[i]->add(eventId, registrationCode, registrationId);
  }

  bool remove(const  ::CRDHN::VR::Data::TEID eventId, const std::string& registrationCode, const  ::CRDHN::VR::Data::TRID registrationId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(eventId, registrationCode, registrationId);
    }
    return ifaces_[i]->remove(eventId, registrationCode, registrationId);
  }

   ::CRDHN::VR::Data::TRID getRegistrationId(const  ::CRDHN::VR::Data::TEID eventId, const std::string& registrationCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRegistrationId(eventId, registrationCode);
    }
    return ifaces_[i]->getRegistrationId(eventId, registrationCode);
  }

  void getRegistrationCodes( ::CRDHN::VR::Data::TRegistrationCodes& _return, const  ::CRDHN::VR::Data::TEID eventId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRegistrationCodes(_return, eventId);
    }
    ifaces_[i]->getRegistrationCodes(_return, eventId);
    return;
  }

  bool removeRegistrationCodes(const  ::CRDHN::VR::Data::TEID eventId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeRegistrationCodes(eventId);
    }
    return ifaces_[i]->removeRegistrationCodes(eventId);
  }

};

}} // namespace

#endif
