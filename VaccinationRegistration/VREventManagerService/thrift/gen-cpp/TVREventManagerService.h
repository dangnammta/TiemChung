/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TVREventManagerService_H
#define TVREventManagerService_H

#include <thrift/TDispatchProcessor.h>
#include "vreventmanagerservice_types.h"

namespace CRDHN { namespace VR {

class TVREventManagerServiceIf {
 public:
  virtual ~TVREventManagerServiceIf() {}
  virtual void createEvent( ::CRDHN::VR::Response::TVMCreateEventResponse& _return, const  ::CRDHN::VR::Data::TEventInfo& eventInfo) = 0;
  virtual void updateEventInfo( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TEventInfo& eventInfo) = 0;
  virtual void getEventInfo( ::CRDHN::VR::Response::TVMGetEventInfoResponse& _return, const  ::CRDHN::VR::Data::TEID eventId) = 0;
  virtual void removeEvent( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TEID eventId) = 0;
  virtual void getEvents( ::CRDHN::VR::Response::TVMGetEventsResponse& _return, const  ::CRDHN::VR::Data::TCID centreId) = 0;
  virtual void updateRegistration( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TRID registrationId, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo) = 0;
  virtual void removeRegistration( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TRID registrationId) = 0;
  virtual void getRegistration( ::CRDHN::VR::Response::TVMGetRegistrationResponse& _return, const  ::CRDHN::VR::Data::TRID registrationId) = 0;
  virtual void getRegistrations( ::CRDHN::VR::Response::TVMGetRegistrationsResponse& _return, const  ::CRDHN::VR::Data::TEID eventId) = 0;
  virtual void updateInjectionStatus( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TRID registrationId, const int32_t injectionStatus) = 0;
};

class TVREventManagerServiceIfFactory {
 public:
  typedef TVREventManagerServiceIf Handler;

  virtual ~TVREventManagerServiceIfFactory() {}

  virtual TVREventManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TVREventManagerServiceIf* /* handler */) = 0;
};

class TVREventManagerServiceIfSingletonFactory : virtual public TVREventManagerServiceIfFactory {
 public:
  TVREventManagerServiceIfSingletonFactory(const boost::shared_ptr<TVREventManagerServiceIf>& iface) : iface_(iface) {}
  virtual ~TVREventManagerServiceIfSingletonFactory() {}

  virtual TVREventManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TVREventManagerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TVREventManagerServiceIf> iface_;
};

class TVREventManagerServiceNull : virtual public TVREventManagerServiceIf {
 public:
  virtual ~TVREventManagerServiceNull() {}
  void createEvent( ::CRDHN::VR::Response::TVMCreateEventResponse& /* _return */, const  ::CRDHN::VR::Data::TEventInfo& /* eventInfo */) {
    return;
  }
  void updateEventInfo( ::CRDHN::VR::Response::TError& /* _return */, const  ::CRDHN::VR::Data::TEID /* eventId */, const  ::CRDHN::VR::Data::TEventInfo& /* eventInfo */) {
    return;
  }
  void getEventInfo( ::CRDHN::VR::Response::TVMGetEventInfoResponse& /* _return */, const  ::CRDHN::VR::Data::TEID /* eventId */) {
    return;
  }
  void removeEvent( ::CRDHN::VR::Response::TError& /* _return */, const  ::CRDHN::VR::Data::TEID /* eventId */) {
    return;
  }
  void getEvents( ::CRDHN::VR::Response::TVMGetEventsResponse& /* _return */, const  ::CRDHN::VR::Data::TCID /* centreId */) {
    return;
  }
  void updateRegistration( ::CRDHN::VR::Response::TError& /* _return */, const  ::CRDHN::VR::Data::TRID /* registrationId */, const  ::CRDHN::VR::Data::TRegistrationInfo& /* registrationInfo */) {
    return;
  }
  void removeRegistration( ::CRDHN::VR::Response::TError& /* _return */, const  ::CRDHN::VR::Data::TRID /* registrationId */) {
    return;
  }
  void getRegistration( ::CRDHN::VR::Response::TVMGetRegistrationResponse& /* _return */, const  ::CRDHN::VR::Data::TRID /* registrationId */) {
    return;
  }
  void getRegistrations( ::CRDHN::VR::Response::TVMGetRegistrationsResponse& /* _return */, const  ::CRDHN::VR::Data::TEID /* eventId */) {
    return;
  }
  void updateInjectionStatus( ::CRDHN::VR::Response::TError& /* _return */, const  ::CRDHN::VR::Data::TRID /* registrationId */, const int32_t /* injectionStatus */) {
    return;
  }
};

typedef struct _TVREventManagerService_createEvent_args__isset {
  _TVREventManagerService_createEvent_args__isset() : eventInfo(false) {}
  bool eventInfo;
} _TVREventManagerService_createEvent_args__isset;

class TVREventManagerService_createEvent_args {
 public:

  TVREventManagerService_createEvent_args() {
  }

  virtual ~TVREventManagerService_createEvent_args() throw() {}

   ::CRDHN::VR::Data::TEventInfo eventInfo;

  _TVREventManagerService_createEvent_args__isset __isset;

  void __set_eventInfo(const  ::CRDHN::VR::Data::TEventInfo& val) {
    eventInfo = val;
  }

  bool operator == (const TVREventManagerService_createEvent_args & rhs) const
  {
    if (!(eventInfo == rhs.eventInfo))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_createEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_createEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventManagerService_createEvent_pargs {
 public:


  virtual ~TVREventManagerService_createEvent_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEventInfo* eventInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_createEvent_result__isset {
  _TVREventManagerService_createEvent_result__isset() : success(false) {}
  bool success;
} _TVREventManagerService_createEvent_result__isset;

class TVREventManagerService_createEvent_result {
 public:

  TVREventManagerService_createEvent_result() {
  }

  virtual ~TVREventManagerService_createEvent_result() throw() {}

   ::CRDHN::VR::Response::TVMCreateEventResponse success;

  _TVREventManagerService_createEvent_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TVMCreateEventResponse& val) {
    success = val;
  }

  bool operator == (const TVREventManagerService_createEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_createEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_createEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_createEvent_presult__isset {
  _TVREventManagerService_createEvent_presult__isset() : success(false) {}
  bool success;
} _TVREventManagerService_createEvent_presult__isset;

class TVREventManagerService_createEvent_presult {
 public:


  virtual ~TVREventManagerService_createEvent_presult() throw() {}

   ::CRDHN::VR::Response::TVMCreateEventResponse* success;

  _TVREventManagerService_createEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventManagerService_updateEventInfo_args__isset {
  _TVREventManagerService_updateEventInfo_args__isset() : eventId(false), eventInfo(false) {}
  bool eventId;
  bool eventInfo;
} _TVREventManagerService_updateEventInfo_args__isset;

class TVREventManagerService_updateEventInfo_args {
 public:

  TVREventManagerService_updateEventInfo_args() : eventId(0) {
  }

  virtual ~TVREventManagerService_updateEventInfo_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;
   ::CRDHN::VR::Data::TEventInfo eventInfo;

  _TVREventManagerService_updateEventInfo_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  void __set_eventInfo(const  ::CRDHN::VR::Data::TEventInfo& val) {
    eventInfo = val;
  }

  bool operator == (const TVREventManagerService_updateEventInfo_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    if (!(eventInfo == rhs.eventInfo))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_updateEventInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_updateEventInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventManagerService_updateEventInfo_pargs {
 public:


  virtual ~TVREventManagerService_updateEventInfo_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;
  const  ::CRDHN::VR::Data::TEventInfo* eventInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_updateEventInfo_result__isset {
  _TVREventManagerService_updateEventInfo_result__isset() : success(false) {}
  bool success;
} _TVREventManagerService_updateEventInfo_result__isset;

class TVREventManagerService_updateEventInfo_result {
 public:

  TVREventManagerService_updateEventInfo_result() {
  }

  virtual ~TVREventManagerService_updateEventInfo_result() throw() {}

   ::CRDHN::VR::Response::TError success;

  _TVREventManagerService_updateEventInfo_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TError& val) {
    success = val;
  }

  bool operator == (const TVREventManagerService_updateEventInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_updateEventInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_updateEventInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_updateEventInfo_presult__isset {
  _TVREventManagerService_updateEventInfo_presult__isset() : success(false) {}
  bool success;
} _TVREventManagerService_updateEventInfo_presult__isset;

class TVREventManagerService_updateEventInfo_presult {
 public:


  virtual ~TVREventManagerService_updateEventInfo_presult() throw() {}

   ::CRDHN::VR::Response::TError* success;

  _TVREventManagerService_updateEventInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventManagerService_getEventInfo_args__isset {
  _TVREventManagerService_getEventInfo_args__isset() : eventId(false) {}
  bool eventId;
} _TVREventManagerService_getEventInfo_args__isset;

class TVREventManagerService_getEventInfo_args {
 public:

  TVREventManagerService_getEventInfo_args() : eventId(0) {
  }

  virtual ~TVREventManagerService_getEventInfo_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;

  _TVREventManagerService_getEventInfo_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  bool operator == (const TVREventManagerService_getEventInfo_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_getEventInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_getEventInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventManagerService_getEventInfo_pargs {
 public:


  virtual ~TVREventManagerService_getEventInfo_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_getEventInfo_result__isset {
  _TVREventManagerService_getEventInfo_result__isset() : success(false) {}
  bool success;
} _TVREventManagerService_getEventInfo_result__isset;

class TVREventManagerService_getEventInfo_result {
 public:

  TVREventManagerService_getEventInfo_result() {
  }

  virtual ~TVREventManagerService_getEventInfo_result() throw() {}

   ::CRDHN::VR::Response::TVMGetEventInfoResponse success;

  _TVREventManagerService_getEventInfo_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TVMGetEventInfoResponse& val) {
    success = val;
  }

  bool operator == (const TVREventManagerService_getEventInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_getEventInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_getEventInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_getEventInfo_presult__isset {
  _TVREventManagerService_getEventInfo_presult__isset() : success(false) {}
  bool success;
} _TVREventManagerService_getEventInfo_presult__isset;

class TVREventManagerService_getEventInfo_presult {
 public:


  virtual ~TVREventManagerService_getEventInfo_presult() throw() {}

   ::CRDHN::VR::Response::TVMGetEventInfoResponse* success;

  _TVREventManagerService_getEventInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventManagerService_removeEvent_args__isset {
  _TVREventManagerService_removeEvent_args__isset() : eventId(false) {}
  bool eventId;
} _TVREventManagerService_removeEvent_args__isset;

class TVREventManagerService_removeEvent_args {
 public:

  TVREventManagerService_removeEvent_args() : eventId(0) {
  }

  virtual ~TVREventManagerService_removeEvent_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;

  _TVREventManagerService_removeEvent_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  bool operator == (const TVREventManagerService_removeEvent_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_removeEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_removeEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventManagerService_removeEvent_pargs {
 public:


  virtual ~TVREventManagerService_removeEvent_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_removeEvent_result__isset {
  _TVREventManagerService_removeEvent_result__isset() : success(false) {}
  bool success;
} _TVREventManagerService_removeEvent_result__isset;

class TVREventManagerService_removeEvent_result {
 public:

  TVREventManagerService_removeEvent_result() {
  }

  virtual ~TVREventManagerService_removeEvent_result() throw() {}

   ::CRDHN::VR::Response::TError success;

  _TVREventManagerService_removeEvent_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TError& val) {
    success = val;
  }

  bool operator == (const TVREventManagerService_removeEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_removeEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_removeEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_removeEvent_presult__isset {
  _TVREventManagerService_removeEvent_presult__isset() : success(false) {}
  bool success;
} _TVREventManagerService_removeEvent_presult__isset;

class TVREventManagerService_removeEvent_presult {
 public:


  virtual ~TVREventManagerService_removeEvent_presult() throw() {}

   ::CRDHN::VR::Response::TError* success;

  _TVREventManagerService_removeEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventManagerService_getEvents_args__isset {
  _TVREventManagerService_getEvents_args__isset() : centreId(false) {}
  bool centreId;
} _TVREventManagerService_getEvents_args__isset;

class TVREventManagerService_getEvents_args {
 public:

  TVREventManagerService_getEvents_args() : centreId(0) {
  }

  virtual ~TVREventManagerService_getEvents_args() throw() {}

   ::CRDHN::VR::Data::TCID centreId;

  _TVREventManagerService_getEvents_args__isset __isset;

  void __set_centreId(const  ::CRDHN::VR::Data::TCID val) {
    centreId = val;
  }

  bool operator == (const TVREventManagerService_getEvents_args & rhs) const
  {
    if (!(centreId == rhs.centreId))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_getEvents_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_getEvents_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventManagerService_getEvents_pargs {
 public:


  virtual ~TVREventManagerService_getEvents_pargs() throw() {}

  const  ::CRDHN::VR::Data::TCID* centreId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_getEvents_result__isset {
  _TVREventManagerService_getEvents_result__isset() : success(false) {}
  bool success;
} _TVREventManagerService_getEvents_result__isset;

class TVREventManagerService_getEvents_result {
 public:

  TVREventManagerService_getEvents_result() {
  }

  virtual ~TVREventManagerService_getEvents_result() throw() {}

   ::CRDHN::VR::Response::TVMGetEventsResponse success;

  _TVREventManagerService_getEvents_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TVMGetEventsResponse& val) {
    success = val;
  }

  bool operator == (const TVREventManagerService_getEvents_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_getEvents_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_getEvents_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_getEvents_presult__isset {
  _TVREventManagerService_getEvents_presult__isset() : success(false) {}
  bool success;
} _TVREventManagerService_getEvents_presult__isset;

class TVREventManagerService_getEvents_presult {
 public:


  virtual ~TVREventManagerService_getEvents_presult() throw() {}

   ::CRDHN::VR::Response::TVMGetEventsResponse* success;

  _TVREventManagerService_getEvents_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventManagerService_updateRegistration_args__isset {
  _TVREventManagerService_updateRegistration_args__isset() : registrationId(false), registrationInfo(false) {}
  bool registrationId;
  bool registrationInfo;
} _TVREventManagerService_updateRegistration_args__isset;

class TVREventManagerService_updateRegistration_args {
 public:

  TVREventManagerService_updateRegistration_args() : registrationId(0) {
  }

  virtual ~TVREventManagerService_updateRegistration_args() throw() {}

   ::CRDHN::VR::Data::TRID registrationId;
   ::CRDHN::VR::Data::TRegistrationInfo registrationInfo;

  _TVREventManagerService_updateRegistration_args__isset __isset;

  void __set_registrationId(const  ::CRDHN::VR::Data::TRID val) {
    registrationId = val;
  }

  void __set_registrationInfo(const  ::CRDHN::VR::Data::TRegistrationInfo& val) {
    registrationInfo = val;
  }

  bool operator == (const TVREventManagerService_updateRegistration_args & rhs) const
  {
    if (!(registrationId == rhs.registrationId))
      return false;
    if (!(registrationInfo == rhs.registrationInfo))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_updateRegistration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_updateRegistration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventManagerService_updateRegistration_pargs {
 public:


  virtual ~TVREventManagerService_updateRegistration_pargs() throw() {}

  const  ::CRDHN::VR::Data::TRID* registrationId;
  const  ::CRDHN::VR::Data::TRegistrationInfo* registrationInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_updateRegistration_result__isset {
  _TVREventManagerService_updateRegistration_result__isset() : success(false) {}
  bool success;
} _TVREventManagerService_updateRegistration_result__isset;

class TVREventManagerService_updateRegistration_result {
 public:

  TVREventManagerService_updateRegistration_result() {
  }

  virtual ~TVREventManagerService_updateRegistration_result() throw() {}

   ::CRDHN::VR::Response::TError success;

  _TVREventManagerService_updateRegistration_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TError& val) {
    success = val;
  }

  bool operator == (const TVREventManagerService_updateRegistration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_updateRegistration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_updateRegistration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_updateRegistration_presult__isset {
  _TVREventManagerService_updateRegistration_presult__isset() : success(false) {}
  bool success;
} _TVREventManagerService_updateRegistration_presult__isset;

class TVREventManagerService_updateRegistration_presult {
 public:


  virtual ~TVREventManagerService_updateRegistration_presult() throw() {}

   ::CRDHN::VR::Response::TError* success;

  _TVREventManagerService_updateRegistration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventManagerService_removeRegistration_args__isset {
  _TVREventManagerService_removeRegistration_args__isset() : registrationId(false) {}
  bool registrationId;
} _TVREventManagerService_removeRegistration_args__isset;

class TVREventManagerService_removeRegistration_args {
 public:

  TVREventManagerService_removeRegistration_args() : registrationId(0) {
  }

  virtual ~TVREventManagerService_removeRegistration_args() throw() {}

   ::CRDHN::VR::Data::TRID registrationId;

  _TVREventManagerService_removeRegistration_args__isset __isset;

  void __set_registrationId(const  ::CRDHN::VR::Data::TRID val) {
    registrationId = val;
  }

  bool operator == (const TVREventManagerService_removeRegistration_args & rhs) const
  {
    if (!(registrationId == rhs.registrationId))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_removeRegistration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_removeRegistration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventManagerService_removeRegistration_pargs {
 public:


  virtual ~TVREventManagerService_removeRegistration_pargs() throw() {}

  const  ::CRDHN::VR::Data::TRID* registrationId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_removeRegistration_result__isset {
  _TVREventManagerService_removeRegistration_result__isset() : success(false) {}
  bool success;
} _TVREventManagerService_removeRegistration_result__isset;

class TVREventManagerService_removeRegistration_result {
 public:

  TVREventManagerService_removeRegistration_result() {
  }

  virtual ~TVREventManagerService_removeRegistration_result() throw() {}

   ::CRDHN::VR::Response::TError success;

  _TVREventManagerService_removeRegistration_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TError& val) {
    success = val;
  }

  bool operator == (const TVREventManagerService_removeRegistration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_removeRegistration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_removeRegistration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_removeRegistration_presult__isset {
  _TVREventManagerService_removeRegistration_presult__isset() : success(false) {}
  bool success;
} _TVREventManagerService_removeRegistration_presult__isset;

class TVREventManagerService_removeRegistration_presult {
 public:


  virtual ~TVREventManagerService_removeRegistration_presult() throw() {}

   ::CRDHN::VR::Response::TError* success;

  _TVREventManagerService_removeRegistration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventManagerService_getRegistration_args__isset {
  _TVREventManagerService_getRegistration_args__isset() : registrationId(false) {}
  bool registrationId;
} _TVREventManagerService_getRegistration_args__isset;

class TVREventManagerService_getRegistration_args {
 public:

  TVREventManagerService_getRegistration_args() : registrationId(0) {
  }

  virtual ~TVREventManagerService_getRegistration_args() throw() {}

   ::CRDHN::VR::Data::TRID registrationId;

  _TVREventManagerService_getRegistration_args__isset __isset;

  void __set_registrationId(const  ::CRDHN::VR::Data::TRID val) {
    registrationId = val;
  }

  bool operator == (const TVREventManagerService_getRegistration_args & rhs) const
  {
    if (!(registrationId == rhs.registrationId))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_getRegistration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_getRegistration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventManagerService_getRegistration_pargs {
 public:


  virtual ~TVREventManagerService_getRegistration_pargs() throw() {}

  const  ::CRDHN::VR::Data::TRID* registrationId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_getRegistration_result__isset {
  _TVREventManagerService_getRegistration_result__isset() : success(false) {}
  bool success;
} _TVREventManagerService_getRegistration_result__isset;

class TVREventManagerService_getRegistration_result {
 public:

  TVREventManagerService_getRegistration_result() {
  }

  virtual ~TVREventManagerService_getRegistration_result() throw() {}

   ::CRDHN::VR::Response::TVMGetRegistrationResponse success;

  _TVREventManagerService_getRegistration_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TVMGetRegistrationResponse& val) {
    success = val;
  }

  bool operator == (const TVREventManagerService_getRegistration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_getRegistration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_getRegistration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_getRegistration_presult__isset {
  _TVREventManagerService_getRegistration_presult__isset() : success(false) {}
  bool success;
} _TVREventManagerService_getRegistration_presult__isset;

class TVREventManagerService_getRegistration_presult {
 public:


  virtual ~TVREventManagerService_getRegistration_presult() throw() {}

   ::CRDHN::VR::Response::TVMGetRegistrationResponse* success;

  _TVREventManagerService_getRegistration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventManagerService_getRegistrations_args__isset {
  _TVREventManagerService_getRegistrations_args__isset() : eventId(false) {}
  bool eventId;
} _TVREventManagerService_getRegistrations_args__isset;

class TVREventManagerService_getRegistrations_args {
 public:

  TVREventManagerService_getRegistrations_args() : eventId(0) {
  }

  virtual ~TVREventManagerService_getRegistrations_args() throw() {}

   ::CRDHN::VR::Data::TEID eventId;

  _TVREventManagerService_getRegistrations_args__isset __isset;

  void __set_eventId(const  ::CRDHN::VR::Data::TEID val) {
    eventId = val;
  }

  bool operator == (const TVREventManagerService_getRegistrations_args & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_getRegistrations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_getRegistrations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventManagerService_getRegistrations_pargs {
 public:


  virtual ~TVREventManagerService_getRegistrations_pargs() throw() {}

  const  ::CRDHN::VR::Data::TEID* eventId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_getRegistrations_result__isset {
  _TVREventManagerService_getRegistrations_result__isset() : success(false) {}
  bool success;
} _TVREventManagerService_getRegistrations_result__isset;

class TVREventManagerService_getRegistrations_result {
 public:

  TVREventManagerService_getRegistrations_result() {
  }

  virtual ~TVREventManagerService_getRegistrations_result() throw() {}

   ::CRDHN::VR::Response::TVMGetRegistrationsResponse success;

  _TVREventManagerService_getRegistrations_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TVMGetRegistrationsResponse& val) {
    success = val;
  }

  bool operator == (const TVREventManagerService_getRegistrations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_getRegistrations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_getRegistrations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_getRegistrations_presult__isset {
  _TVREventManagerService_getRegistrations_presult__isset() : success(false) {}
  bool success;
} _TVREventManagerService_getRegistrations_presult__isset;

class TVREventManagerService_getRegistrations_presult {
 public:


  virtual ~TVREventManagerService_getRegistrations_presult() throw() {}

   ::CRDHN::VR::Response::TVMGetRegistrationsResponse* success;

  _TVREventManagerService_getRegistrations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVREventManagerService_updateInjectionStatus_args__isset {
  _TVREventManagerService_updateInjectionStatus_args__isset() : registrationId(false), injectionStatus(false) {}
  bool registrationId;
  bool injectionStatus;
} _TVREventManagerService_updateInjectionStatus_args__isset;

class TVREventManagerService_updateInjectionStatus_args {
 public:

  TVREventManagerService_updateInjectionStatus_args() : registrationId(0), injectionStatus(0) {
  }

  virtual ~TVREventManagerService_updateInjectionStatus_args() throw() {}

   ::CRDHN::VR::Data::TRID registrationId;
  int32_t injectionStatus;

  _TVREventManagerService_updateInjectionStatus_args__isset __isset;

  void __set_registrationId(const  ::CRDHN::VR::Data::TRID val) {
    registrationId = val;
  }

  void __set_injectionStatus(const int32_t val) {
    injectionStatus = val;
  }

  bool operator == (const TVREventManagerService_updateInjectionStatus_args & rhs) const
  {
    if (!(registrationId == rhs.registrationId))
      return false;
    if (!(injectionStatus == rhs.injectionStatus))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_updateInjectionStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_updateInjectionStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVREventManagerService_updateInjectionStatus_pargs {
 public:


  virtual ~TVREventManagerService_updateInjectionStatus_pargs() throw() {}

  const  ::CRDHN::VR::Data::TRID* registrationId;
  const int32_t* injectionStatus;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_updateInjectionStatus_result__isset {
  _TVREventManagerService_updateInjectionStatus_result__isset() : success(false) {}
  bool success;
} _TVREventManagerService_updateInjectionStatus_result__isset;

class TVREventManagerService_updateInjectionStatus_result {
 public:

  TVREventManagerService_updateInjectionStatus_result() {
  }

  virtual ~TVREventManagerService_updateInjectionStatus_result() throw() {}

   ::CRDHN::VR::Response::TError success;

  _TVREventManagerService_updateInjectionStatus_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Response::TError& val) {
    success = val;
  }

  bool operator == (const TVREventManagerService_updateInjectionStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVREventManagerService_updateInjectionStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVREventManagerService_updateInjectionStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVREventManagerService_updateInjectionStatus_presult__isset {
  _TVREventManagerService_updateInjectionStatus_presult__isset() : success(false) {}
  bool success;
} _TVREventManagerService_updateInjectionStatus_presult__isset;

class TVREventManagerService_updateInjectionStatus_presult {
 public:


  virtual ~TVREventManagerService_updateInjectionStatus_presult() throw() {}

   ::CRDHN::VR::Response::TError* success;

  _TVREventManagerService_updateInjectionStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TVREventManagerServiceClient : virtual public TVREventManagerServiceIf {
 public:
  TVREventManagerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TVREventManagerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createEvent( ::CRDHN::VR::Response::TVMCreateEventResponse& _return, const  ::CRDHN::VR::Data::TEventInfo& eventInfo);
  void send_createEvent(const  ::CRDHN::VR::Data::TEventInfo& eventInfo);
  void recv_createEvent( ::CRDHN::VR::Response::TVMCreateEventResponse& _return);
  void updateEventInfo( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TEventInfo& eventInfo);
  void send_updateEventInfo(const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TEventInfo& eventInfo);
  void recv_updateEventInfo( ::CRDHN::VR::Response::TError& _return);
  void getEventInfo( ::CRDHN::VR::Response::TVMGetEventInfoResponse& _return, const  ::CRDHN::VR::Data::TEID eventId);
  void send_getEventInfo(const  ::CRDHN::VR::Data::TEID eventId);
  void recv_getEventInfo( ::CRDHN::VR::Response::TVMGetEventInfoResponse& _return);
  void removeEvent( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TEID eventId);
  void send_removeEvent(const  ::CRDHN::VR::Data::TEID eventId);
  void recv_removeEvent( ::CRDHN::VR::Response::TError& _return);
  void getEvents( ::CRDHN::VR::Response::TVMGetEventsResponse& _return, const  ::CRDHN::VR::Data::TCID centreId);
  void send_getEvents(const  ::CRDHN::VR::Data::TCID centreId);
  void recv_getEvents( ::CRDHN::VR::Response::TVMGetEventsResponse& _return);
  void updateRegistration( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TRID registrationId, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo);
  void send_updateRegistration(const  ::CRDHN::VR::Data::TRID registrationId, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo);
  void recv_updateRegistration( ::CRDHN::VR::Response::TError& _return);
  void removeRegistration( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TRID registrationId);
  void send_removeRegistration(const  ::CRDHN::VR::Data::TRID registrationId);
  void recv_removeRegistration( ::CRDHN::VR::Response::TError& _return);
  void getRegistration( ::CRDHN::VR::Response::TVMGetRegistrationResponse& _return, const  ::CRDHN::VR::Data::TRID registrationId);
  void send_getRegistration(const  ::CRDHN::VR::Data::TRID registrationId);
  void recv_getRegistration( ::CRDHN::VR::Response::TVMGetRegistrationResponse& _return);
  void getRegistrations( ::CRDHN::VR::Response::TVMGetRegistrationsResponse& _return, const  ::CRDHN::VR::Data::TEID eventId);
  void send_getRegistrations(const  ::CRDHN::VR::Data::TEID eventId);
  void recv_getRegistrations( ::CRDHN::VR::Response::TVMGetRegistrationsResponse& _return);
  void updateInjectionStatus( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TRID registrationId, const int32_t injectionStatus);
  void send_updateInjectionStatus(const  ::CRDHN::VR::Data::TRID registrationId, const int32_t injectionStatus);
  void recv_updateInjectionStatus( ::CRDHN::VR::Response::TError& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TVREventManagerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TVREventManagerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TVREventManagerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateEventInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEventInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEvents(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateRegistration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeRegistration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRegistration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRegistrations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateInjectionStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TVREventManagerServiceProcessor(boost::shared_ptr<TVREventManagerServiceIf> iface) :
    iface_(iface) {
    processMap_["createEvent"] = &TVREventManagerServiceProcessor::process_createEvent;
    processMap_["updateEventInfo"] = &TVREventManagerServiceProcessor::process_updateEventInfo;
    processMap_["getEventInfo"] = &TVREventManagerServiceProcessor::process_getEventInfo;
    processMap_["removeEvent"] = &TVREventManagerServiceProcessor::process_removeEvent;
    processMap_["getEvents"] = &TVREventManagerServiceProcessor::process_getEvents;
    processMap_["updateRegistration"] = &TVREventManagerServiceProcessor::process_updateRegistration;
    processMap_["removeRegistration"] = &TVREventManagerServiceProcessor::process_removeRegistration;
    processMap_["getRegistration"] = &TVREventManagerServiceProcessor::process_getRegistration;
    processMap_["getRegistrations"] = &TVREventManagerServiceProcessor::process_getRegistrations;
    processMap_["updateInjectionStatus"] = &TVREventManagerServiceProcessor::process_updateInjectionStatus;
  }

  virtual ~TVREventManagerServiceProcessor() {}
};

class TVREventManagerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TVREventManagerServiceProcessorFactory(const ::boost::shared_ptr< TVREventManagerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TVREventManagerServiceIfFactory > handlerFactory_;
};

class TVREventManagerServiceMultiface : virtual public TVREventManagerServiceIf {
 public:
  TVREventManagerServiceMultiface(std::vector<boost::shared_ptr<TVREventManagerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TVREventManagerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TVREventManagerServiceIf> > ifaces_;
  TVREventManagerServiceMultiface() {}
  void add(boost::shared_ptr<TVREventManagerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void createEvent( ::CRDHN::VR::Response::TVMCreateEventResponse& _return, const  ::CRDHN::VR::Data::TEventInfo& eventInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createEvent(_return, eventInfo);
    }
    ifaces_[i]->createEvent(_return, eventInfo);
    return;
  }

  void updateEventInfo( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TEID eventId, const  ::CRDHN::VR::Data::TEventInfo& eventInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateEventInfo(_return, eventId, eventInfo);
    }
    ifaces_[i]->updateEventInfo(_return, eventId, eventInfo);
    return;
  }

  void getEventInfo( ::CRDHN::VR::Response::TVMGetEventInfoResponse& _return, const  ::CRDHN::VR::Data::TEID eventId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEventInfo(_return, eventId);
    }
    ifaces_[i]->getEventInfo(_return, eventId);
    return;
  }

  void removeEvent( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TEID eventId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeEvent(_return, eventId);
    }
    ifaces_[i]->removeEvent(_return, eventId);
    return;
  }

  void getEvents( ::CRDHN::VR::Response::TVMGetEventsResponse& _return, const  ::CRDHN::VR::Data::TCID centreId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEvents(_return, centreId);
    }
    ifaces_[i]->getEvents(_return, centreId);
    return;
  }

  void updateRegistration( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TRID registrationId, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateRegistration(_return, registrationId, registrationInfo);
    }
    ifaces_[i]->updateRegistration(_return, registrationId, registrationInfo);
    return;
  }

  void removeRegistration( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TRID registrationId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeRegistration(_return, registrationId);
    }
    ifaces_[i]->removeRegistration(_return, registrationId);
    return;
  }

  void getRegistration( ::CRDHN::VR::Response::TVMGetRegistrationResponse& _return, const  ::CRDHN::VR::Data::TRID registrationId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRegistration(_return, registrationId);
    }
    ifaces_[i]->getRegistration(_return, registrationId);
    return;
  }

  void getRegistrations( ::CRDHN::VR::Response::TVMGetRegistrationsResponse& _return, const  ::CRDHN::VR::Data::TEID eventId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRegistrations(_return, eventId);
    }
    ifaces_[i]->getRegistrations(_return, eventId);
    return;
  }

  void updateInjectionStatus( ::CRDHN::VR::Response::TError& _return, const  ::CRDHN::VR::Data::TRID registrationId, const int32_t injectionStatus) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateInjectionStatus(_return, registrationId, injectionStatus);
    }
    ifaces_[i]->updateInjectionStatus(_return, registrationId, injectionStatus);
    return;
  }

};

}} // namespace

#endif
