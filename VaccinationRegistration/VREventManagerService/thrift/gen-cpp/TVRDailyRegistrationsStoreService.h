/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TVRDailyRegistrationsStoreService_H
#define TVRDailyRegistrationsStoreService_H

#include <thrift/TDispatchProcessor.h>
#include "vrdailyregistrationsstoreservice_types.h"

namespace CRDHN { namespace VR {

class TVRDailyRegistrationsStoreServiceIf {
 public:
  virtual ~TVRDailyRegistrationsStoreServiceIf() {}
  virtual int32_t add(const std::string& key, const std::string& PIN, const  ::CRDHN::VR::Data::TRID registrationId) = 0;
  virtual void get( ::CRDHN::VR::Data::TDailyRegistrations& _return, const std::string& key) = 0;
  virtual int32_t getRegistrationId(const std::string& key, const std::string& PIN) = 0;
  virtual bool remove(const std::string& key) = 0;
};

class TVRDailyRegistrationsStoreServiceIfFactory {
 public:
  typedef TVRDailyRegistrationsStoreServiceIf Handler;

  virtual ~TVRDailyRegistrationsStoreServiceIfFactory() {}

  virtual TVRDailyRegistrationsStoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TVRDailyRegistrationsStoreServiceIf* /* handler */) = 0;
};

class TVRDailyRegistrationsStoreServiceIfSingletonFactory : virtual public TVRDailyRegistrationsStoreServiceIfFactory {
 public:
  TVRDailyRegistrationsStoreServiceIfSingletonFactory(const boost::shared_ptr<TVRDailyRegistrationsStoreServiceIf>& iface) : iface_(iface) {}
  virtual ~TVRDailyRegistrationsStoreServiceIfSingletonFactory() {}

  virtual TVRDailyRegistrationsStoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TVRDailyRegistrationsStoreServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TVRDailyRegistrationsStoreServiceIf> iface_;
};

class TVRDailyRegistrationsStoreServiceNull : virtual public TVRDailyRegistrationsStoreServiceIf {
 public:
  virtual ~TVRDailyRegistrationsStoreServiceNull() {}
  int32_t add(const std::string& /* key */, const std::string& /* PIN */, const  ::CRDHN::VR::Data::TRID /* registrationId */) {
    int32_t _return = 0;
    return _return;
  }
  void get( ::CRDHN::VR::Data::TDailyRegistrations& /* _return */, const std::string& /* key */) {
    return;
  }
  int32_t getRegistrationId(const std::string& /* key */, const std::string& /* PIN */) {
    int32_t _return = 0;
    return _return;
  }
  bool remove(const std::string& /* key */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _TVRDailyRegistrationsStoreService_add_args__isset {
  _TVRDailyRegistrationsStoreService_add_args__isset() : key(false), PIN(false), registrationId(false) {}
  bool key;
  bool PIN;
  bool registrationId;
} _TVRDailyRegistrationsStoreService_add_args__isset;

class TVRDailyRegistrationsStoreService_add_args {
 public:

  TVRDailyRegistrationsStoreService_add_args() : key(), PIN(), registrationId(0) {
  }

  virtual ~TVRDailyRegistrationsStoreService_add_args() throw() {}

  std::string key;
  std::string PIN;
   ::CRDHN::VR::Data::TRID registrationId;

  _TVRDailyRegistrationsStoreService_add_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_PIN(const std::string& val) {
    PIN = val;
  }

  void __set_registrationId(const  ::CRDHN::VR::Data::TRID val) {
    registrationId = val;
  }

  bool operator == (const TVRDailyRegistrationsStoreService_add_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(PIN == rhs.PIN))
      return false;
    if (!(registrationId == rhs.registrationId))
      return false;
    return true;
  }
  bool operator != (const TVRDailyRegistrationsStoreService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRDailyRegistrationsStoreService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRDailyRegistrationsStoreService_add_pargs {
 public:


  virtual ~TVRDailyRegistrationsStoreService_add_pargs() throw() {}

  const std::string* key;
  const std::string* PIN;
  const  ::CRDHN::VR::Data::TRID* registrationId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRDailyRegistrationsStoreService_add_result__isset {
  _TVRDailyRegistrationsStoreService_add_result__isset() : success(false) {}
  bool success;
} _TVRDailyRegistrationsStoreService_add_result__isset;

class TVRDailyRegistrationsStoreService_add_result {
 public:

  TVRDailyRegistrationsStoreService_add_result() : success(0) {
  }

  virtual ~TVRDailyRegistrationsStoreService_add_result() throw() {}

  int32_t success;

  _TVRDailyRegistrationsStoreService_add_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const TVRDailyRegistrationsStoreService_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRDailyRegistrationsStoreService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRDailyRegistrationsStoreService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRDailyRegistrationsStoreService_add_presult__isset {
  _TVRDailyRegistrationsStoreService_add_presult__isset() : success(false) {}
  bool success;
} _TVRDailyRegistrationsStoreService_add_presult__isset;

class TVRDailyRegistrationsStoreService_add_presult {
 public:


  virtual ~TVRDailyRegistrationsStoreService_add_presult() throw() {}

  int32_t* success;

  _TVRDailyRegistrationsStoreService_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRDailyRegistrationsStoreService_get_args__isset {
  _TVRDailyRegistrationsStoreService_get_args__isset() : key(false) {}
  bool key;
} _TVRDailyRegistrationsStoreService_get_args__isset;

class TVRDailyRegistrationsStoreService_get_args {
 public:

  TVRDailyRegistrationsStoreService_get_args() : key() {
  }

  virtual ~TVRDailyRegistrationsStoreService_get_args() throw() {}

  std::string key;

  _TVRDailyRegistrationsStoreService_get_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const TVRDailyRegistrationsStoreService_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const TVRDailyRegistrationsStoreService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRDailyRegistrationsStoreService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRDailyRegistrationsStoreService_get_pargs {
 public:


  virtual ~TVRDailyRegistrationsStoreService_get_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRDailyRegistrationsStoreService_get_result__isset {
  _TVRDailyRegistrationsStoreService_get_result__isset() : success(false) {}
  bool success;
} _TVRDailyRegistrationsStoreService_get_result__isset;

class TVRDailyRegistrationsStoreService_get_result {
 public:

  TVRDailyRegistrationsStoreService_get_result() {
  }

  virtual ~TVRDailyRegistrationsStoreService_get_result() throw() {}

   ::CRDHN::VR::Data::TDailyRegistrations success;

  _TVRDailyRegistrationsStoreService_get_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Data::TDailyRegistrations& val) {
    success = val;
  }

  bool operator == (const TVRDailyRegistrationsStoreService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRDailyRegistrationsStoreService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRDailyRegistrationsStoreService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRDailyRegistrationsStoreService_get_presult__isset {
  _TVRDailyRegistrationsStoreService_get_presult__isset() : success(false) {}
  bool success;
} _TVRDailyRegistrationsStoreService_get_presult__isset;

class TVRDailyRegistrationsStoreService_get_presult {
 public:


  virtual ~TVRDailyRegistrationsStoreService_get_presult() throw() {}

   ::CRDHN::VR::Data::TDailyRegistrations* success;

  _TVRDailyRegistrationsStoreService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRDailyRegistrationsStoreService_getRegistrationId_args__isset {
  _TVRDailyRegistrationsStoreService_getRegistrationId_args__isset() : key(false), PIN(false) {}
  bool key;
  bool PIN;
} _TVRDailyRegistrationsStoreService_getRegistrationId_args__isset;

class TVRDailyRegistrationsStoreService_getRegistrationId_args {
 public:

  TVRDailyRegistrationsStoreService_getRegistrationId_args() : key(), PIN() {
  }

  virtual ~TVRDailyRegistrationsStoreService_getRegistrationId_args() throw() {}

  std::string key;
  std::string PIN;

  _TVRDailyRegistrationsStoreService_getRegistrationId_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_PIN(const std::string& val) {
    PIN = val;
  }

  bool operator == (const TVRDailyRegistrationsStoreService_getRegistrationId_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(PIN == rhs.PIN))
      return false;
    return true;
  }
  bool operator != (const TVRDailyRegistrationsStoreService_getRegistrationId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRDailyRegistrationsStoreService_getRegistrationId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRDailyRegistrationsStoreService_getRegistrationId_pargs {
 public:


  virtual ~TVRDailyRegistrationsStoreService_getRegistrationId_pargs() throw() {}

  const std::string* key;
  const std::string* PIN;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRDailyRegistrationsStoreService_getRegistrationId_result__isset {
  _TVRDailyRegistrationsStoreService_getRegistrationId_result__isset() : success(false) {}
  bool success;
} _TVRDailyRegistrationsStoreService_getRegistrationId_result__isset;

class TVRDailyRegistrationsStoreService_getRegistrationId_result {
 public:

  TVRDailyRegistrationsStoreService_getRegistrationId_result() : success(0) {
  }

  virtual ~TVRDailyRegistrationsStoreService_getRegistrationId_result() throw() {}

  int32_t success;

  _TVRDailyRegistrationsStoreService_getRegistrationId_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const TVRDailyRegistrationsStoreService_getRegistrationId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRDailyRegistrationsStoreService_getRegistrationId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRDailyRegistrationsStoreService_getRegistrationId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRDailyRegistrationsStoreService_getRegistrationId_presult__isset {
  _TVRDailyRegistrationsStoreService_getRegistrationId_presult__isset() : success(false) {}
  bool success;
} _TVRDailyRegistrationsStoreService_getRegistrationId_presult__isset;

class TVRDailyRegistrationsStoreService_getRegistrationId_presult {
 public:


  virtual ~TVRDailyRegistrationsStoreService_getRegistrationId_presult() throw() {}

  int32_t* success;

  _TVRDailyRegistrationsStoreService_getRegistrationId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRDailyRegistrationsStoreService_remove_args__isset {
  _TVRDailyRegistrationsStoreService_remove_args__isset() : key(false) {}
  bool key;
} _TVRDailyRegistrationsStoreService_remove_args__isset;

class TVRDailyRegistrationsStoreService_remove_args {
 public:

  TVRDailyRegistrationsStoreService_remove_args() : key() {
  }

  virtual ~TVRDailyRegistrationsStoreService_remove_args() throw() {}

  std::string key;

  _TVRDailyRegistrationsStoreService_remove_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const TVRDailyRegistrationsStoreService_remove_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const TVRDailyRegistrationsStoreService_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRDailyRegistrationsStoreService_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRDailyRegistrationsStoreService_remove_pargs {
 public:


  virtual ~TVRDailyRegistrationsStoreService_remove_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRDailyRegistrationsStoreService_remove_result__isset {
  _TVRDailyRegistrationsStoreService_remove_result__isset() : success(false) {}
  bool success;
} _TVRDailyRegistrationsStoreService_remove_result__isset;

class TVRDailyRegistrationsStoreService_remove_result {
 public:

  TVRDailyRegistrationsStoreService_remove_result() : success(0) {
  }

  virtual ~TVRDailyRegistrationsStoreService_remove_result() throw() {}

  bool success;

  _TVRDailyRegistrationsStoreService_remove_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVRDailyRegistrationsStoreService_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRDailyRegistrationsStoreService_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRDailyRegistrationsStoreService_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRDailyRegistrationsStoreService_remove_presult__isset {
  _TVRDailyRegistrationsStoreService_remove_presult__isset() : success(false) {}
  bool success;
} _TVRDailyRegistrationsStoreService_remove_presult__isset;

class TVRDailyRegistrationsStoreService_remove_presult {
 public:


  virtual ~TVRDailyRegistrationsStoreService_remove_presult() throw() {}

  bool* success;

  _TVRDailyRegistrationsStoreService_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TVRDailyRegistrationsStoreServiceClient : virtual public TVRDailyRegistrationsStoreServiceIf {
 public:
  TVRDailyRegistrationsStoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TVRDailyRegistrationsStoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t add(const std::string& key, const std::string& PIN, const  ::CRDHN::VR::Data::TRID registrationId);
  void send_add(const std::string& key, const std::string& PIN, const  ::CRDHN::VR::Data::TRID registrationId);
  int32_t recv_add();
  void get( ::CRDHN::VR::Data::TDailyRegistrations& _return, const std::string& key);
  void send_get(const std::string& key);
  void recv_get( ::CRDHN::VR::Data::TDailyRegistrations& _return);
  int32_t getRegistrationId(const std::string& key, const std::string& PIN);
  void send_getRegistrationId(const std::string& key, const std::string& PIN);
  int32_t recv_getRegistrationId();
  bool remove(const std::string& key);
  void send_remove(const std::string& key);
  bool recv_remove();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TVRDailyRegistrationsStoreServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TVRDailyRegistrationsStoreServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TVRDailyRegistrationsStoreServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRegistrationId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TVRDailyRegistrationsStoreServiceProcessor(boost::shared_ptr<TVRDailyRegistrationsStoreServiceIf> iface) :
    iface_(iface) {
    processMap_["add"] = &TVRDailyRegistrationsStoreServiceProcessor::process_add;
    processMap_["get"] = &TVRDailyRegistrationsStoreServiceProcessor::process_get;
    processMap_["getRegistrationId"] = &TVRDailyRegistrationsStoreServiceProcessor::process_getRegistrationId;
    processMap_["remove"] = &TVRDailyRegistrationsStoreServiceProcessor::process_remove;
  }

  virtual ~TVRDailyRegistrationsStoreServiceProcessor() {}
};

class TVRDailyRegistrationsStoreServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TVRDailyRegistrationsStoreServiceProcessorFactory(const ::boost::shared_ptr< TVRDailyRegistrationsStoreServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TVRDailyRegistrationsStoreServiceIfFactory > handlerFactory_;
};

class TVRDailyRegistrationsStoreServiceMultiface : virtual public TVRDailyRegistrationsStoreServiceIf {
 public:
  TVRDailyRegistrationsStoreServiceMultiface(std::vector<boost::shared_ptr<TVRDailyRegistrationsStoreServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TVRDailyRegistrationsStoreServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TVRDailyRegistrationsStoreServiceIf> > ifaces_;
  TVRDailyRegistrationsStoreServiceMultiface() {}
  void add(boost::shared_ptr<TVRDailyRegistrationsStoreServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t add(const std::string& key, const std::string& PIN, const  ::CRDHN::VR::Data::TRID registrationId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(key, PIN, registrationId);
    }
    return ifaces_[i]->add(key, PIN, registrationId);
  }

  void get( ::CRDHN::VR::Data::TDailyRegistrations& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, key);
    }
    ifaces_[i]->get(_return, key);
    return;
  }

  int32_t getRegistrationId(const std::string& key, const std::string& PIN) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRegistrationId(key, PIN);
    }
    return ifaces_[i]->getRegistrationId(key, PIN);
  }

  bool remove(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(key);
    }
    return ifaces_[i]->remove(key);
  }

};

}} // namespace

#endif
