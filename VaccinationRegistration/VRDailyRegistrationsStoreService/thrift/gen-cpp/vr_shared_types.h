/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef vr_shared_TYPES_H
#define vr_shared_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace CRDHN { namespace VR { namespace Data {

enum TEventStatus {
  TES_AVAILABLE = 0,
  TES_PENDING = 1,
  TES_DISABLE = 2,
  TES_DELETED = 3
};

extern const std::map<int, const char*> _TEventStatus_VALUES_TO_NAMES;

enum TInjectionStatus {
  TIS_REGISTED = 0,
  TIS_VACCINATED = 1,
  TIS_CANCELED = 2
};

extern const std::map<int, const char*> _TInjectionStatus_VALUES_TO_NAMES;

enum TRegistrationType {
  TRT_ONLINE = 0,
  TRT_MANUAL = 1
};

extern const std::map<int, const char*> _TRegistrationType_VALUES_TO_NAMES;

typedef int32_t TCID;

typedef int32_t TEID;

typedef int64_t TRID;

typedef int32_t TVID;

typedef int64_t TTIME;


class TCentreInfo {
 public:

  static const char* ascii_fingerprint; // = "7C4E4C49880E87B3D26B88B81CD8E58B";
  static const uint8_t binary_fingerprint[16]; // = {0x7C,0x4E,0x4C,0x49,0x88,0x0E,0x87,0xB3,0xD2,0x6B,0x88,0xB8,0x1C,0xD8,0xE5,0x8B};

  TCentreInfo() : centreId(-1), name(""), address(""), phoneNumber("") {
  }

  virtual ~TCentreInfo() throw() {}

  TCID centreId;
  std::string name;
  std::string address;
  std::string phoneNumber;
  std::vector<TEID>  eventIds;
  std::vector<TVID>  vaccineIds;

  void __set_centreId(const TCID val) {
    centreId = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_address(const std::string& val) {
    address = val;
  }

  void __set_phoneNumber(const std::string& val) {
    phoneNumber = val;
  }

  void __set_eventIds(const std::vector<TEID> & val) {
    eventIds = val;
  }

  void __set_vaccineIds(const std::vector<TVID> & val) {
    vaccineIds = val;
  }

  bool operator == (const TCentreInfo & rhs) const
  {
    if (!(centreId == rhs.centreId))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(address == rhs.address))
      return false;
    if (!(phoneNumber == rhs.phoneNumber))
      return false;
    if (!(eventIds == rhs.eventIds))
      return false;
    if (!(vaccineIds == rhs.vaccineIds))
      return false;
    return true;
  }
  bool operator != (const TCentreInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCentreInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TCentreInfo &a, TCentreInfo &b);


class TVaccineInfo {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  TVaccineInfo() : vaccineId(-1), name(""), description("") {
  }

  virtual ~TVaccineInfo() throw() {}

  TVID vaccineId;
  std::string name;
  std::string description;

  void __set_vaccineId(const TVID val) {
    vaccineId = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  bool operator == (const TVaccineInfo & rhs) const
  {
    if (!(vaccineId == rhs.vaccineId))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const TVaccineInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVaccineInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TVaccineInfo &a, TVaccineInfo &b);


class TInjectionOrderInfo {
 public:

  static const char* ascii_fingerprint; // = "A8A6BEAE03204D142B807E866EFAC13F";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0xA6,0xBE,0xAE,0x03,0x20,0x4D,0x14,0x2B,0x80,0x7E,0x86,0x6E,0xFA,0xC1,0x3F};

  TInjectionOrderInfo() : registrationCode(""), injectionOrderNumber(-1), injectionDate(-1LL), injectionTime("") {
  }

  virtual ~TInjectionOrderInfo() throw() {}

  std::string registrationCode;
  int32_t injectionOrderNumber;
  TTIME injectionDate;
  std::string injectionTime;

  void __set_registrationCode(const std::string& val) {
    registrationCode = val;
  }

  void __set_injectionOrderNumber(const int32_t val) {
    injectionOrderNumber = val;
  }

  void __set_injectionDate(const TTIME val) {
    injectionDate = val;
  }

  void __set_injectionTime(const std::string& val) {
    injectionTime = val;
  }

  bool operator == (const TInjectionOrderInfo & rhs) const
  {
    if (!(registrationCode == rhs.registrationCode))
      return false;
    if (!(injectionOrderNumber == rhs.injectionOrderNumber))
      return false;
    if (!(injectionDate == rhs.injectionDate))
      return false;
    if (!(injectionTime == rhs.injectionTime))
      return false;
    return true;
  }
  bool operator != (const TInjectionOrderInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TInjectionOrderInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TInjectionOrderInfo &a, TInjectionOrderInfo &b);


class TEventInfo {
 public:

  static const char* ascii_fingerprint; // = "BC5CC124D00A10F06390CC99811DD103";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x5C,0xC1,0x24,0xD0,0x0A,0x10,0xF0,0x63,0x90,0xCC,0x99,0x81,0x1D,0xD1,0x03};

  TEventInfo() : eventId(-1), eventName(""), eventStatus(2), startTimeRegistration(-1LL), startTimeInjection(-1LL), totalOfDoses(0), numberOfInjectionsPerDay(0), numberOfRegistrations(0), numberOfVaccinatedChildren(0), vaccineId(-1), centreId(-1), endTimeRegistration(-1LL), isWorkingOnSaturday(false), isWorkingOnSunday(false) {
  }

  virtual ~TEventInfo() throw() {}

  TEID eventId;
  std::string eventName;
  int32_t eventStatus;
  TTIME startTimeRegistration;
  TTIME startTimeInjection;
  int32_t totalOfDoses;
  int32_t numberOfInjectionsPerDay;
  int32_t numberOfRegistrations;
  int32_t numberOfVaccinatedChildren;
  TVID vaccineId;
  TCID centreId;
  std::vector<TRID>  registrations;
  std::vector<std::string>  workingShiftNames;
  TTIME endTimeRegistration;
  std::vector<TRID>  extendedRegistrations;
  bool isWorkingOnSaturday;
  bool isWorkingOnSunday;
  std::set<TTIME>  vacationDays;
  std::map<int32_t, TInjectionOrderInfo>  injectionOrderInfos;
  std::map<TTIME, std::set<int32_t> >  mapDate2InjectionOrderNumbers;
  std::set<std::string>  registrationCodes;

  void __set_eventId(const TEID val) {
    eventId = val;
  }

  void __set_eventName(const std::string& val) {
    eventName = val;
  }

  void __set_eventStatus(const int32_t val) {
    eventStatus = val;
  }

  void __set_startTimeRegistration(const TTIME val) {
    startTimeRegistration = val;
  }

  void __set_startTimeInjection(const TTIME val) {
    startTimeInjection = val;
  }

  void __set_totalOfDoses(const int32_t val) {
    totalOfDoses = val;
  }

  void __set_numberOfInjectionsPerDay(const int32_t val) {
    numberOfInjectionsPerDay = val;
  }

  void __set_numberOfRegistrations(const int32_t val) {
    numberOfRegistrations = val;
  }

  void __set_numberOfVaccinatedChildren(const int32_t val) {
    numberOfVaccinatedChildren = val;
  }

  void __set_vaccineId(const TVID val) {
    vaccineId = val;
  }

  void __set_centreId(const TCID val) {
    centreId = val;
  }

  void __set_registrations(const std::vector<TRID> & val) {
    registrations = val;
  }

  void __set_workingShiftNames(const std::vector<std::string> & val) {
    workingShiftNames = val;
  }

  void __set_endTimeRegistration(const TTIME val) {
    endTimeRegistration = val;
  }

  void __set_extendedRegistrations(const std::vector<TRID> & val) {
    extendedRegistrations = val;
  }

  void __set_isWorkingOnSaturday(const bool val) {
    isWorkingOnSaturday = val;
  }

  void __set_isWorkingOnSunday(const bool val) {
    isWorkingOnSunday = val;
  }

  void __set_vacationDays(const std::set<TTIME> & val) {
    vacationDays = val;
  }

  void __set_injectionOrderInfos(const std::map<int32_t, TInjectionOrderInfo> & val) {
    injectionOrderInfos = val;
  }

  void __set_mapDate2InjectionOrderNumbers(const std::map<TTIME, std::set<int32_t> > & val) {
    mapDate2InjectionOrderNumbers = val;
  }

  void __set_registrationCodes(const std::set<std::string> & val) {
    registrationCodes = val;
  }

  bool operator == (const TEventInfo & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    if (!(eventName == rhs.eventName))
      return false;
    if (!(eventStatus == rhs.eventStatus))
      return false;
    if (!(startTimeRegistration == rhs.startTimeRegistration))
      return false;
    if (!(startTimeInjection == rhs.startTimeInjection))
      return false;
    if (!(totalOfDoses == rhs.totalOfDoses))
      return false;
    if (!(numberOfInjectionsPerDay == rhs.numberOfInjectionsPerDay))
      return false;
    if (!(numberOfRegistrations == rhs.numberOfRegistrations))
      return false;
    if (!(numberOfVaccinatedChildren == rhs.numberOfVaccinatedChildren))
      return false;
    if (!(vaccineId == rhs.vaccineId))
      return false;
    if (!(centreId == rhs.centreId))
      return false;
    if (!(registrations == rhs.registrations))
      return false;
    if (!(workingShiftNames == rhs.workingShiftNames))
      return false;
    if (!(endTimeRegistration == rhs.endTimeRegistration))
      return false;
    if (!(extendedRegistrations == rhs.extendedRegistrations))
      return false;
    if (!(isWorkingOnSaturday == rhs.isWorkingOnSaturday))
      return false;
    if (!(isWorkingOnSunday == rhs.isWorkingOnSunday))
      return false;
    if (!(vacationDays == rhs.vacationDays))
      return false;
    if (!(injectionOrderInfos == rhs.injectionOrderInfos))
      return false;
    if (!(mapDate2InjectionOrderNumbers == rhs.mapDate2InjectionOrderNumbers))
      return false;
    if (!(registrationCodes == rhs.registrationCodes))
      return false;
    return true;
  }
  bool operator != (const TEventInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TEventInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TEventInfo &a, TEventInfo &b);


class TRegistrationCodes {
 public:

  static const char* ascii_fingerprint; // = "9363DE063E60D682BE7B2E0EE221A4DF";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0x63,0xDE,0x06,0x3E,0x60,0xD6,0x82,0xBE,0x7B,0x2E,0x0E,0xE2,0x21,0xA4,0xDF};

  TRegistrationCodes() : eventId(-1) {
  }

  virtual ~TRegistrationCodes() throw() {}

  TEID eventId;
  std::map<std::string, TRID>  mapRCode2RId;

  void __set_eventId(const TEID val) {
    eventId = val;
  }

  void __set_mapRCode2RId(const std::map<std::string, TRID> & val) {
    mapRCode2RId = val;
  }

  bool operator == (const TRegistrationCodes & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    if (!(mapRCode2RId == rhs.mapRCode2RId))
      return false;
    return true;
  }
  bool operator != (const TRegistrationCodes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRegistrationCodes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TRegistrationCodes &a, TRegistrationCodes &b);


class TEventBasicInfo {
 public:

  static const char* ascii_fingerprint; // = "74398DAEB072A5FC624BBF19785D901D";
  static const uint8_t binary_fingerprint[16]; // = {0x74,0x39,0x8D,0xAE,0xB0,0x72,0xA5,0xFC,0x62,0x4B,0xBF,0x19,0x78,0x5D,0x90,0x1D};

  TEventBasicInfo() : eventId(-1), eventName(""), eventStatus(2), startTimeRegistration(-1LL), vaccineId(-1), vaccineName("") {
  }

  virtual ~TEventBasicInfo() throw() {}

  TEID eventId;
  std::string eventName;
  int32_t eventStatus;
  TTIME startTimeRegistration;
  TVID vaccineId;
  std::string vaccineName;

  void __set_eventId(const TEID val) {
    eventId = val;
  }

  void __set_eventName(const std::string& val) {
    eventName = val;
  }

  void __set_eventStatus(const int32_t val) {
    eventStatus = val;
  }

  void __set_startTimeRegistration(const TTIME val) {
    startTimeRegistration = val;
  }

  void __set_vaccineId(const TVID val) {
    vaccineId = val;
  }

  void __set_vaccineName(const std::string& val) {
    vaccineName = val;
  }

  bool operator == (const TEventBasicInfo & rhs) const
  {
    if (!(eventId == rhs.eventId))
      return false;
    if (!(eventName == rhs.eventName))
      return false;
    if (!(eventStatus == rhs.eventStatus))
      return false;
    if (!(startTimeRegistration == rhs.startTimeRegistration))
      return false;
    if (!(vaccineId == rhs.vaccineId))
      return false;
    if (!(vaccineName == rhs.vaccineName))
      return false;
    return true;
  }
  bool operator != (const TEventBasicInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TEventBasicInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TEventBasicInfo &a, TEventBasicInfo &b);


class TRegistrationInfo {
 public:

  static const char* ascii_fingerprint; // = "0D3F3C8388E3DA2F40DB2C4013BB4588";
  static const uint8_t binary_fingerprint[16]; // = {0x0D,0x3F,0x3C,0x83,0x88,0xE3,0xDA,0x2F,0x40,0xDB,0x2C,0x40,0x13,0xBB,0x45,0x88};

  TRegistrationInfo() : registrationId(-1LL), registrationType(0), registrationTime(-1LL), eventId(-1), childrenName(""), childrenDateOfBirth(0LL), childrenCarrierName(""), childrenCarrierPIN(""), childrenCarrierPhoneNumber(""), childrenCarrierEmail(""), childrenCarrierAddress(""), injectionStatus(0), registrationCode(""), injectionOrderNumber(-1), injectionTime(""), injectionDate(-1LL), injectionRealTime(-1LL) {
  }

  virtual ~TRegistrationInfo() throw() {}

  TRID registrationId;
  int32_t registrationType;
  TTIME registrationTime;
  TEID eventId;
  std::string childrenName;
  TTIME childrenDateOfBirth;
  std::string childrenCarrierName;
  std::string childrenCarrierPIN;
  std::string childrenCarrierPhoneNumber;
  std::string childrenCarrierEmail;
  std::string childrenCarrierAddress;
  int32_t injectionStatus;
  std::string registrationCode;
  int32_t injectionOrderNumber;
  std::string injectionTime;
  TTIME injectionDate;
  TTIME injectionRealTime;

  void __set_registrationId(const TRID val) {
    registrationId = val;
  }

  void __set_registrationType(const int32_t val) {
    registrationType = val;
  }

  void __set_registrationTime(const TTIME val) {
    registrationTime = val;
  }

  void __set_eventId(const TEID val) {
    eventId = val;
  }

  void __set_childrenName(const std::string& val) {
    childrenName = val;
  }

  void __set_childrenDateOfBirth(const TTIME val) {
    childrenDateOfBirth = val;
  }

  void __set_childrenCarrierName(const std::string& val) {
    childrenCarrierName = val;
  }

  void __set_childrenCarrierPIN(const std::string& val) {
    childrenCarrierPIN = val;
  }

  void __set_childrenCarrierPhoneNumber(const std::string& val) {
    childrenCarrierPhoneNumber = val;
  }

  void __set_childrenCarrierEmail(const std::string& val) {
    childrenCarrierEmail = val;
  }

  void __set_childrenCarrierAddress(const std::string& val) {
    childrenCarrierAddress = val;
  }

  void __set_injectionStatus(const int32_t val) {
    injectionStatus = val;
  }

  void __set_registrationCode(const std::string& val) {
    registrationCode = val;
  }

  void __set_injectionOrderNumber(const int32_t val) {
    injectionOrderNumber = val;
  }

  void __set_injectionTime(const std::string& val) {
    injectionTime = val;
  }

  void __set_injectionDate(const TTIME val) {
    injectionDate = val;
  }

  void __set_injectionRealTime(const TTIME val) {
    injectionRealTime = val;
  }

  bool operator == (const TRegistrationInfo & rhs) const
  {
    if (!(registrationId == rhs.registrationId))
      return false;
    if (!(registrationType == rhs.registrationType))
      return false;
    if (!(registrationTime == rhs.registrationTime))
      return false;
    if (!(eventId == rhs.eventId))
      return false;
    if (!(childrenName == rhs.childrenName))
      return false;
    if (!(childrenDateOfBirth == rhs.childrenDateOfBirth))
      return false;
    if (!(childrenCarrierName == rhs.childrenCarrierName))
      return false;
    if (!(childrenCarrierPIN == rhs.childrenCarrierPIN))
      return false;
    if (!(childrenCarrierPhoneNumber == rhs.childrenCarrierPhoneNumber))
      return false;
    if (!(childrenCarrierEmail == rhs.childrenCarrierEmail))
      return false;
    if (!(childrenCarrierAddress == rhs.childrenCarrierAddress))
      return false;
    if (!(injectionStatus == rhs.injectionStatus))
      return false;
    if (!(registrationCode == rhs.registrationCode))
      return false;
    if (!(injectionOrderNumber == rhs.injectionOrderNumber))
      return false;
    if (!(injectionTime == rhs.injectionTime))
      return false;
    if (!(injectionDate == rhs.injectionDate))
      return false;
    if (!(injectionRealTime == rhs.injectionRealTime))
      return false;
    return true;
  }
  bool operator != (const TRegistrationInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRegistrationInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TRegistrationInfo &a, TRegistrationInfo &b);

typedef struct _TDailyRegistrations__isset {
  _TDailyRegistrations__isset() : registrations(false) {}
  bool registrations;
} _TDailyRegistrations__isset;

class TDailyRegistrations {
 public:

  static const char* ascii_fingerprint; // = "AED0FF6457343172D8ADAA9756E1239C";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0xD0,0xFF,0x64,0x57,0x34,0x31,0x72,0xD8,0xAD,0xAA,0x97,0x56,0xE1,0x23,0x9C};

  TDailyRegistrations() {
  }

  virtual ~TDailyRegistrations() throw() {}

  std::map<std::string, TRID>  registrations;

  _TDailyRegistrations__isset __isset;

  void __set_registrations(const std::map<std::string, TRID> & val) {
    registrations = val;
  }

  bool operator == (const TDailyRegistrations & rhs) const
  {
    if (!(registrations == rhs.registrations))
      return false;
    return true;
  }
  bool operator != (const TDailyRegistrations &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDailyRegistrations & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TDailyRegistrations &a, TDailyRegistrations &b);

typedef struct _TDailyInjections__isset {
  _TDailyInjections__isset() : registrations(false) {}
  bool registrations;
} _TDailyInjections__isset;

class TDailyInjections {
 public:

  static const char* ascii_fingerprint; // = "E49D7D1A9013CC81CD0F69D631EF82E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0x9D,0x7D,0x1A,0x90,0x13,0xCC,0x81,0xCD,0x0F,0x69,0xD6,0x31,0xEF,0x82,0xE4};

  TDailyInjections() {
  }

  virtual ~TDailyInjections() throw() {}

  std::vector<TRID>  registrations;

  _TDailyInjections__isset __isset;

  void __set_registrations(const std::vector<TRID> & val) {
    registrations = val;
  }

  bool operator == (const TDailyInjections & rhs) const
  {
    if (!(registrations == rhs.registrations))
      return false;
    return true;
  }
  bool operator != (const TDailyInjections &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDailyInjections & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TDailyInjections &a, TDailyInjections &b);

}}} // namespace

#endif
