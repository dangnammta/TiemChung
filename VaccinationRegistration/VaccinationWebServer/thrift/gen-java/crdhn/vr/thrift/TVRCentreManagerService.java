/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package crdhn.vr.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TVRCentreManagerService {

  public interface Iface {

    public crdhn.vr.thrift.response.TCMCreateCentreResponse createCentre(crdhn.vr.thrift.data.TCentreInfo centreInfo) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TCMGetCentreInfoResponse getCentreInfo(int centreId) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TError updateCentreInfo(int centreId, crdhn.vr.thrift.data.TCentreInfo centreInfo) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TError removeCentre(int centreId) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TCMGetCentresResponse getCentres() throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TCMAddVaccineResponse addVaccine(int centreId, crdhn.vr.thrift.data.TVaccineInfo vaccineInfo) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TCMGetVaccineInfoResponse getVaccineInfo(int vaccineId) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TError updateVaccineInfo(int vaccineId, crdhn.vr.thrift.data.TVaccineInfo vaccineInfo) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TError removeVaccine(int centreId, int vaccineId) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TCMGetVaccinesResponse getVaccines(int centreId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createCentre(crdhn.vr.thrift.data.TCentreInfo centreInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCentreInfo(int centreId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateCentreInfo(int centreId, crdhn.vr.thrift.data.TCentreInfo centreInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeCentre(int centreId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCentres(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addVaccine(int centreId, crdhn.vr.thrift.data.TVaccineInfo vaccineInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVaccineInfo(int vaccineId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateVaccineInfo(int vaccineId, crdhn.vr.thrift.data.TVaccineInfo vaccineInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeVaccine(int centreId, int vaccineId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVaccines(int centreId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public crdhn.vr.thrift.response.TCMCreateCentreResponse createCentre(crdhn.vr.thrift.data.TCentreInfo centreInfo) throws org.apache.thrift.TException
    {
      send_createCentre(centreInfo);
      return recv_createCentre();
    }

    public void send_createCentre(crdhn.vr.thrift.data.TCentreInfo centreInfo) throws org.apache.thrift.TException
    {
      createCentre_args args = new createCentre_args();
      args.setCentreInfo(centreInfo);
      sendBase("createCentre", args);
    }

    public crdhn.vr.thrift.response.TCMCreateCentreResponse recv_createCentre() throws org.apache.thrift.TException
    {
      createCentre_result result = new createCentre_result();
      receiveBase(result, "createCentre");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createCentre failed: unknown result");
    }

    public crdhn.vr.thrift.response.TCMGetCentreInfoResponse getCentreInfo(int centreId) throws org.apache.thrift.TException
    {
      send_getCentreInfo(centreId);
      return recv_getCentreInfo();
    }

    public void send_getCentreInfo(int centreId) throws org.apache.thrift.TException
    {
      getCentreInfo_args args = new getCentreInfo_args();
      args.setCentreId(centreId);
      sendBase("getCentreInfo", args);
    }

    public crdhn.vr.thrift.response.TCMGetCentreInfoResponse recv_getCentreInfo() throws org.apache.thrift.TException
    {
      getCentreInfo_result result = new getCentreInfo_result();
      receiveBase(result, "getCentreInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCentreInfo failed: unknown result");
    }

    public crdhn.vr.thrift.response.TError updateCentreInfo(int centreId, crdhn.vr.thrift.data.TCentreInfo centreInfo) throws org.apache.thrift.TException
    {
      send_updateCentreInfo(centreId, centreInfo);
      return recv_updateCentreInfo();
    }

    public void send_updateCentreInfo(int centreId, crdhn.vr.thrift.data.TCentreInfo centreInfo) throws org.apache.thrift.TException
    {
      updateCentreInfo_args args = new updateCentreInfo_args();
      args.setCentreId(centreId);
      args.setCentreInfo(centreInfo);
      sendBase("updateCentreInfo", args);
    }

    public crdhn.vr.thrift.response.TError recv_updateCentreInfo() throws org.apache.thrift.TException
    {
      updateCentreInfo_result result = new updateCentreInfo_result();
      receiveBase(result, "updateCentreInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCentreInfo failed: unknown result");
    }

    public crdhn.vr.thrift.response.TError removeCentre(int centreId) throws org.apache.thrift.TException
    {
      send_removeCentre(centreId);
      return recv_removeCentre();
    }

    public void send_removeCentre(int centreId) throws org.apache.thrift.TException
    {
      removeCentre_args args = new removeCentre_args();
      args.setCentreId(centreId);
      sendBase("removeCentre", args);
    }

    public crdhn.vr.thrift.response.TError recv_removeCentre() throws org.apache.thrift.TException
    {
      removeCentre_result result = new removeCentre_result();
      receiveBase(result, "removeCentre");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeCentre failed: unknown result");
    }

    public crdhn.vr.thrift.response.TCMGetCentresResponse getCentres() throws org.apache.thrift.TException
    {
      send_getCentres();
      return recv_getCentres();
    }

    public void send_getCentres() throws org.apache.thrift.TException
    {
      getCentres_args args = new getCentres_args();
      sendBase("getCentres", args);
    }

    public crdhn.vr.thrift.response.TCMGetCentresResponse recv_getCentres() throws org.apache.thrift.TException
    {
      getCentres_result result = new getCentres_result();
      receiveBase(result, "getCentres");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCentres failed: unknown result");
    }

    public crdhn.vr.thrift.response.TCMAddVaccineResponse addVaccine(int centreId, crdhn.vr.thrift.data.TVaccineInfo vaccineInfo) throws org.apache.thrift.TException
    {
      send_addVaccine(centreId, vaccineInfo);
      return recv_addVaccine();
    }

    public void send_addVaccine(int centreId, crdhn.vr.thrift.data.TVaccineInfo vaccineInfo) throws org.apache.thrift.TException
    {
      addVaccine_args args = new addVaccine_args();
      args.setCentreId(centreId);
      args.setVaccineInfo(vaccineInfo);
      sendBase("addVaccine", args);
    }

    public crdhn.vr.thrift.response.TCMAddVaccineResponse recv_addVaccine() throws org.apache.thrift.TException
    {
      addVaccine_result result = new addVaccine_result();
      receiveBase(result, "addVaccine");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addVaccine failed: unknown result");
    }

    public crdhn.vr.thrift.response.TCMGetVaccineInfoResponse getVaccineInfo(int vaccineId) throws org.apache.thrift.TException
    {
      send_getVaccineInfo(vaccineId);
      return recv_getVaccineInfo();
    }

    public void send_getVaccineInfo(int vaccineId) throws org.apache.thrift.TException
    {
      getVaccineInfo_args args = new getVaccineInfo_args();
      args.setVaccineId(vaccineId);
      sendBase("getVaccineInfo", args);
    }

    public crdhn.vr.thrift.response.TCMGetVaccineInfoResponse recv_getVaccineInfo() throws org.apache.thrift.TException
    {
      getVaccineInfo_result result = new getVaccineInfo_result();
      receiveBase(result, "getVaccineInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVaccineInfo failed: unknown result");
    }

    public crdhn.vr.thrift.response.TError updateVaccineInfo(int vaccineId, crdhn.vr.thrift.data.TVaccineInfo vaccineInfo) throws org.apache.thrift.TException
    {
      send_updateVaccineInfo(vaccineId, vaccineInfo);
      return recv_updateVaccineInfo();
    }

    public void send_updateVaccineInfo(int vaccineId, crdhn.vr.thrift.data.TVaccineInfo vaccineInfo) throws org.apache.thrift.TException
    {
      updateVaccineInfo_args args = new updateVaccineInfo_args();
      args.setVaccineId(vaccineId);
      args.setVaccineInfo(vaccineInfo);
      sendBase("updateVaccineInfo", args);
    }

    public crdhn.vr.thrift.response.TError recv_updateVaccineInfo() throws org.apache.thrift.TException
    {
      updateVaccineInfo_result result = new updateVaccineInfo_result();
      receiveBase(result, "updateVaccineInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateVaccineInfo failed: unknown result");
    }

    public crdhn.vr.thrift.response.TError removeVaccine(int centreId, int vaccineId) throws org.apache.thrift.TException
    {
      send_removeVaccine(centreId, vaccineId);
      return recv_removeVaccine();
    }

    public void send_removeVaccine(int centreId, int vaccineId) throws org.apache.thrift.TException
    {
      removeVaccine_args args = new removeVaccine_args();
      args.setCentreId(centreId);
      args.setVaccineId(vaccineId);
      sendBase("removeVaccine", args);
    }

    public crdhn.vr.thrift.response.TError recv_removeVaccine() throws org.apache.thrift.TException
    {
      removeVaccine_result result = new removeVaccine_result();
      receiveBase(result, "removeVaccine");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeVaccine failed: unknown result");
    }

    public crdhn.vr.thrift.response.TCMGetVaccinesResponse getVaccines(int centreId) throws org.apache.thrift.TException
    {
      send_getVaccines(centreId);
      return recv_getVaccines();
    }

    public void send_getVaccines(int centreId) throws org.apache.thrift.TException
    {
      getVaccines_args args = new getVaccines_args();
      args.setCentreId(centreId);
      sendBase("getVaccines", args);
    }

    public crdhn.vr.thrift.response.TCMGetVaccinesResponse recv_getVaccines() throws org.apache.thrift.TException
    {
      getVaccines_result result = new getVaccines_result();
      receiveBase(result, "getVaccines");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVaccines failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createCentre(crdhn.vr.thrift.data.TCentreInfo centreInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createCentre_call method_call = new createCentre_call(centreInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createCentre_call extends org.apache.thrift.async.TAsyncMethodCall {
      private crdhn.vr.thrift.data.TCentreInfo centreInfo;
      public createCentre_call(crdhn.vr.thrift.data.TCentreInfo centreInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.centreInfo = centreInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createCentre", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createCentre_args args = new createCentre_args();
        args.setCentreInfo(centreInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TCMCreateCentreResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createCentre();
      }
    }

    public void getCentreInfo(int centreId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCentreInfo_call method_call = new getCentreInfo_call(centreId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCentreInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int centreId;
      public getCentreInfo_call(int centreId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.centreId = centreId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCentreInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCentreInfo_args args = new getCentreInfo_args();
        args.setCentreId(centreId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TCMGetCentreInfoResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCentreInfo();
      }
    }

    public void updateCentreInfo(int centreId, crdhn.vr.thrift.data.TCentreInfo centreInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCentreInfo_call method_call = new updateCentreInfo_call(centreId, centreInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCentreInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int centreId;
      private crdhn.vr.thrift.data.TCentreInfo centreInfo;
      public updateCentreInfo_call(int centreId, crdhn.vr.thrift.data.TCentreInfo centreInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.centreId = centreId;
        this.centreInfo = centreInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCentreInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCentreInfo_args args = new updateCentreInfo_args();
        args.setCentreId(centreId);
        args.setCentreInfo(centreInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TError getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCentreInfo();
      }
    }

    public void removeCentre(int centreId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeCentre_call method_call = new removeCentre_call(centreId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeCentre_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int centreId;
      public removeCentre_call(int centreId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.centreId = centreId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeCentre", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeCentre_args args = new removeCentre_args();
        args.setCentreId(centreId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TError getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeCentre();
      }
    }

    public void getCentres(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCentres_call method_call = new getCentres_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCentres_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getCentres_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCentres", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCentres_args args = new getCentres_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TCMGetCentresResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCentres();
      }
    }

    public void addVaccine(int centreId, crdhn.vr.thrift.data.TVaccineInfo vaccineInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addVaccine_call method_call = new addVaccine_call(centreId, vaccineInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addVaccine_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int centreId;
      private crdhn.vr.thrift.data.TVaccineInfo vaccineInfo;
      public addVaccine_call(int centreId, crdhn.vr.thrift.data.TVaccineInfo vaccineInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.centreId = centreId;
        this.vaccineInfo = vaccineInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addVaccine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addVaccine_args args = new addVaccine_args();
        args.setCentreId(centreId);
        args.setVaccineInfo(vaccineInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TCMAddVaccineResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addVaccine();
      }
    }

    public void getVaccineInfo(int vaccineId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVaccineInfo_call method_call = new getVaccineInfo_call(vaccineId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVaccineInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vaccineId;
      public getVaccineInfo_call(int vaccineId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vaccineId = vaccineId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVaccineInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVaccineInfo_args args = new getVaccineInfo_args();
        args.setVaccineId(vaccineId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TCMGetVaccineInfoResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVaccineInfo();
      }
    }

    public void updateVaccineInfo(int vaccineId, crdhn.vr.thrift.data.TVaccineInfo vaccineInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateVaccineInfo_call method_call = new updateVaccineInfo_call(vaccineId, vaccineInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateVaccineInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vaccineId;
      private crdhn.vr.thrift.data.TVaccineInfo vaccineInfo;
      public updateVaccineInfo_call(int vaccineId, crdhn.vr.thrift.data.TVaccineInfo vaccineInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vaccineId = vaccineId;
        this.vaccineInfo = vaccineInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateVaccineInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateVaccineInfo_args args = new updateVaccineInfo_args();
        args.setVaccineId(vaccineId);
        args.setVaccineInfo(vaccineInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TError getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateVaccineInfo();
      }
    }

    public void removeVaccine(int centreId, int vaccineId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeVaccine_call method_call = new removeVaccine_call(centreId, vaccineId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeVaccine_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int centreId;
      private int vaccineId;
      public removeVaccine_call(int centreId, int vaccineId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.centreId = centreId;
        this.vaccineId = vaccineId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeVaccine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeVaccine_args args = new removeVaccine_args();
        args.setCentreId(centreId);
        args.setVaccineId(vaccineId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TError getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeVaccine();
      }
    }

    public void getVaccines(int centreId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVaccines_call method_call = new getVaccines_call(centreId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVaccines_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int centreId;
      public getVaccines_call(int centreId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.centreId = centreId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVaccines", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVaccines_args args = new getVaccines_args();
        args.setCentreId(centreId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TCMGetVaccinesResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVaccines();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createCentre", new createCentre());
      processMap.put("getCentreInfo", new getCentreInfo());
      processMap.put("updateCentreInfo", new updateCentreInfo());
      processMap.put("removeCentre", new removeCentre());
      processMap.put("getCentres", new getCentres());
      processMap.put("addVaccine", new addVaccine());
      processMap.put("getVaccineInfo", new getVaccineInfo());
      processMap.put("updateVaccineInfo", new updateVaccineInfo());
      processMap.put("removeVaccine", new removeVaccine());
      processMap.put("getVaccines", new getVaccines());
      return processMap;
    }

    public static class createCentre<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createCentre_args> {
      public createCentre() {
        super("createCentre");
      }

      public createCentre_args getEmptyArgsInstance() {
        return new createCentre_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createCentre_result getResult(I iface, createCentre_args args) throws org.apache.thrift.TException {
        createCentre_result result = new createCentre_result();
        result.success = iface.createCentre(args.centreInfo);
        return result;
      }
    }

    public static class getCentreInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCentreInfo_args> {
      public getCentreInfo() {
        super("getCentreInfo");
      }

      public getCentreInfo_args getEmptyArgsInstance() {
        return new getCentreInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCentreInfo_result getResult(I iface, getCentreInfo_args args) throws org.apache.thrift.TException {
        getCentreInfo_result result = new getCentreInfo_result();
        result.success = iface.getCentreInfo(args.centreId);
        return result;
      }
    }

    public static class updateCentreInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCentreInfo_args> {
      public updateCentreInfo() {
        super("updateCentreInfo");
      }

      public updateCentreInfo_args getEmptyArgsInstance() {
        return new updateCentreInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCentreInfo_result getResult(I iface, updateCentreInfo_args args) throws org.apache.thrift.TException {
        updateCentreInfo_result result = new updateCentreInfo_result();
        result.success = iface.updateCentreInfo(args.centreId, args.centreInfo);
        return result;
      }
    }

    public static class removeCentre<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeCentre_args> {
      public removeCentre() {
        super("removeCentre");
      }

      public removeCentre_args getEmptyArgsInstance() {
        return new removeCentre_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeCentre_result getResult(I iface, removeCentre_args args) throws org.apache.thrift.TException {
        removeCentre_result result = new removeCentre_result();
        result.success = iface.removeCentre(args.centreId);
        return result;
      }
    }

    public static class getCentres<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCentres_args> {
      public getCentres() {
        super("getCentres");
      }

      public getCentres_args getEmptyArgsInstance() {
        return new getCentres_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCentres_result getResult(I iface, getCentres_args args) throws org.apache.thrift.TException {
        getCentres_result result = new getCentres_result();
        result.success = iface.getCentres();
        return result;
      }
    }

    public static class addVaccine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addVaccine_args> {
      public addVaccine() {
        super("addVaccine");
      }

      public addVaccine_args getEmptyArgsInstance() {
        return new addVaccine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addVaccine_result getResult(I iface, addVaccine_args args) throws org.apache.thrift.TException {
        addVaccine_result result = new addVaccine_result();
        result.success = iface.addVaccine(args.centreId, args.vaccineInfo);
        return result;
      }
    }

    public static class getVaccineInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVaccineInfo_args> {
      public getVaccineInfo() {
        super("getVaccineInfo");
      }

      public getVaccineInfo_args getEmptyArgsInstance() {
        return new getVaccineInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVaccineInfo_result getResult(I iface, getVaccineInfo_args args) throws org.apache.thrift.TException {
        getVaccineInfo_result result = new getVaccineInfo_result();
        result.success = iface.getVaccineInfo(args.vaccineId);
        return result;
      }
    }

    public static class updateVaccineInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateVaccineInfo_args> {
      public updateVaccineInfo() {
        super("updateVaccineInfo");
      }

      public updateVaccineInfo_args getEmptyArgsInstance() {
        return new updateVaccineInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateVaccineInfo_result getResult(I iface, updateVaccineInfo_args args) throws org.apache.thrift.TException {
        updateVaccineInfo_result result = new updateVaccineInfo_result();
        result.success = iface.updateVaccineInfo(args.vaccineId, args.vaccineInfo);
        return result;
      }
    }

    public static class removeVaccine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeVaccine_args> {
      public removeVaccine() {
        super("removeVaccine");
      }

      public removeVaccine_args getEmptyArgsInstance() {
        return new removeVaccine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeVaccine_result getResult(I iface, removeVaccine_args args) throws org.apache.thrift.TException {
        removeVaccine_result result = new removeVaccine_result();
        result.success = iface.removeVaccine(args.centreId, args.vaccineId);
        return result;
      }
    }

    public static class getVaccines<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVaccines_args> {
      public getVaccines() {
        super("getVaccines");
      }

      public getVaccines_args getEmptyArgsInstance() {
        return new getVaccines_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVaccines_result getResult(I iface, getVaccines_args args) throws org.apache.thrift.TException {
        getVaccines_result result = new getVaccines_result();
        result.success = iface.getVaccines(args.centreId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createCentre", new createCentre());
      processMap.put("getCentreInfo", new getCentreInfo());
      processMap.put("updateCentreInfo", new updateCentreInfo());
      processMap.put("removeCentre", new removeCentre());
      processMap.put("getCentres", new getCentres());
      processMap.put("addVaccine", new addVaccine());
      processMap.put("getVaccineInfo", new getVaccineInfo());
      processMap.put("updateVaccineInfo", new updateVaccineInfo());
      processMap.put("removeVaccine", new removeVaccine());
      processMap.put("getVaccines", new getVaccines());
      return processMap;
    }

    public static class createCentre<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createCentre_args, crdhn.vr.thrift.response.TCMCreateCentreResponse> {
      public createCentre() {
        super("createCentre");
      }

      public createCentre_args getEmptyArgsInstance() {
        return new createCentre_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TCMCreateCentreResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TCMCreateCentreResponse>() { 
          public void onComplete(crdhn.vr.thrift.response.TCMCreateCentreResponse o) {
            createCentre_result result = new createCentre_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createCentre_result result = new createCentre_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createCentre_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TCMCreateCentreResponse> resultHandler) throws TException {
        iface.createCentre(args.centreInfo,resultHandler);
      }
    }

    public static class getCentreInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCentreInfo_args, crdhn.vr.thrift.response.TCMGetCentreInfoResponse> {
      public getCentreInfo() {
        super("getCentreInfo");
      }

      public getCentreInfo_args getEmptyArgsInstance() {
        return new getCentreInfo_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TCMGetCentreInfoResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TCMGetCentreInfoResponse>() { 
          public void onComplete(crdhn.vr.thrift.response.TCMGetCentreInfoResponse o) {
            getCentreInfo_result result = new getCentreInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCentreInfo_result result = new getCentreInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCentreInfo_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TCMGetCentreInfoResponse> resultHandler) throws TException {
        iface.getCentreInfo(args.centreId,resultHandler);
      }
    }

    public static class updateCentreInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCentreInfo_args, crdhn.vr.thrift.response.TError> {
      public updateCentreInfo() {
        super("updateCentreInfo");
      }

      public updateCentreInfo_args getEmptyArgsInstance() {
        return new updateCentreInfo_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TError> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TError>() { 
          public void onComplete(crdhn.vr.thrift.response.TError o) {
            updateCentreInfo_result result = new updateCentreInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateCentreInfo_result result = new updateCentreInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCentreInfo_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TError> resultHandler) throws TException {
        iface.updateCentreInfo(args.centreId, args.centreInfo,resultHandler);
      }
    }

    public static class removeCentre<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeCentre_args, crdhn.vr.thrift.response.TError> {
      public removeCentre() {
        super("removeCentre");
      }

      public removeCentre_args getEmptyArgsInstance() {
        return new removeCentre_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TError> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TError>() { 
          public void onComplete(crdhn.vr.thrift.response.TError o) {
            removeCentre_result result = new removeCentre_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeCentre_result result = new removeCentre_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeCentre_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TError> resultHandler) throws TException {
        iface.removeCentre(args.centreId,resultHandler);
      }
    }

    public static class getCentres<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCentres_args, crdhn.vr.thrift.response.TCMGetCentresResponse> {
      public getCentres() {
        super("getCentres");
      }

      public getCentres_args getEmptyArgsInstance() {
        return new getCentres_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TCMGetCentresResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TCMGetCentresResponse>() { 
          public void onComplete(crdhn.vr.thrift.response.TCMGetCentresResponse o) {
            getCentres_result result = new getCentres_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCentres_result result = new getCentres_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCentres_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TCMGetCentresResponse> resultHandler) throws TException {
        iface.getCentres(resultHandler);
      }
    }

    public static class addVaccine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addVaccine_args, crdhn.vr.thrift.response.TCMAddVaccineResponse> {
      public addVaccine() {
        super("addVaccine");
      }

      public addVaccine_args getEmptyArgsInstance() {
        return new addVaccine_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TCMAddVaccineResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TCMAddVaccineResponse>() { 
          public void onComplete(crdhn.vr.thrift.response.TCMAddVaccineResponse o) {
            addVaccine_result result = new addVaccine_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addVaccine_result result = new addVaccine_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addVaccine_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TCMAddVaccineResponse> resultHandler) throws TException {
        iface.addVaccine(args.centreId, args.vaccineInfo,resultHandler);
      }
    }

    public static class getVaccineInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVaccineInfo_args, crdhn.vr.thrift.response.TCMGetVaccineInfoResponse> {
      public getVaccineInfo() {
        super("getVaccineInfo");
      }

      public getVaccineInfo_args getEmptyArgsInstance() {
        return new getVaccineInfo_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TCMGetVaccineInfoResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TCMGetVaccineInfoResponse>() { 
          public void onComplete(crdhn.vr.thrift.response.TCMGetVaccineInfoResponse o) {
            getVaccineInfo_result result = new getVaccineInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVaccineInfo_result result = new getVaccineInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVaccineInfo_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TCMGetVaccineInfoResponse> resultHandler) throws TException {
        iface.getVaccineInfo(args.vaccineId,resultHandler);
      }
    }

    public static class updateVaccineInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateVaccineInfo_args, crdhn.vr.thrift.response.TError> {
      public updateVaccineInfo() {
        super("updateVaccineInfo");
      }

      public updateVaccineInfo_args getEmptyArgsInstance() {
        return new updateVaccineInfo_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TError> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TError>() { 
          public void onComplete(crdhn.vr.thrift.response.TError o) {
            updateVaccineInfo_result result = new updateVaccineInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateVaccineInfo_result result = new updateVaccineInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateVaccineInfo_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TError> resultHandler) throws TException {
        iface.updateVaccineInfo(args.vaccineId, args.vaccineInfo,resultHandler);
      }
    }

    public static class removeVaccine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeVaccine_args, crdhn.vr.thrift.response.TError> {
      public removeVaccine() {
        super("removeVaccine");
      }

      public removeVaccine_args getEmptyArgsInstance() {
        return new removeVaccine_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TError> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TError>() { 
          public void onComplete(crdhn.vr.thrift.response.TError o) {
            removeVaccine_result result = new removeVaccine_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeVaccine_result result = new removeVaccine_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeVaccine_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TError> resultHandler) throws TException {
        iface.removeVaccine(args.centreId, args.vaccineId,resultHandler);
      }
    }

    public static class getVaccines<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVaccines_args, crdhn.vr.thrift.response.TCMGetVaccinesResponse> {
      public getVaccines() {
        super("getVaccines");
      }

      public getVaccines_args getEmptyArgsInstance() {
        return new getVaccines_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TCMGetVaccinesResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TCMGetVaccinesResponse>() { 
          public void onComplete(crdhn.vr.thrift.response.TCMGetVaccinesResponse o) {
            getVaccines_result result = new getVaccines_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVaccines_result result = new getVaccines_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVaccines_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TCMGetVaccinesResponse> resultHandler) throws TException {
        iface.getVaccines(args.centreId,resultHandler);
      }
    }

  }

  public static class createCentre_args implements org.apache.thrift.TBase<createCentre_args, createCentre_args._Fields>, java.io.Serializable, Cloneable, Comparable<createCentre_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCentre_args");

    private static final org.apache.thrift.protocol.TField CENTRE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("centreInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCentre_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCentre_argsTupleSchemeFactory());
    }

    public crdhn.vr.thrift.data.TCentreInfo centreInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CENTRE_INFO((short)1, "centreInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CENTRE_INFO
            return CENTRE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CENTRE_INFO, new org.apache.thrift.meta_data.FieldMetaData("centreInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.data.TCentreInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCentre_args.class, metaDataMap);
    }

    public createCentre_args() {
    }

    public createCentre_args(
      crdhn.vr.thrift.data.TCentreInfo centreInfo)
    {
      this();
      this.centreInfo = centreInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCentre_args(createCentre_args other) {
      if (other.isSetCentreInfo()) {
        this.centreInfo = new crdhn.vr.thrift.data.TCentreInfo(other.centreInfo);
      }
    }

    public createCentre_args deepCopy() {
      return new createCentre_args(this);
    }

    @Override
    public void clear() {
      this.centreInfo = null;
    }

    public crdhn.vr.thrift.data.TCentreInfo getCentreInfo() {
      return this.centreInfo;
    }

    public createCentre_args setCentreInfo(crdhn.vr.thrift.data.TCentreInfo centreInfo) {
      this.centreInfo = centreInfo;
      return this;
    }

    public void unsetCentreInfo() {
      this.centreInfo = null;
    }

    /** Returns true if field centreInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetCentreInfo() {
      return this.centreInfo != null;
    }

    public void setCentreInfoIsSet(boolean value) {
      if (!value) {
        this.centreInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CENTRE_INFO:
        if (value == null) {
          unsetCentreInfo();
        } else {
          setCentreInfo((crdhn.vr.thrift.data.TCentreInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CENTRE_INFO:
        return getCentreInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CENTRE_INFO:
        return isSetCentreInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCentre_args)
        return this.equals((createCentre_args)that);
      return false;
    }

    public boolean equals(createCentre_args that) {
      if (that == null)
        return false;

      boolean this_present_centreInfo = true && this.isSetCentreInfo();
      boolean that_present_centreInfo = true && that.isSetCentreInfo();
      if (this_present_centreInfo || that_present_centreInfo) {
        if (!(this_present_centreInfo && that_present_centreInfo))
          return false;
        if (!this.centreInfo.equals(that.centreInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createCentre_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCentreInfo()).compareTo(other.isSetCentreInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCentreInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.centreInfo, other.centreInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCentre_args(");
      boolean first = true;

      sb.append("centreInfo:");
      if (this.centreInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.centreInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (centreInfo != null) {
        centreInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCentre_argsStandardSchemeFactory implements SchemeFactory {
      public createCentre_argsStandardScheme getScheme() {
        return new createCentre_argsStandardScheme();
      }
    }

    private static class createCentre_argsStandardScheme extends StandardScheme<createCentre_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCentre_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CENTRE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.centreInfo = new crdhn.vr.thrift.data.TCentreInfo();
                struct.centreInfo.read(iprot);
                struct.setCentreInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCentre_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.centreInfo != null) {
          oprot.writeFieldBegin(CENTRE_INFO_FIELD_DESC);
          struct.centreInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCentre_argsTupleSchemeFactory implements SchemeFactory {
      public createCentre_argsTupleScheme getScheme() {
        return new createCentre_argsTupleScheme();
      }
    }

    private static class createCentre_argsTupleScheme extends TupleScheme<createCentre_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCentre_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCentreInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCentreInfo()) {
          struct.centreInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCentre_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.centreInfo = new crdhn.vr.thrift.data.TCentreInfo();
          struct.centreInfo.read(iprot);
          struct.setCentreInfoIsSet(true);
        }
      }
    }

  }

  public static class createCentre_result implements org.apache.thrift.TBase<createCentre_result, createCentre_result._Fields>, java.io.Serializable, Cloneable, Comparable<createCentre_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCentre_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createCentre_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createCentre_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TCMCreateCentreResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TCMCreateCentreResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCentre_result.class, metaDataMap);
    }

    public createCentre_result() {
    }

    public createCentre_result(
      crdhn.vr.thrift.response.TCMCreateCentreResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCentre_result(createCentre_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TCMCreateCentreResponse(other.success);
      }
    }

    public createCentre_result deepCopy() {
      return new createCentre_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TCMCreateCentreResponse getSuccess() {
      return this.success;
    }

    public createCentre_result setSuccess(crdhn.vr.thrift.response.TCMCreateCentreResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TCMCreateCentreResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createCentre_result)
        return this.equals((createCentre_result)that);
      return false;
    }

    public boolean equals(createCentre_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createCentre_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createCentre_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCentre_resultStandardSchemeFactory implements SchemeFactory {
      public createCentre_resultStandardScheme getScheme() {
        return new createCentre_resultStandardScheme();
      }
    }

    private static class createCentre_resultStandardScheme extends StandardScheme<createCentre_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCentre_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TCMCreateCentreResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCentre_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCentre_resultTupleSchemeFactory implements SchemeFactory {
      public createCentre_resultTupleScheme getScheme() {
        return new createCentre_resultTupleScheme();
      }
    }

    private static class createCentre_resultTupleScheme extends TupleScheme<createCentre_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCentre_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCentre_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TCMCreateCentreResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCentreInfo_args implements org.apache.thrift.TBase<getCentreInfo_args, getCentreInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCentreInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCentreInfo_args");

    private static final org.apache.thrift.protocol.TField CENTRE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("centreId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCentreInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCentreInfo_argsTupleSchemeFactory());
    }

    public int centreId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CENTRE_ID((short)1, "centreId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CENTRE_ID
            return CENTRE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CENTREID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CENTRE_ID, new org.apache.thrift.meta_data.FieldMetaData("centreId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TCID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCentreInfo_args.class, metaDataMap);
    }

    public getCentreInfo_args() {
    }

    public getCentreInfo_args(
      int centreId)
    {
      this();
      this.centreId = centreId;
      setCentreIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCentreInfo_args(getCentreInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.centreId = other.centreId;
    }

    public getCentreInfo_args deepCopy() {
      return new getCentreInfo_args(this);
    }

    @Override
    public void clear() {
      setCentreIdIsSet(false);
      this.centreId = 0;
    }

    public int getCentreId() {
      return this.centreId;
    }

    public getCentreInfo_args setCentreId(int centreId) {
      this.centreId = centreId;
      setCentreIdIsSet(true);
      return this;
    }

    public void unsetCentreId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CENTREID_ISSET_ID);
    }

    /** Returns true if field centreId is set (has been assigned a value) and false otherwise */
    public boolean isSetCentreId() {
      return EncodingUtils.testBit(__isset_bitfield, __CENTREID_ISSET_ID);
    }

    public void setCentreIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CENTREID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CENTRE_ID:
        if (value == null) {
          unsetCentreId();
        } else {
          setCentreId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CENTRE_ID:
        return Integer.valueOf(getCentreId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CENTRE_ID:
        return isSetCentreId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCentreInfo_args)
        return this.equals((getCentreInfo_args)that);
      return false;
    }

    public boolean equals(getCentreInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_centreId = true;
      boolean that_present_centreId = true;
      if (this_present_centreId || that_present_centreId) {
        if (!(this_present_centreId && that_present_centreId))
          return false;
        if (this.centreId != that.centreId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCentreInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCentreId()).compareTo(other.isSetCentreId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCentreId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.centreId, other.centreId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCentreInfo_args(");
      boolean first = true;

      sb.append("centreId:");
      sb.append(this.centreId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCentreInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getCentreInfo_argsStandardScheme getScheme() {
        return new getCentreInfo_argsStandardScheme();
      }
    }

    private static class getCentreInfo_argsStandardScheme extends StandardScheme<getCentreInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCentreInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CENTRE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.centreId = iprot.readI32();
                struct.setCentreIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCentreInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CENTRE_ID_FIELD_DESC);
        oprot.writeI32(struct.centreId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCentreInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getCentreInfo_argsTupleScheme getScheme() {
        return new getCentreInfo_argsTupleScheme();
      }
    }

    private static class getCentreInfo_argsTupleScheme extends TupleScheme<getCentreInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCentreInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCentreId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCentreId()) {
          oprot.writeI32(struct.centreId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCentreInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.centreId = iprot.readI32();
          struct.setCentreIdIsSet(true);
        }
      }
    }

  }

  public static class getCentreInfo_result implements org.apache.thrift.TBase<getCentreInfo_result, getCentreInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCentreInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCentreInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCentreInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCentreInfo_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TCMGetCentreInfoResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TCMGetCentreInfoResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCentreInfo_result.class, metaDataMap);
    }

    public getCentreInfo_result() {
    }

    public getCentreInfo_result(
      crdhn.vr.thrift.response.TCMGetCentreInfoResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCentreInfo_result(getCentreInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TCMGetCentreInfoResponse(other.success);
      }
    }

    public getCentreInfo_result deepCopy() {
      return new getCentreInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TCMGetCentreInfoResponse getSuccess() {
      return this.success;
    }

    public getCentreInfo_result setSuccess(crdhn.vr.thrift.response.TCMGetCentreInfoResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TCMGetCentreInfoResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCentreInfo_result)
        return this.equals((getCentreInfo_result)that);
      return false;
    }

    public boolean equals(getCentreInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCentreInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCentreInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCentreInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getCentreInfo_resultStandardScheme getScheme() {
        return new getCentreInfo_resultStandardScheme();
      }
    }

    private static class getCentreInfo_resultStandardScheme extends StandardScheme<getCentreInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCentreInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TCMGetCentreInfoResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCentreInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCentreInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getCentreInfo_resultTupleScheme getScheme() {
        return new getCentreInfo_resultTupleScheme();
      }
    }

    private static class getCentreInfo_resultTupleScheme extends TupleScheme<getCentreInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCentreInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCentreInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TCMGetCentreInfoResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateCentreInfo_args implements org.apache.thrift.TBase<updateCentreInfo_args, updateCentreInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCentreInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCentreInfo_args");

    private static final org.apache.thrift.protocol.TField CENTRE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("centreId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CENTRE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("centreInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCentreInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCentreInfo_argsTupleSchemeFactory());
    }

    public int centreId; // required
    public crdhn.vr.thrift.data.TCentreInfo centreInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CENTRE_ID((short)1, "centreId"),
      CENTRE_INFO((short)2, "centreInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CENTRE_ID
            return CENTRE_ID;
          case 2: // CENTRE_INFO
            return CENTRE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CENTREID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CENTRE_ID, new org.apache.thrift.meta_data.FieldMetaData("centreId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TCID")));
      tmpMap.put(_Fields.CENTRE_INFO, new org.apache.thrift.meta_data.FieldMetaData("centreInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.data.TCentreInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCentreInfo_args.class, metaDataMap);
    }

    public updateCentreInfo_args() {
    }

    public updateCentreInfo_args(
      int centreId,
      crdhn.vr.thrift.data.TCentreInfo centreInfo)
    {
      this();
      this.centreId = centreId;
      setCentreIdIsSet(true);
      this.centreInfo = centreInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCentreInfo_args(updateCentreInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.centreId = other.centreId;
      if (other.isSetCentreInfo()) {
        this.centreInfo = new crdhn.vr.thrift.data.TCentreInfo(other.centreInfo);
      }
    }

    public updateCentreInfo_args deepCopy() {
      return new updateCentreInfo_args(this);
    }

    @Override
    public void clear() {
      setCentreIdIsSet(false);
      this.centreId = 0;
      this.centreInfo = null;
    }

    public int getCentreId() {
      return this.centreId;
    }

    public updateCentreInfo_args setCentreId(int centreId) {
      this.centreId = centreId;
      setCentreIdIsSet(true);
      return this;
    }

    public void unsetCentreId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CENTREID_ISSET_ID);
    }

    /** Returns true if field centreId is set (has been assigned a value) and false otherwise */
    public boolean isSetCentreId() {
      return EncodingUtils.testBit(__isset_bitfield, __CENTREID_ISSET_ID);
    }

    public void setCentreIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CENTREID_ISSET_ID, value);
    }

    public crdhn.vr.thrift.data.TCentreInfo getCentreInfo() {
      return this.centreInfo;
    }

    public updateCentreInfo_args setCentreInfo(crdhn.vr.thrift.data.TCentreInfo centreInfo) {
      this.centreInfo = centreInfo;
      return this;
    }

    public void unsetCentreInfo() {
      this.centreInfo = null;
    }

    /** Returns true if field centreInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetCentreInfo() {
      return this.centreInfo != null;
    }

    public void setCentreInfoIsSet(boolean value) {
      if (!value) {
        this.centreInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CENTRE_ID:
        if (value == null) {
          unsetCentreId();
        } else {
          setCentreId((Integer)value);
        }
        break;

      case CENTRE_INFO:
        if (value == null) {
          unsetCentreInfo();
        } else {
          setCentreInfo((crdhn.vr.thrift.data.TCentreInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CENTRE_ID:
        return Integer.valueOf(getCentreId());

      case CENTRE_INFO:
        return getCentreInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CENTRE_ID:
        return isSetCentreId();
      case CENTRE_INFO:
        return isSetCentreInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCentreInfo_args)
        return this.equals((updateCentreInfo_args)that);
      return false;
    }

    public boolean equals(updateCentreInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_centreId = true;
      boolean that_present_centreId = true;
      if (this_present_centreId || that_present_centreId) {
        if (!(this_present_centreId && that_present_centreId))
          return false;
        if (this.centreId != that.centreId)
          return false;
      }

      boolean this_present_centreInfo = true && this.isSetCentreInfo();
      boolean that_present_centreInfo = true && that.isSetCentreInfo();
      if (this_present_centreInfo || that_present_centreInfo) {
        if (!(this_present_centreInfo && that_present_centreInfo))
          return false;
        if (!this.centreInfo.equals(that.centreInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateCentreInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCentreId()).compareTo(other.isSetCentreId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCentreId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.centreId, other.centreId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCentreInfo()).compareTo(other.isSetCentreInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCentreInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.centreInfo, other.centreInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCentreInfo_args(");
      boolean first = true;

      sb.append("centreId:");
      sb.append(this.centreId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("centreInfo:");
      if (this.centreInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.centreInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (centreInfo != null) {
        centreInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCentreInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateCentreInfo_argsStandardScheme getScheme() {
        return new updateCentreInfo_argsStandardScheme();
      }
    }

    private static class updateCentreInfo_argsStandardScheme extends StandardScheme<updateCentreInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCentreInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CENTRE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.centreId = iprot.readI32();
                struct.setCentreIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CENTRE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.centreInfo = new crdhn.vr.thrift.data.TCentreInfo();
                struct.centreInfo.read(iprot);
                struct.setCentreInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCentreInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CENTRE_ID_FIELD_DESC);
        oprot.writeI32(struct.centreId);
        oprot.writeFieldEnd();
        if (struct.centreInfo != null) {
          oprot.writeFieldBegin(CENTRE_INFO_FIELD_DESC);
          struct.centreInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCentreInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateCentreInfo_argsTupleScheme getScheme() {
        return new updateCentreInfo_argsTupleScheme();
      }
    }

    private static class updateCentreInfo_argsTupleScheme extends TupleScheme<updateCentreInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCentreInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCentreId()) {
          optionals.set(0);
        }
        if (struct.isSetCentreInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCentreId()) {
          oprot.writeI32(struct.centreId);
        }
        if (struct.isSetCentreInfo()) {
          struct.centreInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCentreInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.centreId = iprot.readI32();
          struct.setCentreIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.centreInfo = new crdhn.vr.thrift.data.TCentreInfo();
          struct.centreInfo.read(iprot);
          struct.setCentreInfoIsSet(true);
        }
      }
    }

  }

  public static class updateCentreInfo_result implements org.apache.thrift.TBase<updateCentreInfo_result, updateCentreInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCentreInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCentreInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCentreInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCentreInfo_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TError success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TError.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCentreInfo_result.class, metaDataMap);
    }

    public updateCentreInfo_result() {
    }

    public updateCentreInfo_result(
      crdhn.vr.thrift.response.TError success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCentreInfo_result(updateCentreInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TError(other.success);
      }
    }

    public updateCentreInfo_result deepCopy() {
      return new updateCentreInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TError getSuccess() {
      return this.success;
    }

    public updateCentreInfo_result setSuccess(crdhn.vr.thrift.response.TError success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCentreInfo_result)
        return this.equals((updateCentreInfo_result)that);
      return false;
    }

    public boolean equals(updateCentreInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateCentreInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCentreInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCentreInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateCentreInfo_resultStandardScheme getScheme() {
        return new updateCentreInfo_resultStandardScheme();
      }
    }

    private static class updateCentreInfo_resultStandardScheme extends StandardScheme<updateCentreInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCentreInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TError();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCentreInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCentreInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateCentreInfo_resultTupleScheme getScheme() {
        return new updateCentreInfo_resultTupleScheme();
      }
    }

    private static class updateCentreInfo_resultTupleScheme extends TupleScheme<updateCentreInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCentreInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCentreInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TError();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeCentre_args implements org.apache.thrift.TBase<removeCentre_args, removeCentre_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeCentre_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeCentre_args");

    private static final org.apache.thrift.protocol.TField CENTRE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("centreId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeCentre_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeCentre_argsTupleSchemeFactory());
    }

    public int centreId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CENTRE_ID((short)1, "centreId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CENTRE_ID
            return CENTRE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CENTREID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CENTRE_ID, new org.apache.thrift.meta_data.FieldMetaData("centreId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TCID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeCentre_args.class, metaDataMap);
    }

    public removeCentre_args() {
    }

    public removeCentre_args(
      int centreId)
    {
      this();
      this.centreId = centreId;
      setCentreIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeCentre_args(removeCentre_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.centreId = other.centreId;
    }

    public removeCentre_args deepCopy() {
      return new removeCentre_args(this);
    }

    @Override
    public void clear() {
      setCentreIdIsSet(false);
      this.centreId = 0;
    }

    public int getCentreId() {
      return this.centreId;
    }

    public removeCentre_args setCentreId(int centreId) {
      this.centreId = centreId;
      setCentreIdIsSet(true);
      return this;
    }

    public void unsetCentreId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CENTREID_ISSET_ID);
    }

    /** Returns true if field centreId is set (has been assigned a value) and false otherwise */
    public boolean isSetCentreId() {
      return EncodingUtils.testBit(__isset_bitfield, __CENTREID_ISSET_ID);
    }

    public void setCentreIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CENTREID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CENTRE_ID:
        if (value == null) {
          unsetCentreId();
        } else {
          setCentreId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CENTRE_ID:
        return Integer.valueOf(getCentreId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CENTRE_ID:
        return isSetCentreId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeCentre_args)
        return this.equals((removeCentre_args)that);
      return false;
    }

    public boolean equals(removeCentre_args that) {
      if (that == null)
        return false;

      boolean this_present_centreId = true;
      boolean that_present_centreId = true;
      if (this_present_centreId || that_present_centreId) {
        if (!(this_present_centreId && that_present_centreId))
          return false;
        if (this.centreId != that.centreId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeCentre_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCentreId()).compareTo(other.isSetCentreId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCentreId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.centreId, other.centreId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeCentre_args(");
      boolean first = true;

      sb.append("centreId:");
      sb.append(this.centreId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeCentre_argsStandardSchemeFactory implements SchemeFactory {
      public removeCentre_argsStandardScheme getScheme() {
        return new removeCentre_argsStandardScheme();
      }
    }

    private static class removeCentre_argsStandardScheme extends StandardScheme<removeCentre_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeCentre_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CENTRE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.centreId = iprot.readI32();
                struct.setCentreIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeCentre_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CENTRE_ID_FIELD_DESC);
        oprot.writeI32(struct.centreId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeCentre_argsTupleSchemeFactory implements SchemeFactory {
      public removeCentre_argsTupleScheme getScheme() {
        return new removeCentre_argsTupleScheme();
      }
    }

    private static class removeCentre_argsTupleScheme extends TupleScheme<removeCentre_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeCentre_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCentreId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCentreId()) {
          oprot.writeI32(struct.centreId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeCentre_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.centreId = iprot.readI32();
          struct.setCentreIdIsSet(true);
        }
      }
    }

  }

  public static class removeCentre_result implements org.apache.thrift.TBase<removeCentre_result, removeCentre_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeCentre_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeCentre_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeCentre_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeCentre_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TError success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TError.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeCentre_result.class, metaDataMap);
    }

    public removeCentre_result() {
    }

    public removeCentre_result(
      crdhn.vr.thrift.response.TError success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeCentre_result(removeCentre_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TError(other.success);
      }
    }

    public removeCentre_result deepCopy() {
      return new removeCentre_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TError getSuccess() {
      return this.success;
    }

    public removeCentre_result setSuccess(crdhn.vr.thrift.response.TError success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeCentre_result)
        return this.equals((removeCentre_result)that);
      return false;
    }

    public boolean equals(removeCentre_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeCentre_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeCentre_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeCentre_resultStandardSchemeFactory implements SchemeFactory {
      public removeCentre_resultStandardScheme getScheme() {
        return new removeCentre_resultStandardScheme();
      }
    }

    private static class removeCentre_resultStandardScheme extends StandardScheme<removeCentre_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeCentre_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TError();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeCentre_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeCentre_resultTupleSchemeFactory implements SchemeFactory {
      public removeCentre_resultTupleScheme getScheme() {
        return new removeCentre_resultTupleScheme();
      }
    }

    private static class removeCentre_resultTupleScheme extends TupleScheme<removeCentre_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeCentre_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeCentre_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TError();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCentres_args implements org.apache.thrift.TBase<getCentres_args, getCentres_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCentres_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCentres_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCentres_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCentres_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCentres_args.class, metaDataMap);
    }

    public getCentres_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCentres_args(getCentres_args other) {
    }

    public getCentres_args deepCopy() {
      return new getCentres_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCentres_args)
        return this.equals((getCentres_args)that);
      return false;
    }

    public boolean equals(getCentres_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCentres_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCentres_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCentres_argsStandardSchemeFactory implements SchemeFactory {
      public getCentres_argsStandardScheme getScheme() {
        return new getCentres_argsStandardScheme();
      }
    }

    private static class getCentres_argsStandardScheme extends StandardScheme<getCentres_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCentres_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCentres_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCentres_argsTupleSchemeFactory implements SchemeFactory {
      public getCentres_argsTupleScheme getScheme() {
        return new getCentres_argsTupleScheme();
      }
    }

    private static class getCentres_argsTupleScheme extends TupleScheme<getCentres_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCentres_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCentres_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getCentres_result implements org.apache.thrift.TBase<getCentres_result, getCentres_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCentres_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCentres_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCentres_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCentres_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TCMGetCentresResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TCMGetCentresResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCentres_result.class, metaDataMap);
    }

    public getCentres_result() {
    }

    public getCentres_result(
      crdhn.vr.thrift.response.TCMGetCentresResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCentres_result(getCentres_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TCMGetCentresResponse(other.success);
      }
    }

    public getCentres_result deepCopy() {
      return new getCentres_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TCMGetCentresResponse getSuccess() {
      return this.success;
    }

    public getCentres_result setSuccess(crdhn.vr.thrift.response.TCMGetCentresResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TCMGetCentresResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCentres_result)
        return this.equals((getCentres_result)that);
      return false;
    }

    public boolean equals(getCentres_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCentres_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCentres_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCentres_resultStandardSchemeFactory implements SchemeFactory {
      public getCentres_resultStandardScheme getScheme() {
        return new getCentres_resultStandardScheme();
      }
    }

    private static class getCentres_resultStandardScheme extends StandardScheme<getCentres_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCentres_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TCMGetCentresResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCentres_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCentres_resultTupleSchemeFactory implements SchemeFactory {
      public getCentres_resultTupleScheme getScheme() {
        return new getCentres_resultTupleScheme();
      }
    }

    private static class getCentres_resultTupleScheme extends TupleScheme<getCentres_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCentres_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCentres_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TCMGetCentresResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addVaccine_args implements org.apache.thrift.TBase<addVaccine_args, addVaccine_args._Fields>, java.io.Serializable, Cloneable, Comparable<addVaccine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVaccine_args");

    private static final org.apache.thrift.protocol.TField CENTRE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("centreId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VACCINE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("vaccineInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVaccine_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVaccine_argsTupleSchemeFactory());
    }

    public int centreId; // required
    public crdhn.vr.thrift.data.TVaccineInfo vaccineInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CENTRE_ID((short)1, "centreId"),
      VACCINE_INFO((short)2, "vaccineInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CENTRE_ID
            return CENTRE_ID;
          case 2: // VACCINE_INFO
            return VACCINE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CENTREID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CENTRE_ID, new org.apache.thrift.meta_data.FieldMetaData("centreId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TCID")));
      tmpMap.put(_Fields.VACCINE_INFO, new org.apache.thrift.meta_data.FieldMetaData("vaccineInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.data.TVaccineInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVaccine_args.class, metaDataMap);
    }

    public addVaccine_args() {
    }

    public addVaccine_args(
      int centreId,
      crdhn.vr.thrift.data.TVaccineInfo vaccineInfo)
    {
      this();
      this.centreId = centreId;
      setCentreIdIsSet(true);
      this.vaccineInfo = vaccineInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVaccine_args(addVaccine_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.centreId = other.centreId;
      if (other.isSetVaccineInfo()) {
        this.vaccineInfo = new crdhn.vr.thrift.data.TVaccineInfo(other.vaccineInfo);
      }
    }

    public addVaccine_args deepCopy() {
      return new addVaccine_args(this);
    }

    @Override
    public void clear() {
      setCentreIdIsSet(false);
      this.centreId = 0;
      this.vaccineInfo = null;
    }

    public int getCentreId() {
      return this.centreId;
    }

    public addVaccine_args setCentreId(int centreId) {
      this.centreId = centreId;
      setCentreIdIsSet(true);
      return this;
    }

    public void unsetCentreId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CENTREID_ISSET_ID);
    }

    /** Returns true if field centreId is set (has been assigned a value) and false otherwise */
    public boolean isSetCentreId() {
      return EncodingUtils.testBit(__isset_bitfield, __CENTREID_ISSET_ID);
    }

    public void setCentreIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CENTREID_ISSET_ID, value);
    }

    public crdhn.vr.thrift.data.TVaccineInfo getVaccineInfo() {
      return this.vaccineInfo;
    }

    public addVaccine_args setVaccineInfo(crdhn.vr.thrift.data.TVaccineInfo vaccineInfo) {
      this.vaccineInfo = vaccineInfo;
      return this;
    }

    public void unsetVaccineInfo() {
      this.vaccineInfo = null;
    }

    /** Returns true if field vaccineInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetVaccineInfo() {
      return this.vaccineInfo != null;
    }

    public void setVaccineInfoIsSet(boolean value) {
      if (!value) {
        this.vaccineInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CENTRE_ID:
        if (value == null) {
          unsetCentreId();
        } else {
          setCentreId((Integer)value);
        }
        break;

      case VACCINE_INFO:
        if (value == null) {
          unsetVaccineInfo();
        } else {
          setVaccineInfo((crdhn.vr.thrift.data.TVaccineInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CENTRE_ID:
        return Integer.valueOf(getCentreId());

      case VACCINE_INFO:
        return getVaccineInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CENTRE_ID:
        return isSetCentreId();
      case VACCINE_INFO:
        return isSetVaccineInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVaccine_args)
        return this.equals((addVaccine_args)that);
      return false;
    }

    public boolean equals(addVaccine_args that) {
      if (that == null)
        return false;

      boolean this_present_centreId = true;
      boolean that_present_centreId = true;
      if (this_present_centreId || that_present_centreId) {
        if (!(this_present_centreId && that_present_centreId))
          return false;
        if (this.centreId != that.centreId)
          return false;
      }

      boolean this_present_vaccineInfo = true && this.isSetVaccineInfo();
      boolean that_present_vaccineInfo = true && that.isSetVaccineInfo();
      if (this_present_vaccineInfo || that_present_vaccineInfo) {
        if (!(this_present_vaccineInfo && that_present_vaccineInfo))
          return false;
        if (!this.vaccineInfo.equals(that.vaccineInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addVaccine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCentreId()).compareTo(other.isSetCentreId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCentreId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.centreId, other.centreId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVaccineInfo()).compareTo(other.isSetVaccineInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVaccineInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vaccineInfo, other.vaccineInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVaccine_args(");
      boolean first = true;

      sb.append("centreId:");
      sb.append(this.centreId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vaccineInfo:");
      if (this.vaccineInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.vaccineInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (vaccineInfo != null) {
        vaccineInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVaccine_argsStandardSchemeFactory implements SchemeFactory {
      public addVaccine_argsStandardScheme getScheme() {
        return new addVaccine_argsStandardScheme();
      }
    }

    private static class addVaccine_argsStandardScheme extends StandardScheme<addVaccine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVaccine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CENTRE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.centreId = iprot.readI32();
                struct.setCentreIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VACCINE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vaccineInfo = new crdhn.vr.thrift.data.TVaccineInfo();
                struct.vaccineInfo.read(iprot);
                struct.setVaccineInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVaccine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CENTRE_ID_FIELD_DESC);
        oprot.writeI32(struct.centreId);
        oprot.writeFieldEnd();
        if (struct.vaccineInfo != null) {
          oprot.writeFieldBegin(VACCINE_INFO_FIELD_DESC);
          struct.vaccineInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVaccine_argsTupleSchemeFactory implements SchemeFactory {
      public addVaccine_argsTupleScheme getScheme() {
        return new addVaccine_argsTupleScheme();
      }
    }

    private static class addVaccine_argsTupleScheme extends TupleScheme<addVaccine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVaccine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCentreId()) {
          optionals.set(0);
        }
        if (struct.isSetVaccineInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCentreId()) {
          oprot.writeI32(struct.centreId);
        }
        if (struct.isSetVaccineInfo()) {
          struct.vaccineInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVaccine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.centreId = iprot.readI32();
          struct.setCentreIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vaccineInfo = new crdhn.vr.thrift.data.TVaccineInfo();
          struct.vaccineInfo.read(iprot);
          struct.setVaccineInfoIsSet(true);
        }
      }
    }

  }

  public static class addVaccine_result implements org.apache.thrift.TBase<addVaccine_result, addVaccine_result._Fields>, java.io.Serializable, Cloneable, Comparable<addVaccine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVaccine_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVaccine_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVaccine_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TCMAddVaccineResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TCMAddVaccineResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVaccine_result.class, metaDataMap);
    }

    public addVaccine_result() {
    }

    public addVaccine_result(
      crdhn.vr.thrift.response.TCMAddVaccineResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVaccine_result(addVaccine_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TCMAddVaccineResponse(other.success);
      }
    }

    public addVaccine_result deepCopy() {
      return new addVaccine_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TCMAddVaccineResponse getSuccess() {
      return this.success;
    }

    public addVaccine_result setSuccess(crdhn.vr.thrift.response.TCMAddVaccineResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TCMAddVaccineResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVaccine_result)
        return this.equals((addVaccine_result)that);
      return false;
    }

    public boolean equals(addVaccine_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addVaccine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVaccine_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVaccine_resultStandardSchemeFactory implements SchemeFactory {
      public addVaccine_resultStandardScheme getScheme() {
        return new addVaccine_resultStandardScheme();
      }
    }

    private static class addVaccine_resultStandardScheme extends StandardScheme<addVaccine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVaccine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TCMAddVaccineResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVaccine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVaccine_resultTupleSchemeFactory implements SchemeFactory {
      public addVaccine_resultTupleScheme getScheme() {
        return new addVaccine_resultTupleScheme();
      }
    }

    private static class addVaccine_resultTupleScheme extends TupleScheme<addVaccine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVaccine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVaccine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TCMAddVaccineResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVaccineInfo_args implements org.apache.thrift.TBase<getVaccineInfo_args, getVaccineInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVaccineInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVaccineInfo_args");

    private static final org.apache.thrift.protocol.TField VACCINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vaccineId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVaccineInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVaccineInfo_argsTupleSchemeFactory());
    }

    public int vaccineId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VACCINE_ID((short)1, "vaccineId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VACCINE_ID
            return VACCINE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VACCINEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VACCINE_ID, new org.apache.thrift.meta_data.FieldMetaData("vaccineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TVID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVaccineInfo_args.class, metaDataMap);
    }

    public getVaccineInfo_args() {
    }

    public getVaccineInfo_args(
      int vaccineId)
    {
      this();
      this.vaccineId = vaccineId;
      setVaccineIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVaccineInfo_args(getVaccineInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vaccineId = other.vaccineId;
    }

    public getVaccineInfo_args deepCopy() {
      return new getVaccineInfo_args(this);
    }

    @Override
    public void clear() {
      setVaccineIdIsSet(false);
      this.vaccineId = 0;
    }

    public int getVaccineId() {
      return this.vaccineId;
    }

    public getVaccineInfo_args setVaccineId(int vaccineId) {
      this.vaccineId = vaccineId;
      setVaccineIdIsSet(true);
      return this;
    }

    public void unsetVaccineId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VACCINEID_ISSET_ID);
    }

    /** Returns true if field vaccineId is set (has been assigned a value) and false otherwise */
    public boolean isSetVaccineId() {
      return EncodingUtils.testBit(__isset_bitfield, __VACCINEID_ISSET_ID);
    }

    public void setVaccineIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VACCINEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VACCINE_ID:
        if (value == null) {
          unsetVaccineId();
        } else {
          setVaccineId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VACCINE_ID:
        return Integer.valueOf(getVaccineId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VACCINE_ID:
        return isSetVaccineId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVaccineInfo_args)
        return this.equals((getVaccineInfo_args)that);
      return false;
    }

    public boolean equals(getVaccineInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_vaccineId = true;
      boolean that_present_vaccineId = true;
      if (this_present_vaccineId || that_present_vaccineId) {
        if (!(this_present_vaccineId && that_present_vaccineId))
          return false;
        if (this.vaccineId != that.vaccineId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getVaccineInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVaccineId()).compareTo(other.isSetVaccineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVaccineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vaccineId, other.vaccineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVaccineInfo_args(");
      boolean first = true;

      sb.append("vaccineId:");
      sb.append(this.vaccineId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVaccineInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getVaccineInfo_argsStandardScheme getScheme() {
        return new getVaccineInfo_argsStandardScheme();
      }
    }

    private static class getVaccineInfo_argsStandardScheme extends StandardScheme<getVaccineInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVaccineInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VACCINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vaccineId = iprot.readI32();
                struct.setVaccineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVaccineInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VACCINE_ID_FIELD_DESC);
        oprot.writeI32(struct.vaccineId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVaccineInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getVaccineInfo_argsTupleScheme getScheme() {
        return new getVaccineInfo_argsTupleScheme();
      }
    }

    private static class getVaccineInfo_argsTupleScheme extends TupleScheme<getVaccineInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVaccineInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVaccineId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVaccineId()) {
          oprot.writeI32(struct.vaccineId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVaccineInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vaccineId = iprot.readI32();
          struct.setVaccineIdIsSet(true);
        }
      }
    }

  }

  public static class getVaccineInfo_result implements org.apache.thrift.TBase<getVaccineInfo_result, getVaccineInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVaccineInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVaccineInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVaccineInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVaccineInfo_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TCMGetVaccineInfoResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TCMGetVaccineInfoResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVaccineInfo_result.class, metaDataMap);
    }

    public getVaccineInfo_result() {
    }

    public getVaccineInfo_result(
      crdhn.vr.thrift.response.TCMGetVaccineInfoResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVaccineInfo_result(getVaccineInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TCMGetVaccineInfoResponse(other.success);
      }
    }

    public getVaccineInfo_result deepCopy() {
      return new getVaccineInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TCMGetVaccineInfoResponse getSuccess() {
      return this.success;
    }

    public getVaccineInfo_result setSuccess(crdhn.vr.thrift.response.TCMGetVaccineInfoResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TCMGetVaccineInfoResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVaccineInfo_result)
        return this.equals((getVaccineInfo_result)that);
      return false;
    }

    public boolean equals(getVaccineInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getVaccineInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVaccineInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVaccineInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getVaccineInfo_resultStandardScheme getScheme() {
        return new getVaccineInfo_resultStandardScheme();
      }
    }

    private static class getVaccineInfo_resultStandardScheme extends StandardScheme<getVaccineInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVaccineInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TCMGetVaccineInfoResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVaccineInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVaccineInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getVaccineInfo_resultTupleScheme getScheme() {
        return new getVaccineInfo_resultTupleScheme();
      }
    }

    private static class getVaccineInfo_resultTupleScheme extends TupleScheme<getVaccineInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVaccineInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVaccineInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TCMGetVaccineInfoResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateVaccineInfo_args implements org.apache.thrift.TBase<updateVaccineInfo_args, updateVaccineInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateVaccineInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVaccineInfo_args");

    private static final org.apache.thrift.protocol.TField VACCINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vaccineId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VACCINE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("vaccineInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVaccineInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVaccineInfo_argsTupleSchemeFactory());
    }

    public int vaccineId; // required
    public crdhn.vr.thrift.data.TVaccineInfo vaccineInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VACCINE_ID((short)1, "vaccineId"),
      VACCINE_INFO((short)2, "vaccineInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VACCINE_ID
            return VACCINE_ID;
          case 2: // VACCINE_INFO
            return VACCINE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VACCINEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VACCINE_ID, new org.apache.thrift.meta_data.FieldMetaData("vaccineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TVID")));
      tmpMap.put(_Fields.VACCINE_INFO, new org.apache.thrift.meta_data.FieldMetaData("vaccineInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.data.TVaccineInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVaccineInfo_args.class, metaDataMap);
    }

    public updateVaccineInfo_args() {
    }

    public updateVaccineInfo_args(
      int vaccineId,
      crdhn.vr.thrift.data.TVaccineInfo vaccineInfo)
    {
      this();
      this.vaccineId = vaccineId;
      setVaccineIdIsSet(true);
      this.vaccineInfo = vaccineInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVaccineInfo_args(updateVaccineInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vaccineId = other.vaccineId;
      if (other.isSetVaccineInfo()) {
        this.vaccineInfo = new crdhn.vr.thrift.data.TVaccineInfo(other.vaccineInfo);
      }
    }

    public updateVaccineInfo_args deepCopy() {
      return new updateVaccineInfo_args(this);
    }

    @Override
    public void clear() {
      setVaccineIdIsSet(false);
      this.vaccineId = 0;
      this.vaccineInfo = null;
    }

    public int getVaccineId() {
      return this.vaccineId;
    }

    public updateVaccineInfo_args setVaccineId(int vaccineId) {
      this.vaccineId = vaccineId;
      setVaccineIdIsSet(true);
      return this;
    }

    public void unsetVaccineId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VACCINEID_ISSET_ID);
    }

    /** Returns true if field vaccineId is set (has been assigned a value) and false otherwise */
    public boolean isSetVaccineId() {
      return EncodingUtils.testBit(__isset_bitfield, __VACCINEID_ISSET_ID);
    }

    public void setVaccineIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VACCINEID_ISSET_ID, value);
    }

    public crdhn.vr.thrift.data.TVaccineInfo getVaccineInfo() {
      return this.vaccineInfo;
    }

    public updateVaccineInfo_args setVaccineInfo(crdhn.vr.thrift.data.TVaccineInfo vaccineInfo) {
      this.vaccineInfo = vaccineInfo;
      return this;
    }

    public void unsetVaccineInfo() {
      this.vaccineInfo = null;
    }

    /** Returns true if field vaccineInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetVaccineInfo() {
      return this.vaccineInfo != null;
    }

    public void setVaccineInfoIsSet(boolean value) {
      if (!value) {
        this.vaccineInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VACCINE_ID:
        if (value == null) {
          unsetVaccineId();
        } else {
          setVaccineId((Integer)value);
        }
        break;

      case VACCINE_INFO:
        if (value == null) {
          unsetVaccineInfo();
        } else {
          setVaccineInfo((crdhn.vr.thrift.data.TVaccineInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VACCINE_ID:
        return Integer.valueOf(getVaccineId());

      case VACCINE_INFO:
        return getVaccineInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VACCINE_ID:
        return isSetVaccineId();
      case VACCINE_INFO:
        return isSetVaccineInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVaccineInfo_args)
        return this.equals((updateVaccineInfo_args)that);
      return false;
    }

    public boolean equals(updateVaccineInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_vaccineId = true;
      boolean that_present_vaccineId = true;
      if (this_present_vaccineId || that_present_vaccineId) {
        if (!(this_present_vaccineId && that_present_vaccineId))
          return false;
        if (this.vaccineId != that.vaccineId)
          return false;
      }

      boolean this_present_vaccineInfo = true && this.isSetVaccineInfo();
      boolean that_present_vaccineInfo = true && that.isSetVaccineInfo();
      if (this_present_vaccineInfo || that_present_vaccineInfo) {
        if (!(this_present_vaccineInfo && that_present_vaccineInfo))
          return false;
        if (!this.vaccineInfo.equals(that.vaccineInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateVaccineInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVaccineId()).compareTo(other.isSetVaccineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVaccineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vaccineId, other.vaccineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVaccineInfo()).compareTo(other.isSetVaccineInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVaccineInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vaccineInfo, other.vaccineInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVaccineInfo_args(");
      boolean first = true;

      sb.append("vaccineId:");
      sb.append(this.vaccineId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vaccineInfo:");
      if (this.vaccineInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.vaccineInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (vaccineInfo != null) {
        vaccineInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVaccineInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateVaccineInfo_argsStandardScheme getScheme() {
        return new updateVaccineInfo_argsStandardScheme();
      }
    }

    private static class updateVaccineInfo_argsStandardScheme extends StandardScheme<updateVaccineInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVaccineInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VACCINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vaccineId = iprot.readI32();
                struct.setVaccineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VACCINE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vaccineInfo = new crdhn.vr.thrift.data.TVaccineInfo();
                struct.vaccineInfo.read(iprot);
                struct.setVaccineInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVaccineInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VACCINE_ID_FIELD_DESC);
        oprot.writeI32(struct.vaccineId);
        oprot.writeFieldEnd();
        if (struct.vaccineInfo != null) {
          oprot.writeFieldBegin(VACCINE_INFO_FIELD_DESC);
          struct.vaccineInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVaccineInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateVaccineInfo_argsTupleScheme getScheme() {
        return new updateVaccineInfo_argsTupleScheme();
      }
    }

    private static class updateVaccineInfo_argsTupleScheme extends TupleScheme<updateVaccineInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVaccineInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVaccineId()) {
          optionals.set(0);
        }
        if (struct.isSetVaccineInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVaccineId()) {
          oprot.writeI32(struct.vaccineId);
        }
        if (struct.isSetVaccineInfo()) {
          struct.vaccineInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVaccineInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.vaccineId = iprot.readI32();
          struct.setVaccineIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vaccineInfo = new crdhn.vr.thrift.data.TVaccineInfo();
          struct.vaccineInfo.read(iprot);
          struct.setVaccineInfoIsSet(true);
        }
      }
    }

  }

  public static class updateVaccineInfo_result implements org.apache.thrift.TBase<updateVaccineInfo_result, updateVaccineInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateVaccineInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateVaccineInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateVaccineInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateVaccineInfo_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TError success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TError.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateVaccineInfo_result.class, metaDataMap);
    }

    public updateVaccineInfo_result() {
    }

    public updateVaccineInfo_result(
      crdhn.vr.thrift.response.TError success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateVaccineInfo_result(updateVaccineInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TError(other.success);
      }
    }

    public updateVaccineInfo_result deepCopy() {
      return new updateVaccineInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TError getSuccess() {
      return this.success;
    }

    public updateVaccineInfo_result setSuccess(crdhn.vr.thrift.response.TError success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateVaccineInfo_result)
        return this.equals((updateVaccineInfo_result)that);
      return false;
    }

    public boolean equals(updateVaccineInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateVaccineInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateVaccineInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateVaccineInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateVaccineInfo_resultStandardScheme getScheme() {
        return new updateVaccineInfo_resultStandardScheme();
      }
    }

    private static class updateVaccineInfo_resultStandardScheme extends StandardScheme<updateVaccineInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateVaccineInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TError();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateVaccineInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateVaccineInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateVaccineInfo_resultTupleScheme getScheme() {
        return new updateVaccineInfo_resultTupleScheme();
      }
    }

    private static class updateVaccineInfo_resultTupleScheme extends TupleScheme<updateVaccineInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateVaccineInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateVaccineInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TError();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeVaccine_args implements org.apache.thrift.TBase<removeVaccine_args, removeVaccine_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeVaccine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeVaccine_args");

    private static final org.apache.thrift.protocol.TField CENTRE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("centreId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VACCINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vaccineId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeVaccine_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeVaccine_argsTupleSchemeFactory());
    }

    public int centreId; // required
    public int vaccineId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CENTRE_ID((short)1, "centreId"),
      VACCINE_ID((short)2, "vaccineId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CENTRE_ID
            return CENTRE_ID;
          case 2: // VACCINE_ID
            return VACCINE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CENTREID_ISSET_ID = 0;
    private static final int __VACCINEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CENTRE_ID, new org.apache.thrift.meta_data.FieldMetaData("centreId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TCID")));
      tmpMap.put(_Fields.VACCINE_ID, new org.apache.thrift.meta_data.FieldMetaData("vaccineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TVID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeVaccine_args.class, metaDataMap);
    }

    public removeVaccine_args() {
    }

    public removeVaccine_args(
      int centreId,
      int vaccineId)
    {
      this();
      this.centreId = centreId;
      setCentreIdIsSet(true);
      this.vaccineId = vaccineId;
      setVaccineIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeVaccine_args(removeVaccine_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.centreId = other.centreId;
      this.vaccineId = other.vaccineId;
    }

    public removeVaccine_args deepCopy() {
      return new removeVaccine_args(this);
    }

    @Override
    public void clear() {
      setCentreIdIsSet(false);
      this.centreId = 0;
      setVaccineIdIsSet(false);
      this.vaccineId = 0;
    }

    public int getCentreId() {
      return this.centreId;
    }

    public removeVaccine_args setCentreId(int centreId) {
      this.centreId = centreId;
      setCentreIdIsSet(true);
      return this;
    }

    public void unsetCentreId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CENTREID_ISSET_ID);
    }

    /** Returns true if field centreId is set (has been assigned a value) and false otherwise */
    public boolean isSetCentreId() {
      return EncodingUtils.testBit(__isset_bitfield, __CENTREID_ISSET_ID);
    }

    public void setCentreIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CENTREID_ISSET_ID, value);
    }

    public int getVaccineId() {
      return this.vaccineId;
    }

    public removeVaccine_args setVaccineId(int vaccineId) {
      this.vaccineId = vaccineId;
      setVaccineIdIsSet(true);
      return this;
    }

    public void unsetVaccineId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VACCINEID_ISSET_ID);
    }

    /** Returns true if field vaccineId is set (has been assigned a value) and false otherwise */
    public boolean isSetVaccineId() {
      return EncodingUtils.testBit(__isset_bitfield, __VACCINEID_ISSET_ID);
    }

    public void setVaccineIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VACCINEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CENTRE_ID:
        if (value == null) {
          unsetCentreId();
        } else {
          setCentreId((Integer)value);
        }
        break;

      case VACCINE_ID:
        if (value == null) {
          unsetVaccineId();
        } else {
          setVaccineId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CENTRE_ID:
        return Integer.valueOf(getCentreId());

      case VACCINE_ID:
        return Integer.valueOf(getVaccineId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CENTRE_ID:
        return isSetCentreId();
      case VACCINE_ID:
        return isSetVaccineId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeVaccine_args)
        return this.equals((removeVaccine_args)that);
      return false;
    }

    public boolean equals(removeVaccine_args that) {
      if (that == null)
        return false;

      boolean this_present_centreId = true;
      boolean that_present_centreId = true;
      if (this_present_centreId || that_present_centreId) {
        if (!(this_present_centreId && that_present_centreId))
          return false;
        if (this.centreId != that.centreId)
          return false;
      }

      boolean this_present_vaccineId = true;
      boolean that_present_vaccineId = true;
      if (this_present_vaccineId || that_present_vaccineId) {
        if (!(this_present_vaccineId && that_present_vaccineId))
          return false;
        if (this.vaccineId != that.vaccineId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeVaccine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCentreId()).compareTo(other.isSetCentreId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCentreId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.centreId, other.centreId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVaccineId()).compareTo(other.isSetVaccineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVaccineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vaccineId, other.vaccineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeVaccine_args(");
      boolean first = true;

      sb.append("centreId:");
      sb.append(this.centreId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vaccineId:");
      sb.append(this.vaccineId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeVaccine_argsStandardSchemeFactory implements SchemeFactory {
      public removeVaccine_argsStandardScheme getScheme() {
        return new removeVaccine_argsStandardScheme();
      }
    }

    private static class removeVaccine_argsStandardScheme extends StandardScheme<removeVaccine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeVaccine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CENTRE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.centreId = iprot.readI32();
                struct.setCentreIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VACCINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vaccineId = iprot.readI32();
                struct.setVaccineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeVaccine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CENTRE_ID_FIELD_DESC);
        oprot.writeI32(struct.centreId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VACCINE_ID_FIELD_DESC);
        oprot.writeI32(struct.vaccineId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeVaccine_argsTupleSchemeFactory implements SchemeFactory {
      public removeVaccine_argsTupleScheme getScheme() {
        return new removeVaccine_argsTupleScheme();
      }
    }

    private static class removeVaccine_argsTupleScheme extends TupleScheme<removeVaccine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeVaccine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCentreId()) {
          optionals.set(0);
        }
        if (struct.isSetVaccineId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCentreId()) {
          oprot.writeI32(struct.centreId);
        }
        if (struct.isSetVaccineId()) {
          oprot.writeI32(struct.vaccineId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeVaccine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.centreId = iprot.readI32();
          struct.setCentreIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vaccineId = iprot.readI32();
          struct.setVaccineIdIsSet(true);
        }
      }
    }

  }

  public static class removeVaccine_result implements org.apache.thrift.TBase<removeVaccine_result, removeVaccine_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeVaccine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeVaccine_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeVaccine_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeVaccine_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TError success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TError.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeVaccine_result.class, metaDataMap);
    }

    public removeVaccine_result() {
    }

    public removeVaccine_result(
      crdhn.vr.thrift.response.TError success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeVaccine_result(removeVaccine_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TError(other.success);
      }
    }

    public removeVaccine_result deepCopy() {
      return new removeVaccine_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TError getSuccess() {
      return this.success;
    }

    public removeVaccine_result setSuccess(crdhn.vr.thrift.response.TError success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeVaccine_result)
        return this.equals((removeVaccine_result)that);
      return false;
    }

    public boolean equals(removeVaccine_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeVaccine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeVaccine_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeVaccine_resultStandardSchemeFactory implements SchemeFactory {
      public removeVaccine_resultStandardScheme getScheme() {
        return new removeVaccine_resultStandardScheme();
      }
    }

    private static class removeVaccine_resultStandardScheme extends StandardScheme<removeVaccine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeVaccine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TError();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeVaccine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeVaccine_resultTupleSchemeFactory implements SchemeFactory {
      public removeVaccine_resultTupleScheme getScheme() {
        return new removeVaccine_resultTupleScheme();
      }
    }

    private static class removeVaccine_resultTupleScheme extends TupleScheme<removeVaccine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeVaccine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeVaccine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TError();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVaccines_args implements org.apache.thrift.TBase<getVaccines_args, getVaccines_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVaccines_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVaccines_args");

    private static final org.apache.thrift.protocol.TField CENTRE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("centreId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVaccines_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVaccines_argsTupleSchemeFactory());
    }

    public int centreId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CENTRE_ID((short)1, "centreId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CENTRE_ID
            return CENTRE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CENTREID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CENTRE_ID, new org.apache.thrift.meta_data.FieldMetaData("centreId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TCID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVaccines_args.class, metaDataMap);
    }

    public getVaccines_args() {
    }

    public getVaccines_args(
      int centreId)
    {
      this();
      this.centreId = centreId;
      setCentreIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVaccines_args(getVaccines_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.centreId = other.centreId;
    }

    public getVaccines_args deepCopy() {
      return new getVaccines_args(this);
    }

    @Override
    public void clear() {
      setCentreIdIsSet(false);
      this.centreId = 0;
    }

    public int getCentreId() {
      return this.centreId;
    }

    public getVaccines_args setCentreId(int centreId) {
      this.centreId = centreId;
      setCentreIdIsSet(true);
      return this;
    }

    public void unsetCentreId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CENTREID_ISSET_ID);
    }

    /** Returns true if field centreId is set (has been assigned a value) and false otherwise */
    public boolean isSetCentreId() {
      return EncodingUtils.testBit(__isset_bitfield, __CENTREID_ISSET_ID);
    }

    public void setCentreIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CENTREID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CENTRE_ID:
        if (value == null) {
          unsetCentreId();
        } else {
          setCentreId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CENTRE_ID:
        return Integer.valueOf(getCentreId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CENTRE_ID:
        return isSetCentreId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVaccines_args)
        return this.equals((getVaccines_args)that);
      return false;
    }

    public boolean equals(getVaccines_args that) {
      if (that == null)
        return false;

      boolean this_present_centreId = true;
      boolean that_present_centreId = true;
      if (this_present_centreId || that_present_centreId) {
        if (!(this_present_centreId && that_present_centreId))
          return false;
        if (this.centreId != that.centreId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getVaccines_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCentreId()).compareTo(other.isSetCentreId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCentreId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.centreId, other.centreId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVaccines_args(");
      boolean first = true;

      sb.append("centreId:");
      sb.append(this.centreId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVaccines_argsStandardSchemeFactory implements SchemeFactory {
      public getVaccines_argsStandardScheme getScheme() {
        return new getVaccines_argsStandardScheme();
      }
    }

    private static class getVaccines_argsStandardScheme extends StandardScheme<getVaccines_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVaccines_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CENTRE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.centreId = iprot.readI32();
                struct.setCentreIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVaccines_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CENTRE_ID_FIELD_DESC);
        oprot.writeI32(struct.centreId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVaccines_argsTupleSchemeFactory implements SchemeFactory {
      public getVaccines_argsTupleScheme getScheme() {
        return new getVaccines_argsTupleScheme();
      }
    }

    private static class getVaccines_argsTupleScheme extends TupleScheme<getVaccines_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVaccines_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCentreId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCentreId()) {
          oprot.writeI32(struct.centreId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVaccines_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.centreId = iprot.readI32();
          struct.setCentreIdIsSet(true);
        }
      }
    }

  }

  public static class getVaccines_result implements org.apache.thrift.TBase<getVaccines_result, getVaccines_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVaccines_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVaccines_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVaccines_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVaccines_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TCMGetVaccinesResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TCMGetVaccinesResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVaccines_result.class, metaDataMap);
    }

    public getVaccines_result() {
    }

    public getVaccines_result(
      crdhn.vr.thrift.response.TCMGetVaccinesResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVaccines_result(getVaccines_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TCMGetVaccinesResponse(other.success);
      }
    }

    public getVaccines_result deepCopy() {
      return new getVaccines_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TCMGetVaccinesResponse getSuccess() {
      return this.success;
    }

    public getVaccines_result setSuccess(crdhn.vr.thrift.response.TCMGetVaccinesResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TCMGetVaccinesResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVaccines_result)
        return this.equals((getVaccines_result)that);
      return false;
    }

    public boolean equals(getVaccines_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getVaccines_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVaccines_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVaccines_resultStandardSchemeFactory implements SchemeFactory {
      public getVaccines_resultStandardScheme getScheme() {
        return new getVaccines_resultStandardScheme();
      }
    }

    private static class getVaccines_resultStandardScheme extends StandardScheme<getVaccines_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVaccines_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TCMGetVaccinesResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVaccines_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVaccines_resultTupleSchemeFactory implements SchemeFactory {
      public getVaccines_resultTupleScheme getScheme() {
        return new getVaccines_resultTupleScheme();
      }
    }

    private static class getVaccines_resultTupleScheme extends TupleScheme<getVaccines_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVaccines_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVaccines_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TCMGetVaccinesResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
