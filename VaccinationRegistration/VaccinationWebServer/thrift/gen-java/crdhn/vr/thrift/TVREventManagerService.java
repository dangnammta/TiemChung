/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package crdhn.vr.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TVREventManagerService {

  public interface Iface {

    public crdhn.vr.thrift.response.TVMCreateEventResponse createEvent(crdhn.vr.thrift.data.TEventInfo eventInfo) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TError updateEventInfo(int eventId, crdhn.vr.thrift.data.TEventInfo eventInfo) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TVMGetEventInfoResponse getEventInfo(int eventId) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TError removeEvent(int eventId) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TVMGetEventsResponse getEvents(int centreId) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TError updateRegistration(long registrationId, crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TError removeRegistration(long registrationId) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TVMGetRegistrationResponse getRegistration(long registrationId) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TVMGetRegistrationsResponse getRegistrations(int eventId) throws org.apache.thrift.TException;

    public crdhn.vr.thrift.response.TError updateInjectionStatus(long registrationId, int injectionStatus) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createEvent(crdhn.vr.thrift.data.TEventInfo eventInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateEventInfo(int eventId, crdhn.vr.thrift.data.TEventInfo eventInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEventInfo(int eventId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeEvent(int eventId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEvents(int centreId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateRegistration(long registrationId, crdhn.vr.thrift.data.TRegistrationInfo registrationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeRegistration(long registrationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRegistration(long registrationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRegistrations(int eventId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateInjectionStatus(long registrationId, int injectionStatus, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public crdhn.vr.thrift.response.TVMCreateEventResponse createEvent(crdhn.vr.thrift.data.TEventInfo eventInfo) throws org.apache.thrift.TException
    {
      send_createEvent(eventInfo);
      return recv_createEvent();
    }

    public void send_createEvent(crdhn.vr.thrift.data.TEventInfo eventInfo) throws org.apache.thrift.TException
    {
      createEvent_args args = new createEvent_args();
      args.setEventInfo(eventInfo);
      sendBase("createEvent", args);
    }

    public crdhn.vr.thrift.response.TVMCreateEventResponse recv_createEvent() throws org.apache.thrift.TException
    {
      createEvent_result result = new createEvent_result();
      receiveBase(result, "createEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createEvent failed: unknown result");
    }

    public crdhn.vr.thrift.response.TError updateEventInfo(int eventId, crdhn.vr.thrift.data.TEventInfo eventInfo) throws org.apache.thrift.TException
    {
      send_updateEventInfo(eventId, eventInfo);
      return recv_updateEventInfo();
    }

    public void send_updateEventInfo(int eventId, crdhn.vr.thrift.data.TEventInfo eventInfo) throws org.apache.thrift.TException
    {
      updateEventInfo_args args = new updateEventInfo_args();
      args.setEventId(eventId);
      args.setEventInfo(eventInfo);
      sendBase("updateEventInfo", args);
    }

    public crdhn.vr.thrift.response.TError recv_updateEventInfo() throws org.apache.thrift.TException
    {
      updateEventInfo_result result = new updateEventInfo_result();
      receiveBase(result, "updateEventInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateEventInfo failed: unknown result");
    }

    public crdhn.vr.thrift.response.TVMGetEventInfoResponse getEventInfo(int eventId) throws org.apache.thrift.TException
    {
      send_getEventInfo(eventId);
      return recv_getEventInfo();
    }

    public void send_getEventInfo(int eventId) throws org.apache.thrift.TException
    {
      getEventInfo_args args = new getEventInfo_args();
      args.setEventId(eventId);
      sendBase("getEventInfo", args);
    }

    public crdhn.vr.thrift.response.TVMGetEventInfoResponse recv_getEventInfo() throws org.apache.thrift.TException
    {
      getEventInfo_result result = new getEventInfo_result();
      receiveBase(result, "getEventInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEventInfo failed: unknown result");
    }

    public crdhn.vr.thrift.response.TError removeEvent(int eventId) throws org.apache.thrift.TException
    {
      send_removeEvent(eventId);
      return recv_removeEvent();
    }

    public void send_removeEvent(int eventId) throws org.apache.thrift.TException
    {
      removeEvent_args args = new removeEvent_args();
      args.setEventId(eventId);
      sendBase("removeEvent", args);
    }

    public crdhn.vr.thrift.response.TError recv_removeEvent() throws org.apache.thrift.TException
    {
      removeEvent_result result = new removeEvent_result();
      receiveBase(result, "removeEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeEvent failed: unknown result");
    }

    public crdhn.vr.thrift.response.TVMGetEventsResponse getEvents(int centreId) throws org.apache.thrift.TException
    {
      send_getEvents(centreId);
      return recv_getEvents();
    }

    public void send_getEvents(int centreId) throws org.apache.thrift.TException
    {
      getEvents_args args = new getEvents_args();
      args.setCentreId(centreId);
      sendBase("getEvents", args);
    }

    public crdhn.vr.thrift.response.TVMGetEventsResponse recv_getEvents() throws org.apache.thrift.TException
    {
      getEvents_result result = new getEvents_result();
      receiveBase(result, "getEvents");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEvents failed: unknown result");
    }

    public crdhn.vr.thrift.response.TError updateRegistration(long registrationId, crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) throws org.apache.thrift.TException
    {
      send_updateRegistration(registrationId, registrationInfo);
      return recv_updateRegistration();
    }

    public void send_updateRegistration(long registrationId, crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) throws org.apache.thrift.TException
    {
      updateRegistration_args args = new updateRegistration_args();
      args.setRegistrationId(registrationId);
      args.setRegistrationInfo(registrationInfo);
      sendBase("updateRegistration", args);
    }

    public crdhn.vr.thrift.response.TError recv_updateRegistration() throws org.apache.thrift.TException
    {
      updateRegistration_result result = new updateRegistration_result();
      receiveBase(result, "updateRegistration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateRegistration failed: unknown result");
    }

    public crdhn.vr.thrift.response.TError removeRegistration(long registrationId) throws org.apache.thrift.TException
    {
      send_removeRegistration(registrationId);
      return recv_removeRegistration();
    }

    public void send_removeRegistration(long registrationId) throws org.apache.thrift.TException
    {
      removeRegistration_args args = new removeRegistration_args();
      args.setRegistrationId(registrationId);
      sendBase("removeRegistration", args);
    }

    public crdhn.vr.thrift.response.TError recv_removeRegistration() throws org.apache.thrift.TException
    {
      removeRegistration_result result = new removeRegistration_result();
      receiveBase(result, "removeRegistration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeRegistration failed: unknown result");
    }

    public crdhn.vr.thrift.response.TVMGetRegistrationResponse getRegistration(long registrationId) throws org.apache.thrift.TException
    {
      send_getRegistration(registrationId);
      return recv_getRegistration();
    }

    public void send_getRegistration(long registrationId) throws org.apache.thrift.TException
    {
      getRegistration_args args = new getRegistration_args();
      args.setRegistrationId(registrationId);
      sendBase("getRegistration", args);
    }

    public crdhn.vr.thrift.response.TVMGetRegistrationResponse recv_getRegistration() throws org.apache.thrift.TException
    {
      getRegistration_result result = new getRegistration_result();
      receiveBase(result, "getRegistration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRegistration failed: unknown result");
    }

    public crdhn.vr.thrift.response.TVMGetRegistrationsResponse getRegistrations(int eventId) throws org.apache.thrift.TException
    {
      send_getRegistrations(eventId);
      return recv_getRegistrations();
    }

    public void send_getRegistrations(int eventId) throws org.apache.thrift.TException
    {
      getRegistrations_args args = new getRegistrations_args();
      args.setEventId(eventId);
      sendBase("getRegistrations", args);
    }

    public crdhn.vr.thrift.response.TVMGetRegistrationsResponse recv_getRegistrations() throws org.apache.thrift.TException
    {
      getRegistrations_result result = new getRegistrations_result();
      receiveBase(result, "getRegistrations");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRegistrations failed: unknown result");
    }

    public crdhn.vr.thrift.response.TError updateInjectionStatus(long registrationId, int injectionStatus) throws org.apache.thrift.TException
    {
      send_updateInjectionStatus(registrationId, injectionStatus);
      return recv_updateInjectionStatus();
    }

    public void send_updateInjectionStatus(long registrationId, int injectionStatus) throws org.apache.thrift.TException
    {
      updateInjectionStatus_args args = new updateInjectionStatus_args();
      args.setRegistrationId(registrationId);
      args.setInjectionStatus(injectionStatus);
      sendBase("updateInjectionStatus", args);
    }

    public crdhn.vr.thrift.response.TError recv_updateInjectionStatus() throws org.apache.thrift.TException
    {
      updateInjectionStatus_result result = new updateInjectionStatus_result();
      receiveBase(result, "updateInjectionStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateInjectionStatus failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createEvent(crdhn.vr.thrift.data.TEventInfo eventInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createEvent_call method_call = new createEvent_call(eventInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private crdhn.vr.thrift.data.TEventInfo eventInfo;
      public createEvent_call(crdhn.vr.thrift.data.TEventInfo eventInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventInfo = eventInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createEvent_args args = new createEvent_args();
        args.setEventInfo(eventInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TVMCreateEventResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createEvent();
      }
    }

    public void updateEventInfo(int eventId, crdhn.vr.thrift.data.TEventInfo eventInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateEventInfo_call method_call = new updateEventInfo_call(eventId, eventInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateEventInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int eventId;
      private crdhn.vr.thrift.data.TEventInfo eventInfo;
      public updateEventInfo_call(int eventId, crdhn.vr.thrift.data.TEventInfo eventInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventId = eventId;
        this.eventInfo = eventInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateEventInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateEventInfo_args args = new updateEventInfo_args();
        args.setEventId(eventId);
        args.setEventInfo(eventInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TError getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateEventInfo();
      }
    }

    public void getEventInfo(int eventId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEventInfo_call method_call = new getEventInfo_call(eventId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEventInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int eventId;
      public getEventInfo_call(int eventId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventId = eventId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEventInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEventInfo_args args = new getEventInfo_args();
        args.setEventId(eventId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TVMGetEventInfoResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEventInfo();
      }
    }

    public void removeEvent(int eventId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeEvent_call method_call = new removeEvent_call(eventId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int eventId;
      public removeEvent_call(int eventId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventId = eventId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeEvent_args args = new removeEvent_args();
        args.setEventId(eventId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TError getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeEvent();
      }
    }

    public void getEvents(int centreId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEvents_call method_call = new getEvents_call(centreId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEvents_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int centreId;
      public getEvents_call(int centreId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.centreId = centreId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEvents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEvents_args args = new getEvents_args();
        args.setCentreId(centreId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TVMGetEventsResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEvents();
      }
    }

    public void updateRegistration(long registrationId, crdhn.vr.thrift.data.TRegistrationInfo registrationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRegistration_call method_call = new updateRegistration_call(registrationId, registrationInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRegistration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long registrationId;
      private crdhn.vr.thrift.data.TRegistrationInfo registrationInfo;
      public updateRegistration_call(long registrationId, crdhn.vr.thrift.data.TRegistrationInfo registrationInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.registrationId = registrationId;
        this.registrationInfo = registrationInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRegistration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRegistration_args args = new updateRegistration_args();
        args.setRegistrationId(registrationId);
        args.setRegistrationInfo(registrationInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TError getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateRegistration();
      }
    }

    public void removeRegistration(long registrationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeRegistration_call method_call = new removeRegistration_call(registrationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeRegistration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long registrationId;
      public removeRegistration_call(long registrationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.registrationId = registrationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeRegistration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeRegistration_args args = new removeRegistration_args();
        args.setRegistrationId(registrationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TError getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeRegistration();
      }
    }

    public void getRegistration(long registrationId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRegistration_call method_call = new getRegistration_call(registrationId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRegistration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long registrationId;
      public getRegistration_call(long registrationId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.registrationId = registrationId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRegistration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRegistration_args args = new getRegistration_args();
        args.setRegistrationId(registrationId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TVMGetRegistrationResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRegistration();
      }
    }

    public void getRegistrations(int eventId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRegistrations_call method_call = new getRegistrations_call(eventId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRegistrations_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int eventId;
      public getRegistrations_call(int eventId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventId = eventId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRegistrations", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRegistrations_args args = new getRegistrations_args();
        args.setEventId(eventId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TVMGetRegistrationsResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRegistrations();
      }
    }

    public void updateInjectionStatus(long registrationId, int injectionStatus, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateInjectionStatus_call method_call = new updateInjectionStatus_call(registrationId, injectionStatus, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateInjectionStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long registrationId;
      private int injectionStatus;
      public updateInjectionStatus_call(long registrationId, int injectionStatus, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.registrationId = registrationId;
        this.injectionStatus = injectionStatus;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateInjectionStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateInjectionStatus_args args = new updateInjectionStatus_args();
        args.setRegistrationId(registrationId);
        args.setInjectionStatus(injectionStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public crdhn.vr.thrift.response.TError getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateInjectionStatus();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createEvent", new createEvent());
      processMap.put("updateEventInfo", new updateEventInfo());
      processMap.put("getEventInfo", new getEventInfo());
      processMap.put("removeEvent", new removeEvent());
      processMap.put("getEvents", new getEvents());
      processMap.put("updateRegistration", new updateRegistration());
      processMap.put("removeRegistration", new removeRegistration());
      processMap.put("getRegistration", new getRegistration());
      processMap.put("getRegistrations", new getRegistrations());
      processMap.put("updateInjectionStatus", new updateInjectionStatus());
      return processMap;
    }

    public static class createEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createEvent_args> {
      public createEvent() {
        super("createEvent");
      }

      public createEvent_args getEmptyArgsInstance() {
        return new createEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createEvent_result getResult(I iface, createEvent_args args) throws org.apache.thrift.TException {
        createEvent_result result = new createEvent_result();
        result.success = iface.createEvent(args.eventInfo);
        return result;
      }
    }

    public static class updateEventInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateEventInfo_args> {
      public updateEventInfo() {
        super("updateEventInfo");
      }

      public updateEventInfo_args getEmptyArgsInstance() {
        return new updateEventInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateEventInfo_result getResult(I iface, updateEventInfo_args args) throws org.apache.thrift.TException {
        updateEventInfo_result result = new updateEventInfo_result();
        result.success = iface.updateEventInfo(args.eventId, args.eventInfo);
        return result;
      }
    }

    public static class getEventInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEventInfo_args> {
      public getEventInfo() {
        super("getEventInfo");
      }

      public getEventInfo_args getEmptyArgsInstance() {
        return new getEventInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEventInfo_result getResult(I iface, getEventInfo_args args) throws org.apache.thrift.TException {
        getEventInfo_result result = new getEventInfo_result();
        result.success = iface.getEventInfo(args.eventId);
        return result;
      }
    }

    public static class removeEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeEvent_args> {
      public removeEvent() {
        super("removeEvent");
      }

      public removeEvent_args getEmptyArgsInstance() {
        return new removeEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeEvent_result getResult(I iface, removeEvent_args args) throws org.apache.thrift.TException {
        removeEvent_result result = new removeEvent_result();
        result.success = iface.removeEvent(args.eventId);
        return result;
      }
    }

    public static class getEvents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEvents_args> {
      public getEvents() {
        super("getEvents");
      }

      public getEvents_args getEmptyArgsInstance() {
        return new getEvents_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEvents_result getResult(I iface, getEvents_args args) throws org.apache.thrift.TException {
        getEvents_result result = new getEvents_result();
        result.success = iface.getEvents(args.centreId);
        return result;
      }
    }

    public static class updateRegistration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRegistration_args> {
      public updateRegistration() {
        super("updateRegistration");
      }

      public updateRegistration_args getEmptyArgsInstance() {
        return new updateRegistration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRegistration_result getResult(I iface, updateRegistration_args args) throws org.apache.thrift.TException {
        updateRegistration_result result = new updateRegistration_result();
        result.success = iface.updateRegistration(args.registrationId, args.registrationInfo);
        return result;
      }
    }

    public static class removeRegistration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeRegistration_args> {
      public removeRegistration() {
        super("removeRegistration");
      }

      public removeRegistration_args getEmptyArgsInstance() {
        return new removeRegistration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeRegistration_result getResult(I iface, removeRegistration_args args) throws org.apache.thrift.TException {
        removeRegistration_result result = new removeRegistration_result();
        result.success = iface.removeRegistration(args.registrationId);
        return result;
      }
    }

    public static class getRegistration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRegistration_args> {
      public getRegistration() {
        super("getRegistration");
      }

      public getRegistration_args getEmptyArgsInstance() {
        return new getRegistration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRegistration_result getResult(I iface, getRegistration_args args) throws org.apache.thrift.TException {
        getRegistration_result result = new getRegistration_result();
        result.success = iface.getRegistration(args.registrationId);
        return result;
      }
    }

    public static class getRegistrations<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRegistrations_args> {
      public getRegistrations() {
        super("getRegistrations");
      }

      public getRegistrations_args getEmptyArgsInstance() {
        return new getRegistrations_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRegistrations_result getResult(I iface, getRegistrations_args args) throws org.apache.thrift.TException {
        getRegistrations_result result = new getRegistrations_result();
        result.success = iface.getRegistrations(args.eventId);
        return result;
      }
    }

    public static class updateInjectionStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateInjectionStatus_args> {
      public updateInjectionStatus() {
        super("updateInjectionStatus");
      }

      public updateInjectionStatus_args getEmptyArgsInstance() {
        return new updateInjectionStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateInjectionStatus_result getResult(I iface, updateInjectionStatus_args args) throws org.apache.thrift.TException {
        updateInjectionStatus_result result = new updateInjectionStatus_result();
        result.success = iface.updateInjectionStatus(args.registrationId, args.injectionStatus);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createEvent", new createEvent());
      processMap.put("updateEventInfo", new updateEventInfo());
      processMap.put("getEventInfo", new getEventInfo());
      processMap.put("removeEvent", new removeEvent());
      processMap.put("getEvents", new getEvents());
      processMap.put("updateRegistration", new updateRegistration());
      processMap.put("removeRegistration", new removeRegistration());
      processMap.put("getRegistration", new getRegistration());
      processMap.put("getRegistrations", new getRegistrations());
      processMap.put("updateInjectionStatus", new updateInjectionStatus());
      return processMap;
    }

    public static class createEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createEvent_args, crdhn.vr.thrift.response.TVMCreateEventResponse> {
      public createEvent() {
        super("createEvent");
      }

      public createEvent_args getEmptyArgsInstance() {
        return new createEvent_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TVMCreateEventResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TVMCreateEventResponse>() { 
          public void onComplete(crdhn.vr.thrift.response.TVMCreateEventResponse o) {
            createEvent_result result = new createEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createEvent_result result = new createEvent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createEvent_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TVMCreateEventResponse> resultHandler) throws TException {
        iface.createEvent(args.eventInfo,resultHandler);
      }
    }

    public static class updateEventInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateEventInfo_args, crdhn.vr.thrift.response.TError> {
      public updateEventInfo() {
        super("updateEventInfo");
      }

      public updateEventInfo_args getEmptyArgsInstance() {
        return new updateEventInfo_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TError> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TError>() { 
          public void onComplete(crdhn.vr.thrift.response.TError o) {
            updateEventInfo_result result = new updateEventInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateEventInfo_result result = new updateEventInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateEventInfo_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TError> resultHandler) throws TException {
        iface.updateEventInfo(args.eventId, args.eventInfo,resultHandler);
      }
    }

    public static class getEventInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEventInfo_args, crdhn.vr.thrift.response.TVMGetEventInfoResponse> {
      public getEventInfo() {
        super("getEventInfo");
      }

      public getEventInfo_args getEmptyArgsInstance() {
        return new getEventInfo_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TVMGetEventInfoResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TVMGetEventInfoResponse>() { 
          public void onComplete(crdhn.vr.thrift.response.TVMGetEventInfoResponse o) {
            getEventInfo_result result = new getEventInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEventInfo_result result = new getEventInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEventInfo_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TVMGetEventInfoResponse> resultHandler) throws TException {
        iface.getEventInfo(args.eventId,resultHandler);
      }
    }

    public static class removeEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeEvent_args, crdhn.vr.thrift.response.TError> {
      public removeEvent() {
        super("removeEvent");
      }

      public removeEvent_args getEmptyArgsInstance() {
        return new removeEvent_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TError> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TError>() { 
          public void onComplete(crdhn.vr.thrift.response.TError o) {
            removeEvent_result result = new removeEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeEvent_result result = new removeEvent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeEvent_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TError> resultHandler) throws TException {
        iface.removeEvent(args.eventId,resultHandler);
      }
    }

    public static class getEvents<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEvents_args, crdhn.vr.thrift.response.TVMGetEventsResponse> {
      public getEvents() {
        super("getEvents");
      }

      public getEvents_args getEmptyArgsInstance() {
        return new getEvents_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TVMGetEventsResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TVMGetEventsResponse>() { 
          public void onComplete(crdhn.vr.thrift.response.TVMGetEventsResponse o) {
            getEvents_result result = new getEvents_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEvents_result result = new getEvents_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEvents_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TVMGetEventsResponse> resultHandler) throws TException {
        iface.getEvents(args.centreId,resultHandler);
      }
    }

    public static class updateRegistration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateRegistration_args, crdhn.vr.thrift.response.TError> {
      public updateRegistration() {
        super("updateRegistration");
      }

      public updateRegistration_args getEmptyArgsInstance() {
        return new updateRegistration_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TError> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TError>() { 
          public void onComplete(crdhn.vr.thrift.response.TError o) {
            updateRegistration_result result = new updateRegistration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateRegistration_result result = new updateRegistration_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateRegistration_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TError> resultHandler) throws TException {
        iface.updateRegistration(args.registrationId, args.registrationInfo,resultHandler);
      }
    }

    public static class removeRegistration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeRegistration_args, crdhn.vr.thrift.response.TError> {
      public removeRegistration() {
        super("removeRegistration");
      }

      public removeRegistration_args getEmptyArgsInstance() {
        return new removeRegistration_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TError> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TError>() { 
          public void onComplete(crdhn.vr.thrift.response.TError o) {
            removeRegistration_result result = new removeRegistration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeRegistration_result result = new removeRegistration_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeRegistration_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TError> resultHandler) throws TException {
        iface.removeRegistration(args.registrationId,resultHandler);
      }
    }

    public static class getRegistration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRegistration_args, crdhn.vr.thrift.response.TVMGetRegistrationResponse> {
      public getRegistration() {
        super("getRegistration");
      }

      public getRegistration_args getEmptyArgsInstance() {
        return new getRegistration_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TVMGetRegistrationResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TVMGetRegistrationResponse>() { 
          public void onComplete(crdhn.vr.thrift.response.TVMGetRegistrationResponse o) {
            getRegistration_result result = new getRegistration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRegistration_result result = new getRegistration_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRegistration_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TVMGetRegistrationResponse> resultHandler) throws TException {
        iface.getRegistration(args.registrationId,resultHandler);
      }
    }

    public static class getRegistrations<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRegistrations_args, crdhn.vr.thrift.response.TVMGetRegistrationsResponse> {
      public getRegistrations() {
        super("getRegistrations");
      }

      public getRegistrations_args getEmptyArgsInstance() {
        return new getRegistrations_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TVMGetRegistrationsResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TVMGetRegistrationsResponse>() { 
          public void onComplete(crdhn.vr.thrift.response.TVMGetRegistrationsResponse o) {
            getRegistrations_result result = new getRegistrations_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRegistrations_result result = new getRegistrations_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRegistrations_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TVMGetRegistrationsResponse> resultHandler) throws TException {
        iface.getRegistrations(args.eventId,resultHandler);
      }
    }

    public static class updateInjectionStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateInjectionStatus_args, crdhn.vr.thrift.response.TError> {
      public updateInjectionStatus() {
        super("updateInjectionStatus");
      }

      public updateInjectionStatus_args getEmptyArgsInstance() {
        return new updateInjectionStatus_args();
      }

      public AsyncMethodCallback<crdhn.vr.thrift.response.TError> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<crdhn.vr.thrift.response.TError>() { 
          public void onComplete(crdhn.vr.thrift.response.TError o) {
            updateInjectionStatus_result result = new updateInjectionStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateInjectionStatus_result result = new updateInjectionStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateInjectionStatus_args args, org.apache.thrift.async.AsyncMethodCallback<crdhn.vr.thrift.response.TError> resultHandler) throws TException {
        iface.updateInjectionStatus(args.registrationId, args.injectionStatus,resultHandler);
      }
    }

  }

  public static class createEvent_args implements org.apache.thrift.TBase<createEvent_args, createEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<createEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createEvent_args");

    private static final org.apache.thrift.protocol.TField EVENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("eventInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createEvent_argsTupleSchemeFactory());
    }

    public crdhn.vr.thrift.data.TEventInfo eventInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_INFO((short)1, "eventInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_INFO
            return EVENT_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("eventInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.data.TEventInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createEvent_args.class, metaDataMap);
    }

    public createEvent_args() {
    }

    public createEvent_args(
      crdhn.vr.thrift.data.TEventInfo eventInfo)
    {
      this();
      this.eventInfo = eventInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createEvent_args(createEvent_args other) {
      if (other.isSetEventInfo()) {
        this.eventInfo = new crdhn.vr.thrift.data.TEventInfo(other.eventInfo);
      }
    }

    public createEvent_args deepCopy() {
      return new createEvent_args(this);
    }

    @Override
    public void clear() {
      this.eventInfo = null;
    }

    public crdhn.vr.thrift.data.TEventInfo getEventInfo() {
      return this.eventInfo;
    }

    public createEvent_args setEventInfo(crdhn.vr.thrift.data.TEventInfo eventInfo) {
      this.eventInfo = eventInfo;
      return this;
    }

    public void unsetEventInfo() {
      this.eventInfo = null;
    }

    /** Returns true if field eventInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetEventInfo() {
      return this.eventInfo != null;
    }

    public void setEventInfoIsSet(boolean value) {
      if (!value) {
        this.eventInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT_INFO:
        if (value == null) {
          unsetEventInfo();
        } else {
          setEventInfo((crdhn.vr.thrift.data.TEventInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_INFO:
        return getEventInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT_INFO:
        return isSetEventInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createEvent_args)
        return this.equals((createEvent_args)that);
      return false;
    }

    public boolean equals(createEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_eventInfo = true && this.isSetEventInfo();
      boolean that_present_eventInfo = true && that.isSetEventInfo();
      if (this_present_eventInfo || that_present_eventInfo) {
        if (!(this_present_eventInfo && that_present_eventInfo))
          return false;
        if (!this.eventInfo.equals(that.eventInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEventInfo()).compareTo(other.isSetEventInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventInfo, other.eventInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createEvent_args(");
      boolean first = true;

      sb.append("eventInfo:");
      if (this.eventInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.eventInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (eventInfo != null) {
        eventInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createEvent_argsStandardSchemeFactory implements SchemeFactory {
      public createEvent_argsStandardScheme getScheme() {
        return new createEvent_argsStandardScheme();
      }
    }

    private static class createEvent_argsStandardScheme extends StandardScheme<createEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eventInfo = new crdhn.vr.thrift.data.TEventInfo();
                struct.eventInfo.read(iprot);
                struct.setEventInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.eventInfo != null) {
          oprot.writeFieldBegin(EVENT_INFO_FIELD_DESC);
          struct.eventInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createEvent_argsTupleSchemeFactory implements SchemeFactory {
      public createEvent_argsTupleScheme getScheme() {
        return new createEvent_argsTupleScheme();
      }
    }

    private static class createEvent_argsTupleScheme extends TupleScheme<createEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEventInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEventInfo()) {
          struct.eventInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eventInfo = new crdhn.vr.thrift.data.TEventInfo();
          struct.eventInfo.read(iprot);
          struct.setEventInfoIsSet(true);
        }
      }
    }

  }

  public static class createEvent_result implements org.apache.thrift.TBase<createEvent_result, createEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<createEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createEvent_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TVMCreateEventResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TVMCreateEventResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createEvent_result.class, metaDataMap);
    }

    public createEvent_result() {
    }

    public createEvent_result(
      crdhn.vr.thrift.response.TVMCreateEventResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createEvent_result(createEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TVMCreateEventResponse(other.success);
      }
    }

    public createEvent_result deepCopy() {
      return new createEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TVMCreateEventResponse getSuccess() {
      return this.success;
    }

    public createEvent_result setSuccess(crdhn.vr.thrift.response.TVMCreateEventResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TVMCreateEventResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createEvent_result)
        return this.equals((createEvent_result)that);
      return false;
    }

    public boolean equals(createEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createEvent_resultStandardSchemeFactory implements SchemeFactory {
      public createEvent_resultStandardScheme getScheme() {
        return new createEvent_resultStandardScheme();
      }
    }

    private static class createEvent_resultStandardScheme extends StandardScheme<createEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TVMCreateEventResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createEvent_resultTupleSchemeFactory implements SchemeFactory {
      public createEvent_resultTupleScheme getScheme() {
        return new createEvent_resultTupleScheme();
      }
    }

    private static class createEvent_resultTupleScheme extends TupleScheme<createEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TVMCreateEventResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateEventInfo_args implements org.apache.thrift.TBase<updateEventInfo_args, updateEventInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateEventInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEventInfo_args");

    private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField EVENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("eventInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEventInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEventInfo_argsTupleSchemeFactory());
    }

    public int eventId; // required
    public crdhn.vr.thrift.data.TEventInfo eventInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_ID((short)1, "eventId"),
      EVENT_INFO((short)2, "eventInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_ID
            return EVENT_ID;
          case 2: // EVENT_INFO
            return EVENT_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EVENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TEID")));
      tmpMap.put(_Fields.EVENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("eventInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.data.TEventInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEventInfo_args.class, metaDataMap);
    }

    public updateEventInfo_args() {
    }

    public updateEventInfo_args(
      int eventId,
      crdhn.vr.thrift.data.TEventInfo eventInfo)
    {
      this();
      this.eventId = eventId;
      setEventIdIsSet(true);
      this.eventInfo = eventInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEventInfo_args(updateEventInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.eventId = other.eventId;
      if (other.isSetEventInfo()) {
        this.eventInfo = new crdhn.vr.thrift.data.TEventInfo(other.eventInfo);
      }
    }

    public updateEventInfo_args deepCopy() {
      return new updateEventInfo_args(this);
    }

    @Override
    public void clear() {
      setEventIdIsSet(false);
      this.eventId = 0;
      this.eventInfo = null;
    }

    public int getEventId() {
      return this.eventId;
    }

    public updateEventInfo_args setEventId(int eventId) {
      this.eventId = eventId;
      setEventIdIsSet(true);
      return this;
    }

    public void unsetEventId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTID_ISSET_ID);
    }

    /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
    public boolean isSetEventId() {
      return EncodingUtils.testBit(__isset_bitfield, __EVENTID_ISSET_ID);
    }

    public void setEventIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTID_ISSET_ID, value);
    }

    public crdhn.vr.thrift.data.TEventInfo getEventInfo() {
      return this.eventInfo;
    }

    public updateEventInfo_args setEventInfo(crdhn.vr.thrift.data.TEventInfo eventInfo) {
      this.eventInfo = eventInfo;
      return this;
    }

    public void unsetEventInfo() {
      this.eventInfo = null;
    }

    /** Returns true if field eventInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetEventInfo() {
      return this.eventInfo != null;
    }

    public void setEventInfoIsSet(boolean value) {
      if (!value) {
        this.eventInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT_ID:
        if (value == null) {
          unsetEventId();
        } else {
          setEventId((Integer)value);
        }
        break;

      case EVENT_INFO:
        if (value == null) {
          unsetEventInfo();
        } else {
          setEventInfo((crdhn.vr.thrift.data.TEventInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_ID:
        return Integer.valueOf(getEventId());

      case EVENT_INFO:
        return getEventInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT_ID:
        return isSetEventId();
      case EVENT_INFO:
        return isSetEventInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEventInfo_args)
        return this.equals((updateEventInfo_args)that);
      return false;
    }

    public boolean equals(updateEventInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_eventId = true;
      boolean that_present_eventId = true;
      if (this_present_eventId || that_present_eventId) {
        if (!(this_present_eventId && that_present_eventId))
          return false;
        if (this.eventId != that.eventId)
          return false;
      }

      boolean this_present_eventInfo = true && this.isSetEventInfo();
      boolean that_present_eventInfo = true && that.isSetEventInfo();
      if (this_present_eventInfo || that_present_eventInfo) {
        if (!(this_present_eventInfo && that_present_eventInfo))
          return false;
        if (!this.eventInfo.equals(that.eventInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateEventInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEventId()).compareTo(other.isSetEventId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, other.eventId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEventInfo()).compareTo(other.isSetEventInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventInfo, other.eventInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEventInfo_args(");
      boolean first = true;

      sb.append("eventId:");
      sb.append(this.eventId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("eventInfo:");
      if (this.eventInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.eventInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (eventInfo != null) {
        eventInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEventInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateEventInfo_argsStandardScheme getScheme() {
        return new updateEventInfo_argsStandardScheme();
      }
    }

    private static class updateEventInfo_argsStandardScheme extends StandardScheme<updateEventInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEventInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.eventId = iprot.readI32();
                struct.setEventIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EVENT_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eventInfo = new crdhn.vr.thrift.data.TEventInfo();
                struct.eventInfo.read(iprot);
                struct.setEventInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEventInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
        oprot.writeI32(struct.eventId);
        oprot.writeFieldEnd();
        if (struct.eventInfo != null) {
          oprot.writeFieldBegin(EVENT_INFO_FIELD_DESC);
          struct.eventInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEventInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateEventInfo_argsTupleScheme getScheme() {
        return new updateEventInfo_argsTupleScheme();
      }
    }

    private static class updateEventInfo_argsTupleScheme extends TupleScheme<updateEventInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEventInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEventId()) {
          optionals.set(0);
        }
        if (struct.isSetEventInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEventId()) {
          oprot.writeI32(struct.eventId);
        }
        if (struct.isSetEventInfo()) {
          struct.eventInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEventInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.eventId = iprot.readI32();
          struct.setEventIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eventInfo = new crdhn.vr.thrift.data.TEventInfo();
          struct.eventInfo.read(iprot);
          struct.setEventInfoIsSet(true);
        }
      }
    }

  }

  public static class updateEventInfo_result implements org.apache.thrift.TBase<updateEventInfo_result, updateEventInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateEventInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEventInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEventInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEventInfo_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TError success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TError.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEventInfo_result.class, metaDataMap);
    }

    public updateEventInfo_result() {
    }

    public updateEventInfo_result(
      crdhn.vr.thrift.response.TError success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEventInfo_result(updateEventInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TError(other.success);
      }
    }

    public updateEventInfo_result deepCopy() {
      return new updateEventInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TError getSuccess() {
      return this.success;
    }

    public updateEventInfo_result setSuccess(crdhn.vr.thrift.response.TError success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEventInfo_result)
        return this.equals((updateEventInfo_result)that);
      return false;
    }

    public boolean equals(updateEventInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateEventInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEventInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEventInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateEventInfo_resultStandardScheme getScheme() {
        return new updateEventInfo_resultStandardScheme();
      }
    }

    private static class updateEventInfo_resultStandardScheme extends StandardScheme<updateEventInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEventInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TError();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEventInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEventInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateEventInfo_resultTupleScheme getScheme() {
        return new updateEventInfo_resultTupleScheme();
      }
    }

    private static class updateEventInfo_resultTupleScheme extends TupleScheme<updateEventInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEventInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEventInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TError();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEventInfo_args implements org.apache.thrift.TBase<getEventInfo_args, getEventInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEventInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventInfo_args");

    private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventInfo_argsTupleSchemeFactory());
    }

    public int eventId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_ID((short)1, "eventId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_ID
            return EVENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EVENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TEID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventInfo_args.class, metaDataMap);
    }

    public getEventInfo_args() {
    }

    public getEventInfo_args(
      int eventId)
    {
      this();
      this.eventId = eventId;
      setEventIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventInfo_args(getEventInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.eventId = other.eventId;
    }

    public getEventInfo_args deepCopy() {
      return new getEventInfo_args(this);
    }

    @Override
    public void clear() {
      setEventIdIsSet(false);
      this.eventId = 0;
    }

    public int getEventId() {
      return this.eventId;
    }

    public getEventInfo_args setEventId(int eventId) {
      this.eventId = eventId;
      setEventIdIsSet(true);
      return this;
    }

    public void unsetEventId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTID_ISSET_ID);
    }

    /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
    public boolean isSetEventId() {
      return EncodingUtils.testBit(__isset_bitfield, __EVENTID_ISSET_ID);
    }

    public void setEventIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT_ID:
        if (value == null) {
          unsetEventId();
        } else {
          setEventId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_ID:
        return Integer.valueOf(getEventId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT_ID:
        return isSetEventId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventInfo_args)
        return this.equals((getEventInfo_args)that);
      return false;
    }

    public boolean equals(getEventInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_eventId = true;
      boolean that_present_eventId = true;
      if (this_present_eventId || that_present_eventId) {
        if (!(this_present_eventId && that_present_eventId))
          return false;
        if (this.eventId != that.eventId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEventInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEventId()).compareTo(other.isSetEventId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, other.eventId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventInfo_args(");
      boolean first = true;

      sb.append("eventId:");
      sb.append(this.eventId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getEventInfo_argsStandardScheme getScheme() {
        return new getEventInfo_argsStandardScheme();
      }
    }

    private static class getEventInfo_argsStandardScheme extends StandardScheme<getEventInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.eventId = iprot.readI32();
                struct.setEventIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
        oprot.writeI32(struct.eventId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getEventInfo_argsTupleScheme getScheme() {
        return new getEventInfo_argsTupleScheme();
      }
    }

    private static class getEventInfo_argsTupleScheme extends TupleScheme<getEventInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEventId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEventId()) {
          oprot.writeI32(struct.eventId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eventId = iprot.readI32();
          struct.setEventIdIsSet(true);
        }
      }
    }

  }

  public static class getEventInfo_result implements org.apache.thrift.TBase<getEventInfo_result, getEventInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEventInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventInfo_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TVMGetEventInfoResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TVMGetEventInfoResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventInfo_result.class, metaDataMap);
    }

    public getEventInfo_result() {
    }

    public getEventInfo_result(
      crdhn.vr.thrift.response.TVMGetEventInfoResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventInfo_result(getEventInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TVMGetEventInfoResponse(other.success);
      }
    }

    public getEventInfo_result deepCopy() {
      return new getEventInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TVMGetEventInfoResponse getSuccess() {
      return this.success;
    }

    public getEventInfo_result setSuccess(crdhn.vr.thrift.response.TVMGetEventInfoResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TVMGetEventInfoResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventInfo_result)
        return this.equals((getEventInfo_result)that);
      return false;
    }

    public boolean equals(getEventInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEventInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getEventInfo_resultStandardScheme getScheme() {
        return new getEventInfo_resultStandardScheme();
      }
    }

    private static class getEventInfo_resultStandardScheme extends StandardScheme<getEventInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TVMGetEventInfoResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getEventInfo_resultTupleScheme getScheme() {
        return new getEventInfo_resultTupleScheme();
      }
    }

    private static class getEventInfo_resultTupleScheme extends TupleScheme<getEventInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TVMGetEventInfoResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeEvent_args implements org.apache.thrift.TBase<removeEvent_args, removeEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeEvent_args");

    private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeEvent_argsTupleSchemeFactory());
    }

    public int eventId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_ID((short)1, "eventId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_ID
            return EVENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EVENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TEID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeEvent_args.class, metaDataMap);
    }

    public removeEvent_args() {
    }

    public removeEvent_args(
      int eventId)
    {
      this();
      this.eventId = eventId;
      setEventIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeEvent_args(removeEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.eventId = other.eventId;
    }

    public removeEvent_args deepCopy() {
      return new removeEvent_args(this);
    }

    @Override
    public void clear() {
      setEventIdIsSet(false);
      this.eventId = 0;
    }

    public int getEventId() {
      return this.eventId;
    }

    public removeEvent_args setEventId(int eventId) {
      this.eventId = eventId;
      setEventIdIsSet(true);
      return this;
    }

    public void unsetEventId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTID_ISSET_ID);
    }

    /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
    public boolean isSetEventId() {
      return EncodingUtils.testBit(__isset_bitfield, __EVENTID_ISSET_ID);
    }

    public void setEventIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT_ID:
        if (value == null) {
          unsetEventId();
        } else {
          setEventId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_ID:
        return Integer.valueOf(getEventId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT_ID:
        return isSetEventId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeEvent_args)
        return this.equals((removeEvent_args)that);
      return false;
    }

    public boolean equals(removeEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_eventId = true;
      boolean that_present_eventId = true;
      if (this_present_eventId || that_present_eventId) {
        if (!(this_present_eventId && that_present_eventId))
          return false;
        if (this.eventId != that.eventId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEventId()).compareTo(other.isSetEventId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, other.eventId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeEvent_args(");
      boolean first = true;

      sb.append("eventId:");
      sb.append(this.eventId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeEvent_argsStandardSchemeFactory implements SchemeFactory {
      public removeEvent_argsStandardScheme getScheme() {
        return new removeEvent_argsStandardScheme();
      }
    }

    private static class removeEvent_argsStandardScheme extends StandardScheme<removeEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.eventId = iprot.readI32();
                struct.setEventIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
        oprot.writeI32(struct.eventId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeEvent_argsTupleSchemeFactory implements SchemeFactory {
      public removeEvent_argsTupleScheme getScheme() {
        return new removeEvent_argsTupleScheme();
      }
    }

    private static class removeEvent_argsTupleScheme extends TupleScheme<removeEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEventId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEventId()) {
          oprot.writeI32(struct.eventId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eventId = iprot.readI32();
          struct.setEventIdIsSet(true);
        }
      }
    }

  }

  public static class removeEvent_result implements org.apache.thrift.TBase<removeEvent_result, removeEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeEvent_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TError success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TError.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeEvent_result.class, metaDataMap);
    }

    public removeEvent_result() {
    }

    public removeEvent_result(
      crdhn.vr.thrift.response.TError success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeEvent_result(removeEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TError(other.success);
      }
    }

    public removeEvent_result deepCopy() {
      return new removeEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TError getSuccess() {
      return this.success;
    }

    public removeEvent_result setSuccess(crdhn.vr.thrift.response.TError success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeEvent_result)
        return this.equals((removeEvent_result)that);
      return false;
    }

    public boolean equals(removeEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeEvent_resultStandardSchemeFactory implements SchemeFactory {
      public removeEvent_resultStandardScheme getScheme() {
        return new removeEvent_resultStandardScheme();
      }
    }

    private static class removeEvent_resultStandardScheme extends StandardScheme<removeEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TError();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeEvent_resultTupleSchemeFactory implements SchemeFactory {
      public removeEvent_resultTupleScheme getScheme() {
        return new removeEvent_resultTupleScheme();
      }
    }

    private static class removeEvent_resultTupleScheme extends TupleScheme<removeEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TError();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEvents_args implements org.apache.thrift.TBase<getEvents_args, getEvents_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEvents_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEvents_args");

    private static final org.apache.thrift.protocol.TField CENTRE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("centreId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEvents_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEvents_argsTupleSchemeFactory());
    }

    public int centreId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CENTRE_ID((short)1, "centreId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CENTRE_ID
            return CENTRE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CENTREID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CENTRE_ID, new org.apache.thrift.meta_data.FieldMetaData("centreId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TCID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEvents_args.class, metaDataMap);
    }

    public getEvents_args() {
    }

    public getEvents_args(
      int centreId)
    {
      this();
      this.centreId = centreId;
      setCentreIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEvents_args(getEvents_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.centreId = other.centreId;
    }

    public getEvents_args deepCopy() {
      return new getEvents_args(this);
    }

    @Override
    public void clear() {
      setCentreIdIsSet(false);
      this.centreId = 0;
    }

    public int getCentreId() {
      return this.centreId;
    }

    public getEvents_args setCentreId(int centreId) {
      this.centreId = centreId;
      setCentreIdIsSet(true);
      return this;
    }

    public void unsetCentreId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CENTREID_ISSET_ID);
    }

    /** Returns true if field centreId is set (has been assigned a value) and false otherwise */
    public boolean isSetCentreId() {
      return EncodingUtils.testBit(__isset_bitfield, __CENTREID_ISSET_ID);
    }

    public void setCentreIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CENTREID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CENTRE_ID:
        if (value == null) {
          unsetCentreId();
        } else {
          setCentreId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CENTRE_ID:
        return Integer.valueOf(getCentreId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CENTRE_ID:
        return isSetCentreId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEvents_args)
        return this.equals((getEvents_args)that);
      return false;
    }

    public boolean equals(getEvents_args that) {
      if (that == null)
        return false;

      boolean this_present_centreId = true;
      boolean that_present_centreId = true;
      if (this_present_centreId || that_present_centreId) {
        if (!(this_present_centreId && that_present_centreId))
          return false;
        if (this.centreId != that.centreId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEvents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCentreId()).compareTo(other.isSetCentreId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCentreId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.centreId, other.centreId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEvents_args(");
      boolean first = true;

      sb.append("centreId:");
      sb.append(this.centreId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEvents_argsStandardSchemeFactory implements SchemeFactory {
      public getEvents_argsStandardScheme getScheme() {
        return new getEvents_argsStandardScheme();
      }
    }

    private static class getEvents_argsStandardScheme extends StandardScheme<getEvents_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CENTRE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.centreId = iprot.readI32();
                struct.setCentreIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEvents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CENTRE_ID_FIELD_DESC);
        oprot.writeI32(struct.centreId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEvents_argsTupleSchemeFactory implements SchemeFactory {
      public getEvents_argsTupleScheme getScheme() {
        return new getEvents_argsTupleScheme();
      }
    }

    private static class getEvents_argsTupleScheme extends TupleScheme<getEvents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEvents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCentreId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCentreId()) {
          oprot.writeI32(struct.centreId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEvents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.centreId = iprot.readI32();
          struct.setCentreIdIsSet(true);
        }
      }
    }

  }

  public static class getEvents_result implements org.apache.thrift.TBase<getEvents_result, getEvents_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEvents_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEvents_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEvents_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEvents_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TVMGetEventsResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TVMGetEventsResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEvents_result.class, metaDataMap);
    }

    public getEvents_result() {
    }

    public getEvents_result(
      crdhn.vr.thrift.response.TVMGetEventsResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEvents_result(getEvents_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TVMGetEventsResponse(other.success);
      }
    }

    public getEvents_result deepCopy() {
      return new getEvents_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TVMGetEventsResponse getSuccess() {
      return this.success;
    }

    public getEvents_result setSuccess(crdhn.vr.thrift.response.TVMGetEventsResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TVMGetEventsResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEvents_result)
        return this.equals((getEvents_result)that);
      return false;
    }

    public boolean equals(getEvents_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEvents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEvents_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEvents_resultStandardSchemeFactory implements SchemeFactory {
      public getEvents_resultStandardScheme getScheme() {
        return new getEvents_resultStandardScheme();
      }
    }

    private static class getEvents_resultStandardScheme extends StandardScheme<getEvents_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TVMGetEventsResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEvents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEvents_resultTupleSchemeFactory implements SchemeFactory {
      public getEvents_resultTupleScheme getScheme() {
        return new getEvents_resultTupleScheme();
      }
    }

    private static class getEvents_resultTupleScheme extends TupleScheme<getEvents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEvents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEvents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TVMGetEventsResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateRegistration_args implements org.apache.thrift.TBase<updateRegistration_args, updateRegistration_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRegistration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRegistration_args");

    private static final org.apache.thrift.protocol.TField REGISTRATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField REGISTRATION_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRegistration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRegistration_argsTupleSchemeFactory());
    }

    public long registrationId; // required
    public crdhn.vr.thrift.data.TRegistrationInfo registrationInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGISTRATION_ID((short)1, "registrationId"),
      REGISTRATION_INFO((short)2, "registrationInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGISTRATION_ID
            return REGISTRATION_ID;
          case 2: // REGISTRATION_INFO
            return REGISTRATION_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REGISTRATIONID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGISTRATION_ID, new org.apache.thrift.meta_data.FieldMetaData("registrationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TRID")));
      tmpMap.put(_Fields.REGISTRATION_INFO, new org.apache.thrift.meta_data.FieldMetaData("registrationInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.data.TRegistrationInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRegistration_args.class, metaDataMap);
    }

    public updateRegistration_args() {
    }

    public updateRegistration_args(
      long registrationId,
      crdhn.vr.thrift.data.TRegistrationInfo registrationInfo)
    {
      this();
      this.registrationId = registrationId;
      setRegistrationIdIsSet(true);
      this.registrationInfo = registrationInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRegistration_args(updateRegistration_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.registrationId = other.registrationId;
      if (other.isSetRegistrationInfo()) {
        this.registrationInfo = new crdhn.vr.thrift.data.TRegistrationInfo(other.registrationInfo);
      }
    }

    public updateRegistration_args deepCopy() {
      return new updateRegistration_args(this);
    }

    @Override
    public void clear() {
      setRegistrationIdIsSet(false);
      this.registrationId = 0;
      this.registrationInfo = null;
    }

    public long getRegistrationId() {
      return this.registrationId;
    }

    public updateRegistration_args setRegistrationId(long registrationId) {
      this.registrationId = registrationId;
      setRegistrationIdIsSet(true);
      return this;
    }

    public void unsetRegistrationId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTRATIONID_ISSET_ID);
    }

    /** Returns true if field registrationId is set (has been assigned a value) and false otherwise */
    public boolean isSetRegistrationId() {
      return EncodingUtils.testBit(__isset_bitfield, __REGISTRATIONID_ISSET_ID);
    }

    public void setRegistrationIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTRATIONID_ISSET_ID, value);
    }

    public crdhn.vr.thrift.data.TRegistrationInfo getRegistrationInfo() {
      return this.registrationInfo;
    }

    public updateRegistration_args setRegistrationInfo(crdhn.vr.thrift.data.TRegistrationInfo registrationInfo) {
      this.registrationInfo = registrationInfo;
      return this;
    }

    public void unsetRegistrationInfo() {
      this.registrationInfo = null;
    }

    /** Returns true if field registrationInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetRegistrationInfo() {
      return this.registrationInfo != null;
    }

    public void setRegistrationInfoIsSet(boolean value) {
      if (!value) {
        this.registrationInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGISTRATION_ID:
        if (value == null) {
          unsetRegistrationId();
        } else {
          setRegistrationId((Long)value);
        }
        break;

      case REGISTRATION_INFO:
        if (value == null) {
          unsetRegistrationInfo();
        } else {
          setRegistrationInfo((crdhn.vr.thrift.data.TRegistrationInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGISTRATION_ID:
        return Long.valueOf(getRegistrationId());

      case REGISTRATION_INFO:
        return getRegistrationInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGISTRATION_ID:
        return isSetRegistrationId();
      case REGISTRATION_INFO:
        return isSetRegistrationInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRegistration_args)
        return this.equals((updateRegistration_args)that);
      return false;
    }

    public boolean equals(updateRegistration_args that) {
      if (that == null)
        return false;

      boolean this_present_registrationId = true;
      boolean that_present_registrationId = true;
      if (this_present_registrationId || that_present_registrationId) {
        if (!(this_present_registrationId && that_present_registrationId))
          return false;
        if (this.registrationId != that.registrationId)
          return false;
      }

      boolean this_present_registrationInfo = true && this.isSetRegistrationInfo();
      boolean that_present_registrationInfo = true && that.isSetRegistrationInfo();
      if (this_present_registrationInfo || that_present_registrationInfo) {
        if (!(this_present_registrationInfo && that_present_registrationInfo))
          return false;
        if (!this.registrationInfo.equals(that.registrationInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateRegistration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRegistrationId()).compareTo(other.isSetRegistrationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegistrationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationId, other.registrationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegistrationInfo()).compareTo(other.isSetRegistrationInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegistrationInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationInfo, other.registrationInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRegistration_args(");
      boolean first = true;

      sb.append("registrationId:");
      sb.append(this.registrationId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("registrationInfo:");
      if (this.registrationInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.registrationInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (registrationInfo != null) {
        registrationInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRegistration_argsStandardSchemeFactory implements SchemeFactory {
      public updateRegistration_argsStandardScheme getScheme() {
        return new updateRegistration_argsStandardScheme();
      }
    }

    private static class updateRegistration_argsStandardScheme extends StandardScheme<updateRegistration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRegistration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGISTRATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.registrationId = iprot.readI64();
                struct.setRegistrationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REGISTRATION_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.registrationInfo = new crdhn.vr.thrift.data.TRegistrationInfo();
                struct.registrationInfo.read(iprot);
                struct.setRegistrationInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRegistration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REGISTRATION_ID_FIELD_DESC);
        oprot.writeI64(struct.registrationId);
        oprot.writeFieldEnd();
        if (struct.registrationInfo != null) {
          oprot.writeFieldBegin(REGISTRATION_INFO_FIELD_DESC);
          struct.registrationInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRegistration_argsTupleSchemeFactory implements SchemeFactory {
      public updateRegistration_argsTupleScheme getScheme() {
        return new updateRegistration_argsTupleScheme();
      }
    }

    private static class updateRegistration_argsTupleScheme extends TupleScheme<updateRegistration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRegistration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRegistrationId()) {
          optionals.set(0);
        }
        if (struct.isSetRegistrationInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRegistrationId()) {
          oprot.writeI64(struct.registrationId);
        }
        if (struct.isSetRegistrationInfo()) {
          struct.registrationInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRegistration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.registrationId = iprot.readI64();
          struct.setRegistrationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.registrationInfo = new crdhn.vr.thrift.data.TRegistrationInfo();
          struct.registrationInfo.read(iprot);
          struct.setRegistrationInfoIsSet(true);
        }
      }
    }

  }

  public static class updateRegistration_result implements org.apache.thrift.TBase<updateRegistration_result, updateRegistration_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateRegistration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRegistration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRegistration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRegistration_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TError success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TError.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRegistration_result.class, metaDataMap);
    }

    public updateRegistration_result() {
    }

    public updateRegistration_result(
      crdhn.vr.thrift.response.TError success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRegistration_result(updateRegistration_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TError(other.success);
      }
    }

    public updateRegistration_result deepCopy() {
      return new updateRegistration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TError getSuccess() {
      return this.success;
    }

    public updateRegistration_result setSuccess(crdhn.vr.thrift.response.TError success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRegistration_result)
        return this.equals((updateRegistration_result)that);
      return false;
    }

    public boolean equals(updateRegistration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateRegistration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRegistration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRegistration_resultStandardSchemeFactory implements SchemeFactory {
      public updateRegistration_resultStandardScheme getScheme() {
        return new updateRegistration_resultStandardScheme();
      }
    }

    private static class updateRegistration_resultStandardScheme extends StandardScheme<updateRegistration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRegistration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TError();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRegistration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRegistration_resultTupleSchemeFactory implements SchemeFactory {
      public updateRegistration_resultTupleScheme getScheme() {
        return new updateRegistration_resultTupleScheme();
      }
    }

    private static class updateRegistration_resultTupleScheme extends TupleScheme<updateRegistration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRegistration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRegistration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TError();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeRegistration_args implements org.apache.thrift.TBase<removeRegistration_args, removeRegistration_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeRegistration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeRegistration_args");

    private static final org.apache.thrift.protocol.TField REGISTRATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeRegistration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeRegistration_argsTupleSchemeFactory());
    }

    public long registrationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGISTRATION_ID((short)1, "registrationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGISTRATION_ID
            return REGISTRATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REGISTRATIONID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGISTRATION_ID, new org.apache.thrift.meta_data.FieldMetaData("registrationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TRID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeRegistration_args.class, metaDataMap);
    }

    public removeRegistration_args() {
    }

    public removeRegistration_args(
      long registrationId)
    {
      this();
      this.registrationId = registrationId;
      setRegistrationIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeRegistration_args(removeRegistration_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.registrationId = other.registrationId;
    }

    public removeRegistration_args deepCopy() {
      return new removeRegistration_args(this);
    }

    @Override
    public void clear() {
      setRegistrationIdIsSet(false);
      this.registrationId = 0;
    }

    public long getRegistrationId() {
      return this.registrationId;
    }

    public removeRegistration_args setRegistrationId(long registrationId) {
      this.registrationId = registrationId;
      setRegistrationIdIsSet(true);
      return this;
    }

    public void unsetRegistrationId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTRATIONID_ISSET_ID);
    }

    /** Returns true if field registrationId is set (has been assigned a value) and false otherwise */
    public boolean isSetRegistrationId() {
      return EncodingUtils.testBit(__isset_bitfield, __REGISTRATIONID_ISSET_ID);
    }

    public void setRegistrationIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTRATIONID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGISTRATION_ID:
        if (value == null) {
          unsetRegistrationId();
        } else {
          setRegistrationId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGISTRATION_ID:
        return Long.valueOf(getRegistrationId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGISTRATION_ID:
        return isSetRegistrationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeRegistration_args)
        return this.equals((removeRegistration_args)that);
      return false;
    }

    public boolean equals(removeRegistration_args that) {
      if (that == null)
        return false;

      boolean this_present_registrationId = true;
      boolean that_present_registrationId = true;
      if (this_present_registrationId || that_present_registrationId) {
        if (!(this_present_registrationId && that_present_registrationId))
          return false;
        if (this.registrationId != that.registrationId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeRegistration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRegistrationId()).compareTo(other.isSetRegistrationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegistrationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationId, other.registrationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeRegistration_args(");
      boolean first = true;

      sb.append("registrationId:");
      sb.append(this.registrationId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeRegistration_argsStandardSchemeFactory implements SchemeFactory {
      public removeRegistration_argsStandardScheme getScheme() {
        return new removeRegistration_argsStandardScheme();
      }
    }

    private static class removeRegistration_argsStandardScheme extends StandardScheme<removeRegistration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeRegistration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGISTRATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.registrationId = iprot.readI64();
                struct.setRegistrationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeRegistration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REGISTRATION_ID_FIELD_DESC);
        oprot.writeI64(struct.registrationId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeRegistration_argsTupleSchemeFactory implements SchemeFactory {
      public removeRegistration_argsTupleScheme getScheme() {
        return new removeRegistration_argsTupleScheme();
      }
    }

    private static class removeRegistration_argsTupleScheme extends TupleScheme<removeRegistration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeRegistration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRegistrationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRegistrationId()) {
          oprot.writeI64(struct.registrationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeRegistration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.registrationId = iprot.readI64();
          struct.setRegistrationIdIsSet(true);
        }
      }
    }

  }

  public static class removeRegistration_result implements org.apache.thrift.TBase<removeRegistration_result, removeRegistration_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeRegistration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeRegistration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeRegistration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeRegistration_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TError success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TError.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeRegistration_result.class, metaDataMap);
    }

    public removeRegistration_result() {
    }

    public removeRegistration_result(
      crdhn.vr.thrift.response.TError success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeRegistration_result(removeRegistration_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TError(other.success);
      }
    }

    public removeRegistration_result deepCopy() {
      return new removeRegistration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TError getSuccess() {
      return this.success;
    }

    public removeRegistration_result setSuccess(crdhn.vr.thrift.response.TError success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeRegistration_result)
        return this.equals((removeRegistration_result)that);
      return false;
    }

    public boolean equals(removeRegistration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeRegistration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeRegistration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeRegistration_resultStandardSchemeFactory implements SchemeFactory {
      public removeRegistration_resultStandardScheme getScheme() {
        return new removeRegistration_resultStandardScheme();
      }
    }

    private static class removeRegistration_resultStandardScheme extends StandardScheme<removeRegistration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeRegistration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TError();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeRegistration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeRegistration_resultTupleSchemeFactory implements SchemeFactory {
      public removeRegistration_resultTupleScheme getScheme() {
        return new removeRegistration_resultTupleScheme();
      }
    }

    private static class removeRegistration_resultTupleScheme extends TupleScheme<removeRegistration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeRegistration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeRegistration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TError();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRegistration_args implements org.apache.thrift.TBase<getRegistration_args, getRegistration_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRegistration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegistration_args");

    private static final org.apache.thrift.protocol.TField REGISTRATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegistration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegistration_argsTupleSchemeFactory());
    }

    public long registrationId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGISTRATION_ID((short)1, "registrationId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGISTRATION_ID
            return REGISTRATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REGISTRATIONID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGISTRATION_ID, new org.apache.thrift.meta_data.FieldMetaData("registrationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TRID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegistration_args.class, metaDataMap);
    }

    public getRegistration_args() {
    }

    public getRegistration_args(
      long registrationId)
    {
      this();
      this.registrationId = registrationId;
      setRegistrationIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegistration_args(getRegistration_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.registrationId = other.registrationId;
    }

    public getRegistration_args deepCopy() {
      return new getRegistration_args(this);
    }

    @Override
    public void clear() {
      setRegistrationIdIsSet(false);
      this.registrationId = 0;
    }

    public long getRegistrationId() {
      return this.registrationId;
    }

    public getRegistration_args setRegistrationId(long registrationId) {
      this.registrationId = registrationId;
      setRegistrationIdIsSet(true);
      return this;
    }

    public void unsetRegistrationId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTRATIONID_ISSET_ID);
    }

    /** Returns true if field registrationId is set (has been assigned a value) and false otherwise */
    public boolean isSetRegistrationId() {
      return EncodingUtils.testBit(__isset_bitfield, __REGISTRATIONID_ISSET_ID);
    }

    public void setRegistrationIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTRATIONID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGISTRATION_ID:
        if (value == null) {
          unsetRegistrationId();
        } else {
          setRegistrationId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGISTRATION_ID:
        return Long.valueOf(getRegistrationId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGISTRATION_ID:
        return isSetRegistrationId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegistration_args)
        return this.equals((getRegistration_args)that);
      return false;
    }

    public boolean equals(getRegistration_args that) {
      if (that == null)
        return false;

      boolean this_present_registrationId = true;
      boolean that_present_registrationId = true;
      if (this_present_registrationId || that_present_registrationId) {
        if (!(this_present_registrationId && that_present_registrationId))
          return false;
        if (this.registrationId != that.registrationId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRegistration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRegistrationId()).compareTo(other.isSetRegistrationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegistrationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationId, other.registrationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegistration_args(");
      boolean first = true;

      sb.append("registrationId:");
      sb.append(this.registrationId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegistration_argsStandardSchemeFactory implements SchemeFactory {
      public getRegistration_argsStandardScheme getScheme() {
        return new getRegistration_argsStandardScheme();
      }
    }

    private static class getRegistration_argsStandardScheme extends StandardScheme<getRegistration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegistration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGISTRATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.registrationId = iprot.readI64();
                struct.setRegistrationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegistration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REGISTRATION_ID_FIELD_DESC);
        oprot.writeI64(struct.registrationId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegistration_argsTupleSchemeFactory implements SchemeFactory {
      public getRegistration_argsTupleScheme getScheme() {
        return new getRegistration_argsTupleScheme();
      }
    }

    private static class getRegistration_argsTupleScheme extends TupleScheme<getRegistration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegistration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRegistrationId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRegistrationId()) {
          oprot.writeI64(struct.registrationId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegistration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.registrationId = iprot.readI64();
          struct.setRegistrationIdIsSet(true);
        }
      }
    }

  }

  public static class getRegistration_result implements org.apache.thrift.TBase<getRegistration_result, getRegistration_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRegistration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegistration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegistration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegistration_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TVMGetRegistrationResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TVMGetRegistrationResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegistration_result.class, metaDataMap);
    }

    public getRegistration_result() {
    }

    public getRegistration_result(
      crdhn.vr.thrift.response.TVMGetRegistrationResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegistration_result(getRegistration_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TVMGetRegistrationResponse(other.success);
      }
    }

    public getRegistration_result deepCopy() {
      return new getRegistration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TVMGetRegistrationResponse getSuccess() {
      return this.success;
    }

    public getRegistration_result setSuccess(crdhn.vr.thrift.response.TVMGetRegistrationResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TVMGetRegistrationResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegistration_result)
        return this.equals((getRegistration_result)that);
      return false;
    }

    public boolean equals(getRegistration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRegistration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegistration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegistration_resultStandardSchemeFactory implements SchemeFactory {
      public getRegistration_resultStandardScheme getScheme() {
        return new getRegistration_resultStandardScheme();
      }
    }

    private static class getRegistration_resultStandardScheme extends StandardScheme<getRegistration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegistration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TVMGetRegistrationResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegistration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegistration_resultTupleSchemeFactory implements SchemeFactory {
      public getRegistration_resultTupleScheme getScheme() {
        return new getRegistration_resultTupleScheme();
      }
    }

    private static class getRegistration_resultTupleScheme extends TupleScheme<getRegistration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegistration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegistration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TVMGetRegistrationResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRegistrations_args implements org.apache.thrift.TBase<getRegistrations_args, getRegistrations_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRegistrations_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegistrations_args");

    private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegistrations_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegistrations_argsTupleSchemeFactory());
    }

    public int eventId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_ID((short)1, "eventId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_ID
            return EVENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EVENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "TEID")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegistrations_args.class, metaDataMap);
    }

    public getRegistrations_args() {
    }

    public getRegistrations_args(
      int eventId)
    {
      this();
      this.eventId = eventId;
      setEventIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegistrations_args(getRegistrations_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.eventId = other.eventId;
    }

    public getRegistrations_args deepCopy() {
      return new getRegistrations_args(this);
    }

    @Override
    public void clear() {
      setEventIdIsSet(false);
      this.eventId = 0;
    }

    public int getEventId() {
      return this.eventId;
    }

    public getRegistrations_args setEventId(int eventId) {
      this.eventId = eventId;
      setEventIdIsSet(true);
      return this;
    }

    public void unsetEventId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTID_ISSET_ID);
    }

    /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
    public boolean isSetEventId() {
      return EncodingUtils.testBit(__isset_bitfield, __EVENTID_ISSET_ID);
    }

    public void setEventIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVENT_ID:
        if (value == null) {
          unsetEventId();
        } else {
          setEventId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_ID:
        return Integer.valueOf(getEventId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVENT_ID:
        return isSetEventId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegistrations_args)
        return this.equals((getRegistrations_args)that);
      return false;
    }

    public boolean equals(getRegistrations_args that) {
      if (that == null)
        return false;

      boolean this_present_eventId = true;
      boolean that_present_eventId = true;
      if (this_present_eventId || that_present_eventId) {
        if (!(this_present_eventId && that_present_eventId))
          return false;
        if (this.eventId != that.eventId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRegistrations_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEventId()).compareTo(other.isSetEventId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, other.eventId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegistrations_args(");
      boolean first = true;

      sb.append("eventId:");
      sb.append(this.eventId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegistrations_argsStandardSchemeFactory implements SchemeFactory {
      public getRegistrations_argsStandardScheme getScheme() {
        return new getRegistrations_argsStandardScheme();
      }
    }

    private static class getRegistrations_argsStandardScheme extends StandardScheme<getRegistrations_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegistrations_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.eventId = iprot.readI32();
                struct.setEventIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegistrations_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
        oprot.writeI32(struct.eventId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegistrations_argsTupleSchemeFactory implements SchemeFactory {
      public getRegistrations_argsTupleScheme getScheme() {
        return new getRegistrations_argsTupleScheme();
      }
    }

    private static class getRegistrations_argsTupleScheme extends TupleScheme<getRegistrations_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegistrations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEventId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEventId()) {
          oprot.writeI32(struct.eventId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegistrations_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eventId = iprot.readI32();
          struct.setEventIdIsSet(true);
        }
      }
    }

  }

  public static class getRegistrations_result implements org.apache.thrift.TBase<getRegistrations_result, getRegistrations_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRegistrations_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRegistrations_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRegistrations_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRegistrations_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TVMGetRegistrationsResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TVMGetRegistrationsResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRegistrations_result.class, metaDataMap);
    }

    public getRegistrations_result() {
    }

    public getRegistrations_result(
      crdhn.vr.thrift.response.TVMGetRegistrationsResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRegistrations_result(getRegistrations_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TVMGetRegistrationsResponse(other.success);
      }
    }

    public getRegistrations_result deepCopy() {
      return new getRegistrations_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TVMGetRegistrationsResponse getSuccess() {
      return this.success;
    }

    public getRegistrations_result setSuccess(crdhn.vr.thrift.response.TVMGetRegistrationsResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TVMGetRegistrationsResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRegistrations_result)
        return this.equals((getRegistrations_result)that);
      return false;
    }

    public boolean equals(getRegistrations_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRegistrations_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRegistrations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRegistrations_resultStandardSchemeFactory implements SchemeFactory {
      public getRegistrations_resultStandardScheme getScheme() {
        return new getRegistrations_resultStandardScheme();
      }
    }

    private static class getRegistrations_resultStandardScheme extends StandardScheme<getRegistrations_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRegistrations_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TVMGetRegistrationsResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRegistrations_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRegistrations_resultTupleSchemeFactory implements SchemeFactory {
      public getRegistrations_resultTupleScheme getScheme() {
        return new getRegistrations_resultTupleScheme();
      }
    }

    private static class getRegistrations_resultTupleScheme extends TupleScheme<getRegistrations_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRegistrations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRegistrations_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TVMGetRegistrationsResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateInjectionStatus_args implements org.apache.thrift.TBase<updateInjectionStatus_args, updateInjectionStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateInjectionStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateInjectionStatus_args");

    private static final org.apache.thrift.protocol.TField REGISTRATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField INJECTION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("injectionStatus", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateInjectionStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateInjectionStatus_argsTupleSchemeFactory());
    }

    public long registrationId; // required
    public int injectionStatus; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGISTRATION_ID((short)1, "registrationId"),
      INJECTION_STATUS((short)2, "injectionStatus");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGISTRATION_ID
            return REGISTRATION_ID;
          case 2: // INJECTION_STATUS
            return INJECTION_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REGISTRATIONID_ISSET_ID = 0;
    private static final int __INJECTIONSTATUS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGISTRATION_ID, new org.apache.thrift.meta_data.FieldMetaData("registrationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TRID")));
      tmpMap.put(_Fields.INJECTION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("injectionStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateInjectionStatus_args.class, metaDataMap);
    }

    public updateInjectionStatus_args() {
    }

    public updateInjectionStatus_args(
      long registrationId,
      int injectionStatus)
    {
      this();
      this.registrationId = registrationId;
      setRegistrationIdIsSet(true);
      this.injectionStatus = injectionStatus;
      setInjectionStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateInjectionStatus_args(updateInjectionStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.registrationId = other.registrationId;
      this.injectionStatus = other.injectionStatus;
    }

    public updateInjectionStatus_args deepCopy() {
      return new updateInjectionStatus_args(this);
    }

    @Override
    public void clear() {
      setRegistrationIdIsSet(false);
      this.registrationId = 0;
      setInjectionStatusIsSet(false);
      this.injectionStatus = 0;
    }

    public long getRegistrationId() {
      return this.registrationId;
    }

    public updateInjectionStatus_args setRegistrationId(long registrationId) {
      this.registrationId = registrationId;
      setRegistrationIdIsSet(true);
      return this;
    }

    public void unsetRegistrationId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTRATIONID_ISSET_ID);
    }

    /** Returns true if field registrationId is set (has been assigned a value) and false otherwise */
    public boolean isSetRegistrationId() {
      return EncodingUtils.testBit(__isset_bitfield, __REGISTRATIONID_ISSET_ID);
    }

    public void setRegistrationIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTRATIONID_ISSET_ID, value);
    }

    public int getInjectionStatus() {
      return this.injectionStatus;
    }

    public updateInjectionStatus_args setInjectionStatus(int injectionStatus) {
      this.injectionStatus = injectionStatus;
      setInjectionStatusIsSet(true);
      return this;
    }

    public void unsetInjectionStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INJECTIONSTATUS_ISSET_ID);
    }

    /** Returns true if field injectionStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetInjectionStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __INJECTIONSTATUS_ISSET_ID);
    }

    public void setInjectionStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INJECTIONSTATUS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGISTRATION_ID:
        if (value == null) {
          unsetRegistrationId();
        } else {
          setRegistrationId((Long)value);
        }
        break;

      case INJECTION_STATUS:
        if (value == null) {
          unsetInjectionStatus();
        } else {
          setInjectionStatus((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGISTRATION_ID:
        return Long.valueOf(getRegistrationId());

      case INJECTION_STATUS:
        return Integer.valueOf(getInjectionStatus());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGISTRATION_ID:
        return isSetRegistrationId();
      case INJECTION_STATUS:
        return isSetInjectionStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateInjectionStatus_args)
        return this.equals((updateInjectionStatus_args)that);
      return false;
    }

    public boolean equals(updateInjectionStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_registrationId = true;
      boolean that_present_registrationId = true;
      if (this_present_registrationId || that_present_registrationId) {
        if (!(this_present_registrationId && that_present_registrationId))
          return false;
        if (this.registrationId != that.registrationId)
          return false;
      }

      boolean this_present_injectionStatus = true;
      boolean that_present_injectionStatus = true;
      if (this_present_injectionStatus || that_present_injectionStatus) {
        if (!(this_present_injectionStatus && that_present_injectionStatus))
          return false;
        if (this.injectionStatus != that.injectionStatus)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateInjectionStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRegistrationId()).compareTo(other.isSetRegistrationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegistrationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationId, other.registrationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInjectionStatus()).compareTo(other.isSetInjectionStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInjectionStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.injectionStatus, other.injectionStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateInjectionStatus_args(");
      boolean first = true;

      sb.append("registrationId:");
      sb.append(this.registrationId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("injectionStatus:");
      sb.append(this.injectionStatus);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateInjectionStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateInjectionStatus_argsStandardScheme getScheme() {
        return new updateInjectionStatus_argsStandardScheme();
      }
    }

    private static class updateInjectionStatus_argsStandardScheme extends StandardScheme<updateInjectionStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateInjectionStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGISTRATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.registrationId = iprot.readI64();
                struct.setRegistrationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INJECTION_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.injectionStatus = iprot.readI32();
                struct.setInjectionStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateInjectionStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REGISTRATION_ID_FIELD_DESC);
        oprot.writeI64(struct.registrationId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INJECTION_STATUS_FIELD_DESC);
        oprot.writeI32(struct.injectionStatus);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateInjectionStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateInjectionStatus_argsTupleScheme getScheme() {
        return new updateInjectionStatus_argsTupleScheme();
      }
    }

    private static class updateInjectionStatus_argsTupleScheme extends TupleScheme<updateInjectionStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateInjectionStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRegistrationId()) {
          optionals.set(0);
        }
        if (struct.isSetInjectionStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRegistrationId()) {
          oprot.writeI64(struct.registrationId);
        }
        if (struct.isSetInjectionStatus()) {
          oprot.writeI32(struct.injectionStatus);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateInjectionStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.registrationId = iprot.readI64();
          struct.setRegistrationIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.injectionStatus = iprot.readI32();
          struct.setInjectionStatusIsSet(true);
        }
      }
    }

  }

  public static class updateInjectionStatus_result implements org.apache.thrift.TBase<updateInjectionStatus_result, updateInjectionStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateInjectionStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateInjectionStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateInjectionStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateInjectionStatus_resultTupleSchemeFactory());
    }

    public crdhn.vr.thrift.response.TError success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, crdhn.vr.thrift.response.TError.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateInjectionStatus_result.class, metaDataMap);
    }

    public updateInjectionStatus_result() {
    }

    public updateInjectionStatus_result(
      crdhn.vr.thrift.response.TError success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateInjectionStatus_result(updateInjectionStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new crdhn.vr.thrift.response.TError(other.success);
      }
    }

    public updateInjectionStatus_result deepCopy() {
      return new updateInjectionStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public crdhn.vr.thrift.response.TError getSuccess() {
      return this.success;
    }

    public updateInjectionStatus_result setSuccess(crdhn.vr.thrift.response.TError success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((crdhn.vr.thrift.response.TError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateInjectionStatus_result)
        return this.equals((updateInjectionStatus_result)that);
      return false;
    }

    public boolean equals(updateInjectionStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateInjectionStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateInjectionStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateInjectionStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateInjectionStatus_resultStandardScheme getScheme() {
        return new updateInjectionStatus_resultStandardScheme();
      }
    }

    private static class updateInjectionStatus_resultStandardScheme extends StandardScheme<updateInjectionStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateInjectionStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new crdhn.vr.thrift.response.TError();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateInjectionStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateInjectionStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateInjectionStatus_resultTupleScheme getScheme() {
        return new updateInjectionStatus_resultTupleScheme();
      }
    }

    private static class updateInjectionStatus_resultTupleScheme extends TupleScheme<updateInjectionStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateInjectionStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateInjectionStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new crdhn.vr.thrift.response.TError();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
