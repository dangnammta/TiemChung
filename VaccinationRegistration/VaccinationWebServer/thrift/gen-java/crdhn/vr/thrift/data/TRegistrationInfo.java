/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package crdhn.vr.thrift.data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TRegistrationInfo implements org.apache.thrift.TBase<TRegistrationInfo, TRegistrationInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TRegistrationInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRegistrationInfo");

  private static final org.apache.thrift.protocol.TField REGISTRATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField REGISTRATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REGISTRATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CHILDREN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("childrenName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CHILDREN_DATE_OF_BIRTH_FIELD_DESC = new org.apache.thrift.protocol.TField("childrenDateOfBirth", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CHILDREN_CARRIER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("childrenCarrierName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CHILDREN_CARRIER_PIN_FIELD_DESC = new org.apache.thrift.protocol.TField("childrenCarrierPIN", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CHILDREN_CARRIER_PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("childrenCarrierPhoneNumber", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CHILDREN_CARRIER_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("childrenCarrierEmail", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CHILDREN_CARRIER_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("childrenCarrierAddress", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField INJECTION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("injectionStatus", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField REGISTRATION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("registrationCode", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField INJECTION_ORDER_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("injectionOrderNumber", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField INJECTION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("injectionTime", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField INJECTION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("injectionDate", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField INJECTION_REAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("injectionRealTime", org.apache.thrift.protocol.TType.I64, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TRegistrationInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TRegistrationInfoTupleSchemeFactory());
  }

  public long registrationId; // required
  public int registrationType; // required
  public long registrationTime; // required
  public int eventId; // required
  public String childrenName; // required
  public long childrenDateOfBirth; // required
  public String childrenCarrierName; // required
  public String childrenCarrierPIN; // required
  public String childrenCarrierPhoneNumber; // required
  public String childrenCarrierEmail; // required
  public String childrenCarrierAddress; // required
  public int injectionStatus; // required
  public String registrationCode; // required
  public int injectionOrderNumber; // required
  public String injectionTime; // required
  public long injectionDate; // required
  public long injectionRealTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REGISTRATION_ID((short)1, "registrationId"),
    REGISTRATION_TYPE((short)2, "registrationType"),
    REGISTRATION_TIME((short)3, "registrationTime"),
    EVENT_ID((short)4, "eventId"),
    CHILDREN_NAME((short)5, "childrenName"),
    CHILDREN_DATE_OF_BIRTH((short)6, "childrenDateOfBirth"),
    CHILDREN_CARRIER_NAME((short)7, "childrenCarrierName"),
    CHILDREN_CARRIER_PIN((short)8, "childrenCarrierPIN"),
    CHILDREN_CARRIER_PHONE_NUMBER((short)9, "childrenCarrierPhoneNumber"),
    CHILDREN_CARRIER_EMAIL((short)10, "childrenCarrierEmail"),
    CHILDREN_CARRIER_ADDRESS((short)11, "childrenCarrierAddress"),
    INJECTION_STATUS((short)12, "injectionStatus"),
    REGISTRATION_CODE((short)13, "registrationCode"),
    INJECTION_ORDER_NUMBER((short)14, "injectionOrderNumber"),
    INJECTION_TIME((short)15, "injectionTime"),
    INJECTION_DATE((short)16, "injectionDate"),
    INJECTION_REAL_TIME((short)17, "injectionRealTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REGISTRATION_ID
          return REGISTRATION_ID;
        case 2: // REGISTRATION_TYPE
          return REGISTRATION_TYPE;
        case 3: // REGISTRATION_TIME
          return REGISTRATION_TIME;
        case 4: // EVENT_ID
          return EVENT_ID;
        case 5: // CHILDREN_NAME
          return CHILDREN_NAME;
        case 6: // CHILDREN_DATE_OF_BIRTH
          return CHILDREN_DATE_OF_BIRTH;
        case 7: // CHILDREN_CARRIER_NAME
          return CHILDREN_CARRIER_NAME;
        case 8: // CHILDREN_CARRIER_PIN
          return CHILDREN_CARRIER_PIN;
        case 9: // CHILDREN_CARRIER_PHONE_NUMBER
          return CHILDREN_CARRIER_PHONE_NUMBER;
        case 10: // CHILDREN_CARRIER_EMAIL
          return CHILDREN_CARRIER_EMAIL;
        case 11: // CHILDREN_CARRIER_ADDRESS
          return CHILDREN_CARRIER_ADDRESS;
        case 12: // INJECTION_STATUS
          return INJECTION_STATUS;
        case 13: // REGISTRATION_CODE
          return REGISTRATION_CODE;
        case 14: // INJECTION_ORDER_NUMBER
          return INJECTION_ORDER_NUMBER;
        case 15: // INJECTION_TIME
          return INJECTION_TIME;
        case 16: // INJECTION_DATE
          return INJECTION_DATE;
        case 17: // INJECTION_REAL_TIME
          return INJECTION_REAL_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REGISTRATIONID_ISSET_ID = 0;
  private static final int __REGISTRATIONTYPE_ISSET_ID = 1;
  private static final int __REGISTRATIONTIME_ISSET_ID = 2;
  private static final int __EVENTID_ISSET_ID = 3;
  private static final int __CHILDRENDATEOFBIRTH_ISSET_ID = 4;
  private static final int __INJECTIONSTATUS_ISSET_ID = 5;
  private static final int __INJECTIONORDERNUMBER_ISSET_ID = 6;
  private static final int __INJECTIONDATE_ISSET_ID = 7;
  private static final int __INJECTIONREALTIME_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REGISTRATION_ID, new org.apache.thrift.meta_data.FieldMetaData("registrationId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TRID")));
    tmpMap.put(_Fields.REGISTRATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("registrationType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGISTRATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("registrationTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTIME")));
    tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TEID")));
    tmpMap.put(_Fields.CHILDREN_NAME, new org.apache.thrift.meta_data.FieldMetaData("childrenName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHILDREN_DATE_OF_BIRTH, new org.apache.thrift.meta_data.FieldMetaData("childrenDateOfBirth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTIME")));
    tmpMap.put(_Fields.CHILDREN_CARRIER_NAME, new org.apache.thrift.meta_data.FieldMetaData("childrenCarrierName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHILDREN_CARRIER_PIN, new org.apache.thrift.meta_data.FieldMetaData("childrenCarrierPIN", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHILDREN_CARRIER_PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("childrenCarrierPhoneNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHILDREN_CARRIER_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("childrenCarrierEmail", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHILDREN_CARRIER_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("childrenCarrierAddress", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INJECTION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("injectionStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGISTRATION_CODE, new org.apache.thrift.meta_data.FieldMetaData("registrationCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INJECTION_ORDER_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("injectionOrderNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INJECTION_TIME, new org.apache.thrift.meta_data.FieldMetaData("injectionTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INJECTION_DATE, new org.apache.thrift.meta_data.FieldMetaData("injectionDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTIME")));
    tmpMap.put(_Fields.INJECTION_REAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("injectionRealTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTIME")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRegistrationInfo.class, metaDataMap);
  }

  public TRegistrationInfo() {
    this.registrationId = -1L;

    this.registrationType = 0;

    this.registrationTime = -1L;

    this.eventId = -1;

    this.childrenName = "";

    this.childrenDateOfBirth = 0L;

    this.childrenCarrierName = "";

    this.childrenCarrierPIN = "";

    this.childrenCarrierPhoneNumber = "";

    this.childrenCarrierEmail = "";

    this.childrenCarrierAddress = "";

    this.injectionStatus = 0;

    this.registrationCode = "";

    this.injectionOrderNumber = -1;

    this.injectionTime = "";

    this.injectionDate = -1L;

    this.injectionRealTime = -1L;

  }

  public TRegistrationInfo(
    long registrationId,
    int registrationType,
    long registrationTime,
    int eventId,
    String childrenName,
    long childrenDateOfBirth,
    String childrenCarrierName,
    String childrenCarrierPIN,
    String childrenCarrierPhoneNumber,
    String childrenCarrierEmail,
    String childrenCarrierAddress,
    int injectionStatus,
    String registrationCode,
    int injectionOrderNumber,
    String injectionTime,
    long injectionDate,
    long injectionRealTime)
  {
    this();
    this.registrationId = registrationId;
    setRegistrationIdIsSet(true);
    this.registrationType = registrationType;
    setRegistrationTypeIsSet(true);
    this.registrationTime = registrationTime;
    setRegistrationTimeIsSet(true);
    this.eventId = eventId;
    setEventIdIsSet(true);
    this.childrenName = childrenName;
    this.childrenDateOfBirth = childrenDateOfBirth;
    setChildrenDateOfBirthIsSet(true);
    this.childrenCarrierName = childrenCarrierName;
    this.childrenCarrierPIN = childrenCarrierPIN;
    this.childrenCarrierPhoneNumber = childrenCarrierPhoneNumber;
    this.childrenCarrierEmail = childrenCarrierEmail;
    this.childrenCarrierAddress = childrenCarrierAddress;
    this.injectionStatus = injectionStatus;
    setInjectionStatusIsSet(true);
    this.registrationCode = registrationCode;
    this.injectionOrderNumber = injectionOrderNumber;
    setInjectionOrderNumberIsSet(true);
    this.injectionTime = injectionTime;
    this.injectionDate = injectionDate;
    setInjectionDateIsSet(true);
    this.injectionRealTime = injectionRealTime;
    setInjectionRealTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRegistrationInfo(TRegistrationInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.registrationId = other.registrationId;
    this.registrationType = other.registrationType;
    this.registrationTime = other.registrationTime;
    this.eventId = other.eventId;
    if (other.isSetChildrenName()) {
      this.childrenName = other.childrenName;
    }
    this.childrenDateOfBirth = other.childrenDateOfBirth;
    if (other.isSetChildrenCarrierName()) {
      this.childrenCarrierName = other.childrenCarrierName;
    }
    if (other.isSetChildrenCarrierPIN()) {
      this.childrenCarrierPIN = other.childrenCarrierPIN;
    }
    if (other.isSetChildrenCarrierPhoneNumber()) {
      this.childrenCarrierPhoneNumber = other.childrenCarrierPhoneNumber;
    }
    if (other.isSetChildrenCarrierEmail()) {
      this.childrenCarrierEmail = other.childrenCarrierEmail;
    }
    if (other.isSetChildrenCarrierAddress()) {
      this.childrenCarrierAddress = other.childrenCarrierAddress;
    }
    this.injectionStatus = other.injectionStatus;
    if (other.isSetRegistrationCode()) {
      this.registrationCode = other.registrationCode;
    }
    this.injectionOrderNumber = other.injectionOrderNumber;
    if (other.isSetInjectionTime()) {
      this.injectionTime = other.injectionTime;
    }
    this.injectionDate = other.injectionDate;
    this.injectionRealTime = other.injectionRealTime;
  }

  public TRegistrationInfo deepCopy() {
    return new TRegistrationInfo(this);
  }

  @Override
  public void clear() {
    this.registrationId = -1L;

    this.registrationType = 0;

    this.registrationTime = -1L;

    this.eventId = -1;

    this.childrenName = "";

    this.childrenDateOfBirth = 0L;

    this.childrenCarrierName = "";

    this.childrenCarrierPIN = "";

    this.childrenCarrierPhoneNumber = "";

    this.childrenCarrierEmail = "";

    this.childrenCarrierAddress = "";

    this.injectionStatus = 0;

    this.registrationCode = "";

    this.injectionOrderNumber = -1;

    this.injectionTime = "";

    this.injectionDate = -1L;

    this.injectionRealTime = -1L;

  }

  public long getRegistrationId() {
    return this.registrationId;
  }

  public TRegistrationInfo setRegistrationId(long registrationId) {
    this.registrationId = registrationId;
    setRegistrationIdIsSet(true);
    return this;
  }

  public void unsetRegistrationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTRATIONID_ISSET_ID);
  }

  /** Returns true if field registrationId is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistrationId() {
    return EncodingUtils.testBit(__isset_bitfield, __REGISTRATIONID_ISSET_ID);
  }

  public void setRegistrationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTRATIONID_ISSET_ID, value);
  }

  public int getRegistrationType() {
    return this.registrationType;
  }

  public TRegistrationInfo setRegistrationType(int registrationType) {
    this.registrationType = registrationType;
    setRegistrationTypeIsSet(true);
    return this;
  }

  public void unsetRegistrationType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTRATIONTYPE_ISSET_ID);
  }

  /** Returns true if field registrationType is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistrationType() {
    return EncodingUtils.testBit(__isset_bitfield, __REGISTRATIONTYPE_ISSET_ID);
  }

  public void setRegistrationTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTRATIONTYPE_ISSET_ID, value);
  }

  public long getRegistrationTime() {
    return this.registrationTime;
  }

  public TRegistrationInfo setRegistrationTime(long registrationTime) {
    this.registrationTime = registrationTime;
    setRegistrationTimeIsSet(true);
    return this;
  }

  public void unsetRegistrationTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGISTRATIONTIME_ISSET_ID);
  }

  /** Returns true if field registrationTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistrationTime() {
    return EncodingUtils.testBit(__isset_bitfield, __REGISTRATIONTIME_ISSET_ID);
  }

  public void setRegistrationTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGISTRATIONTIME_ISSET_ID, value);
  }

  public int getEventId() {
    return this.eventId;
  }

  public TRegistrationInfo setEventId(int eventId) {
    this.eventId = eventId;
    setEventIdIsSet(true);
    return this;
  }

  public void unsetEventId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
  public boolean isSetEventId() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  public void setEventIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTID_ISSET_ID, value);
  }

  public String getChildrenName() {
    return this.childrenName;
  }

  public TRegistrationInfo setChildrenName(String childrenName) {
    this.childrenName = childrenName;
    return this;
  }

  public void unsetChildrenName() {
    this.childrenName = null;
  }

  /** Returns true if field childrenName is set (has been assigned a value) and false otherwise */
  public boolean isSetChildrenName() {
    return this.childrenName != null;
  }

  public void setChildrenNameIsSet(boolean value) {
    if (!value) {
      this.childrenName = null;
    }
  }

  public long getChildrenDateOfBirth() {
    return this.childrenDateOfBirth;
  }

  public TRegistrationInfo setChildrenDateOfBirth(long childrenDateOfBirth) {
    this.childrenDateOfBirth = childrenDateOfBirth;
    setChildrenDateOfBirthIsSet(true);
    return this;
  }

  public void unsetChildrenDateOfBirth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHILDRENDATEOFBIRTH_ISSET_ID);
  }

  /** Returns true if field childrenDateOfBirth is set (has been assigned a value) and false otherwise */
  public boolean isSetChildrenDateOfBirth() {
    return EncodingUtils.testBit(__isset_bitfield, __CHILDRENDATEOFBIRTH_ISSET_ID);
  }

  public void setChildrenDateOfBirthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHILDRENDATEOFBIRTH_ISSET_ID, value);
  }

  public String getChildrenCarrierName() {
    return this.childrenCarrierName;
  }

  public TRegistrationInfo setChildrenCarrierName(String childrenCarrierName) {
    this.childrenCarrierName = childrenCarrierName;
    return this;
  }

  public void unsetChildrenCarrierName() {
    this.childrenCarrierName = null;
  }

  /** Returns true if field childrenCarrierName is set (has been assigned a value) and false otherwise */
  public boolean isSetChildrenCarrierName() {
    return this.childrenCarrierName != null;
  }

  public void setChildrenCarrierNameIsSet(boolean value) {
    if (!value) {
      this.childrenCarrierName = null;
    }
  }

  public String getChildrenCarrierPIN() {
    return this.childrenCarrierPIN;
  }

  public TRegistrationInfo setChildrenCarrierPIN(String childrenCarrierPIN) {
    this.childrenCarrierPIN = childrenCarrierPIN;
    return this;
  }

  public void unsetChildrenCarrierPIN() {
    this.childrenCarrierPIN = null;
  }

  /** Returns true if field childrenCarrierPIN is set (has been assigned a value) and false otherwise */
  public boolean isSetChildrenCarrierPIN() {
    return this.childrenCarrierPIN != null;
  }

  public void setChildrenCarrierPINIsSet(boolean value) {
    if (!value) {
      this.childrenCarrierPIN = null;
    }
  }

  public String getChildrenCarrierPhoneNumber() {
    return this.childrenCarrierPhoneNumber;
  }

  public TRegistrationInfo setChildrenCarrierPhoneNumber(String childrenCarrierPhoneNumber) {
    this.childrenCarrierPhoneNumber = childrenCarrierPhoneNumber;
    return this;
  }

  public void unsetChildrenCarrierPhoneNumber() {
    this.childrenCarrierPhoneNumber = null;
  }

  /** Returns true if field childrenCarrierPhoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetChildrenCarrierPhoneNumber() {
    return this.childrenCarrierPhoneNumber != null;
  }

  public void setChildrenCarrierPhoneNumberIsSet(boolean value) {
    if (!value) {
      this.childrenCarrierPhoneNumber = null;
    }
  }

  public String getChildrenCarrierEmail() {
    return this.childrenCarrierEmail;
  }

  public TRegistrationInfo setChildrenCarrierEmail(String childrenCarrierEmail) {
    this.childrenCarrierEmail = childrenCarrierEmail;
    return this;
  }

  public void unsetChildrenCarrierEmail() {
    this.childrenCarrierEmail = null;
  }

  /** Returns true if field childrenCarrierEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetChildrenCarrierEmail() {
    return this.childrenCarrierEmail != null;
  }

  public void setChildrenCarrierEmailIsSet(boolean value) {
    if (!value) {
      this.childrenCarrierEmail = null;
    }
  }

  public String getChildrenCarrierAddress() {
    return this.childrenCarrierAddress;
  }

  public TRegistrationInfo setChildrenCarrierAddress(String childrenCarrierAddress) {
    this.childrenCarrierAddress = childrenCarrierAddress;
    return this;
  }

  public void unsetChildrenCarrierAddress() {
    this.childrenCarrierAddress = null;
  }

  /** Returns true if field childrenCarrierAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetChildrenCarrierAddress() {
    return this.childrenCarrierAddress != null;
  }

  public void setChildrenCarrierAddressIsSet(boolean value) {
    if (!value) {
      this.childrenCarrierAddress = null;
    }
  }

  public int getInjectionStatus() {
    return this.injectionStatus;
  }

  public TRegistrationInfo setInjectionStatus(int injectionStatus) {
    this.injectionStatus = injectionStatus;
    setInjectionStatusIsSet(true);
    return this;
  }

  public void unsetInjectionStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INJECTIONSTATUS_ISSET_ID);
  }

  /** Returns true if field injectionStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetInjectionStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __INJECTIONSTATUS_ISSET_ID);
  }

  public void setInjectionStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INJECTIONSTATUS_ISSET_ID, value);
  }

  public String getRegistrationCode() {
    return this.registrationCode;
  }

  public TRegistrationInfo setRegistrationCode(String registrationCode) {
    this.registrationCode = registrationCode;
    return this;
  }

  public void unsetRegistrationCode() {
    this.registrationCode = null;
  }

  /** Returns true if field registrationCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRegistrationCode() {
    return this.registrationCode != null;
  }

  public void setRegistrationCodeIsSet(boolean value) {
    if (!value) {
      this.registrationCode = null;
    }
  }

  public int getInjectionOrderNumber() {
    return this.injectionOrderNumber;
  }

  public TRegistrationInfo setInjectionOrderNumber(int injectionOrderNumber) {
    this.injectionOrderNumber = injectionOrderNumber;
    setInjectionOrderNumberIsSet(true);
    return this;
  }

  public void unsetInjectionOrderNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INJECTIONORDERNUMBER_ISSET_ID);
  }

  /** Returns true if field injectionOrderNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetInjectionOrderNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __INJECTIONORDERNUMBER_ISSET_ID);
  }

  public void setInjectionOrderNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INJECTIONORDERNUMBER_ISSET_ID, value);
  }

  public String getInjectionTime() {
    return this.injectionTime;
  }

  public TRegistrationInfo setInjectionTime(String injectionTime) {
    this.injectionTime = injectionTime;
    return this;
  }

  public void unsetInjectionTime() {
    this.injectionTime = null;
  }

  /** Returns true if field injectionTime is set (has been assigned a value) and false otherwise */
  public boolean isSetInjectionTime() {
    return this.injectionTime != null;
  }

  public void setInjectionTimeIsSet(boolean value) {
    if (!value) {
      this.injectionTime = null;
    }
  }

  public long getInjectionDate() {
    return this.injectionDate;
  }

  public TRegistrationInfo setInjectionDate(long injectionDate) {
    this.injectionDate = injectionDate;
    setInjectionDateIsSet(true);
    return this;
  }

  public void unsetInjectionDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INJECTIONDATE_ISSET_ID);
  }

  /** Returns true if field injectionDate is set (has been assigned a value) and false otherwise */
  public boolean isSetInjectionDate() {
    return EncodingUtils.testBit(__isset_bitfield, __INJECTIONDATE_ISSET_ID);
  }

  public void setInjectionDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INJECTIONDATE_ISSET_ID, value);
  }

  public long getInjectionRealTime() {
    return this.injectionRealTime;
  }

  public TRegistrationInfo setInjectionRealTime(long injectionRealTime) {
    this.injectionRealTime = injectionRealTime;
    setInjectionRealTimeIsSet(true);
    return this;
  }

  public void unsetInjectionRealTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INJECTIONREALTIME_ISSET_ID);
  }

  /** Returns true if field injectionRealTime is set (has been assigned a value) and false otherwise */
  public boolean isSetInjectionRealTime() {
    return EncodingUtils.testBit(__isset_bitfield, __INJECTIONREALTIME_ISSET_ID);
  }

  public void setInjectionRealTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INJECTIONREALTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REGISTRATION_ID:
      if (value == null) {
        unsetRegistrationId();
      } else {
        setRegistrationId((Long)value);
      }
      break;

    case REGISTRATION_TYPE:
      if (value == null) {
        unsetRegistrationType();
      } else {
        setRegistrationType((Integer)value);
      }
      break;

    case REGISTRATION_TIME:
      if (value == null) {
        unsetRegistrationTime();
      } else {
        setRegistrationTime((Long)value);
      }
      break;

    case EVENT_ID:
      if (value == null) {
        unsetEventId();
      } else {
        setEventId((Integer)value);
      }
      break;

    case CHILDREN_NAME:
      if (value == null) {
        unsetChildrenName();
      } else {
        setChildrenName((String)value);
      }
      break;

    case CHILDREN_DATE_OF_BIRTH:
      if (value == null) {
        unsetChildrenDateOfBirth();
      } else {
        setChildrenDateOfBirth((Long)value);
      }
      break;

    case CHILDREN_CARRIER_NAME:
      if (value == null) {
        unsetChildrenCarrierName();
      } else {
        setChildrenCarrierName((String)value);
      }
      break;

    case CHILDREN_CARRIER_PIN:
      if (value == null) {
        unsetChildrenCarrierPIN();
      } else {
        setChildrenCarrierPIN((String)value);
      }
      break;

    case CHILDREN_CARRIER_PHONE_NUMBER:
      if (value == null) {
        unsetChildrenCarrierPhoneNumber();
      } else {
        setChildrenCarrierPhoneNumber((String)value);
      }
      break;

    case CHILDREN_CARRIER_EMAIL:
      if (value == null) {
        unsetChildrenCarrierEmail();
      } else {
        setChildrenCarrierEmail((String)value);
      }
      break;

    case CHILDREN_CARRIER_ADDRESS:
      if (value == null) {
        unsetChildrenCarrierAddress();
      } else {
        setChildrenCarrierAddress((String)value);
      }
      break;

    case INJECTION_STATUS:
      if (value == null) {
        unsetInjectionStatus();
      } else {
        setInjectionStatus((Integer)value);
      }
      break;

    case REGISTRATION_CODE:
      if (value == null) {
        unsetRegistrationCode();
      } else {
        setRegistrationCode((String)value);
      }
      break;

    case INJECTION_ORDER_NUMBER:
      if (value == null) {
        unsetInjectionOrderNumber();
      } else {
        setInjectionOrderNumber((Integer)value);
      }
      break;

    case INJECTION_TIME:
      if (value == null) {
        unsetInjectionTime();
      } else {
        setInjectionTime((String)value);
      }
      break;

    case INJECTION_DATE:
      if (value == null) {
        unsetInjectionDate();
      } else {
        setInjectionDate((Long)value);
      }
      break;

    case INJECTION_REAL_TIME:
      if (value == null) {
        unsetInjectionRealTime();
      } else {
        setInjectionRealTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REGISTRATION_ID:
      return Long.valueOf(getRegistrationId());

    case REGISTRATION_TYPE:
      return Integer.valueOf(getRegistrationType());

    case REGISTRATION_TIME:
      return Long.valueOf(getRegistrationTime());

    case EVENT_ID:
      return Integer.valueOf(getEventId());

    case CHILDREN_NAME:
      return getChildrenName();

    case CHILDREN_DATE_OF_BIRTH:
      return Long.valueOf(getChildrenDateOfBirth());

    case CHILDREN_CARRIER_NAME:
      return getChildrenCarrierName();

    case CHILDREN_CARRIER_PIN:
      return getChildrenCarrierPIN();

    case CHILDREN_CARRIER_PHONE_NUMBER:
      return getChildrenCarrierPhoneNumber();

    case CHILDREN_CARRIER_EMAIL:
      return getChildrenCarrierEmail();

    case CHILDREN_CARRIER_ADDRESS:
      return getChildrenCarrierAddress();

    case INJECTION_STATUS:
      return Integer.valueOf(getInjectionStatus());

    case REGISTRATION_CODE:
      return getRegistrationCode();

    case INJECTION_ORDER_NUMBER:
      return Integer.valueOf(getInjectionOrderNumber());

    case INJECTION_TIME:
      return getInjectionTime();

    case INJECTION_DATE:
      return Long.valueOf(getInjectionDate());

    case INJECTION_REAL_TIME:
      return Long.valueOf(getInjectionRealTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REGISTRATION_ID:
      return isSetRegistrationId();
    case REGISTRATION_TYPE:
      return isSetRegistrationType();
    case REGISTRATION_TIME:
      return isSetRegistrationTime();
    case EVENT_ID:
      return isSetEventId();
    case CHILDREN_NAME:
      return isSetChildrenName();
    case CHILDREN_DATE_OF_BIRTH:
      return isSetChildrenDateOfBirth();
    case CHILDREN_CARRIER_NAME:
      return isSetChildrenCarrierName();
    case CHILDREN_CARRIER_PIN:
      return isSetChildrenCarrierPIN();
    case CHILDREN_CARRIER_PHONE_NUMBER:
      return isSetChildrenCarrierPhoneNumber();
    case CHILDREN_CARRIER_EMAIL:
      return isSetChildrenCarrierEmail();
    case CHILDREN_CARRIER_ADDRESS:
      return isSetChildrenCarrierAddress();
    case INJECTION_STATUS:
      return isSetInjectionStatus();
    case REGISTRATION_CODE:
      return isSetRegistrationCode();
    case INJECTION_ORDER_NUMBER:
      return isSetInjectionOrderNumber();
    case INJECTION_TIME:
      return isSetInjectionTime();
    case INJECTION_DATE:
      return isSetInjectionDate();
    case INJECTION_REAL_TIME:
      return isSetInjectionRealTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TRegistrationInfo)
      return this.equals((TRegistrationInfo)that);
    return false;
  }

  public boolean equals(TRegistrationInfo that) {
    if (that == null)
      return false;

    boolean this_present_registrationId = true;
    boolean that_present_registrationId = true;
    if (this_present_registrationId || that_present_registrationId) {
      if (!(this_present_registrationId && that_present_registrationId))
        return false;
      if (this.registrationId != that.registrationId)
        return false;
    }

    boolean this_present_registrationType = true;
    boolean that_present_registrationType = true;
    if (this_present_registrationType || that_present_registrationType) {
      if (!(this_present_registrationType && that_present_registrationType))
        return false;
      if (this.registrationType != that.registrationType)
        return false;
    }

    boolean this_present_registrationTime = true;
    boolean that_present_registrationTime = true;
    if (this_present_registrationTime || that_present_registrationTime) {
      if (!(this_present_registrationTime && that_present_registrationTime))
        return false;
      if (this.registrationTime != that.registrationTime)
        return false;
    }

    boolean this_present_eventId = true;
    boolean that_present_eventId = true;
    if (this_present_eventId || that_present_eventId) {
      if (!(this_present_eventId && that_present_eventId))
        return false;
      if (this.eventId != that.eventId)
        return false;
    }

    boolean this_present_childrenName = true && this.isSetChildrenName();
    boolean that_present_childrenName = true && that.isSetChildrenName();
    if (this_present_childrenName || that_present_childrenName) {
      if (!(this_present_childrenName && that_present_childrenName))
        return false;
      if (!this.childrenName.equals(that.childrenName))
        return false;
    }

    boolean this_present_childrenDateOfBirth = true;
    boolean that_present_childrenDateOfBirth = true;
    if (this_present_childrenDateOfBirth || that_present_childrenDateOfBirth) {
      if (!(this_present_childrenDateOfBirth && that_present_childrenDateOfBirth))
        return false;
      if (this.childrenDateOfBirth != that.childrenDateOfBirth)
        return false;
    }

    boolean this_present_childrenCarrierName = true && this.isSetChildrenCarrierName();
    boolean that_present_childrenCarrierName = true && that.isSetChildrenCarrierName();
    if (this_present_childrenCarrierName || that_present_childrenCarrierName) {
      if (!(this_present_childrenCarrierName && that_present_childrenCarrierName))
        return false;
      if (!this.childrenCarrierName.equals(that.childrenCarrierName))
        return false;
    }

    boolean this_present_childrenCarrierPIN = true && this.isSetChildrenCarrierPIN();
    boolean that_present_childrenCarrierPIN = true && that.isSetChildrenCarrierPIN();
    if (this_present_childrenCarrierPIN || that_present_childrenCarrierPIN) {
      if (!(this_present_childrenCarrierPIN && that_present_childrenCarrierPIN))
        return false;
      if (!this.childrenCarrierPIN.equals(that.childrenCarrierPIN))
        return false;
    }

    boolean this_present_childrenCarrierPhoneNumber = true && this.isSetChildrenCarrierPhoneNumber();
    boolean that_present_childrenCarrierPhoneNumber = true && that.isSetChildrenCarrierPhoneNumber();
    if (this_present_childrenCarrierPhoneNumber || that_present_childrenCarrierPhoneNumber) {
      if (!(this_present_childrenCarrierPhoneNumber && that_present_childrenCarrierPhoneNumber))
        return false;
      if (!this.childrenCarrierPhoneNumber.equals(that.childrenCarrierPhoneNumber))
        return false;
    }

    boolean this_present_childrenCarrierEmail = true && this.isSetChildrenCarrierEmail();
    boolean that_present_childrenCarrierEmail = true && that.isSetChildrenCarrierEmail();
    if (this_present_childrenCarrierEmail || that_present_childrenCarrierEmail) {
      if (!(this_present_childrenCarrierEmail && that_present_childrenCarrierEmail))
        return false;
      if (!this.childrenCarrierEmail.equals(that.childrenCarrierEmail))
        return false;
    }

    boolean this_present_childrenCarrierAddress = true && this.isSetChildrenCarrierAddress();
    boolean that_present_childrenCarrierAddress = true && that.isSetChildrenCarrierAddress();
    if (this_present_childrenCarrierAddress || that_present_childrenCarrierAddress) {
      if (!(this_present_childrenCarrierAddress && that_present_childrenCarrierAddress))
        return false;
      if (!this.childrenCarrierAddress.equals(that.childrenCarrierAddress))
        return false;
    }

    boolean this_present_injectionStatus = true;
    boolean that_present_injectionStatus = true;
    if (this_present_injectionStatus || that_present_injectionStatus) {
      if (!(this_present_injectionStatus && that_present_injectionStatus))
        return false;
      if (this.injectionStatus != that.injectionStatus)
        return false;
    }

    boolean this_present_registrationCode = true && this.isSetRegistrationCode();
    boolean that_present_registrationCode = true && that.isSetRegistrationCode();
    if (this_present_registrationCode || that_present_registrationCode) {
      if (!(this_present_registrationCode && that_present_registrationCode))
        return false;
      if (!this.registrationCode.equals(that.registrationCode))
        return false;
    }

    boolean this_present_injectionOrderNumber = true;
    boolean that_present_injectionOrderNumber = true;
    if (this_present_injectionOrderNumber || that_present_injectionOrderNumber) {
      if (!(this_present_injectionOrderNumber && that_present_injectionOrderNumber))
        return false;
      if (this.injectionOrderNumber != that.injectionOrderNumber)
        return false;
    }

    boolean this_present_injectionTime = true && this.isSetInjectionTime();
    boolean that_present_injectionTime = true && that.isSetInjectionTime();
    if (this_present_injectionTime || that_present_injectionTime) {
      if (!(this_present_injectionTime && that_present_injectionTime))
        return false;
      if (!this.injectionTime.equals(that.injectionTime))
        return false;
    }

    boolean this_present_injectionDate = true;
    boolean that_present_injectionDate = true;
    if (this_present_injectionDate || that_present_injectionDate) {
      if (!(this_present_injectionDate && that_present_injectionDate))
        return false;
      if (this.injectionDate != that.injectionDate)
        return false;
    }

    boolean this_present_injectionRealTime = true;
    boolean that_present_injectionRealTime = true;
    if (this_present_injectionRealTime || that_present_injectionRealTime) {
      if (!(this_present_injectionRealTime && that_present_injectionRealTime))
        return false;
      if (this.injectionRealTime != that.injectionRealTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TRegistrationInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRegistrationId()).compareTo(other.isSetRegistrationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistrationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationId, other.registrationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegistrationType()).compareTo(other.isSetRegistrationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistrationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationType, other.registrationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegistrationTime()).compareTo(other.isSetRegistrationTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistrationTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationTime, other.registrationTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventId()).compareTo(other.isSetEventId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, other.eventId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildrenName()).compareTo(other.isSetChildrenName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildrenName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childrenName, other.childrenName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildrenDateOfBirth()).compareTo(other.isSetChildrenDateOfBirth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildrenDateOfBirth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childrenDateOfBirth, other.childrenDateOfBirth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildrenCarrierName()).compareTo(other.isSetChildrenCarrierName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildrenCarrierName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childrenCarrierName, other.childrenCarrierName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildrenCarrierPIN()).compareTo(other.isSetChildrenCarrierPIN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildrenCarrierPIN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childrenCarrierPIN, other.childrenCarrierPIN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildrenCarrierPhoneNumber()).compareTo(other.isSetChildrenCarrierPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildrenCarrierPhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childrenCarrierPhoneNumber, other.childrenCarrierPhoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildrenCarrierEmail()).compareTo(other.isSetChildrenCarrierEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildrenCarrierEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childrenCarrierEmail, other.childrenCarrierEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildrenCarrierAddress()).compareTo(other.isSetChildrenCarrierAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildrenCarrierAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childrenCarrierAddress, other.childrenCarrierAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInjectionStatus()).compareTo(other.isSetInjectionStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInjectionStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.injectionStatus, other.injectionStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegistrationCode()).compareTo(other.isSetRegistrationCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegistrationCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registrationCode, other.registrationCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInjectionOrderNumber()).compareTo(other.isSetInjectionOrderNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInjectionOrderNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.injectionOrderNumber, other.injectionOrderNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInjectionTime()).compareTo(other.isSetInjectionTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInjectionTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.injectionTime, other.injectionTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInjectionDate()).compareTo(other.isSetInjectionDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInjectionDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.injectionDate, other.injectionDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInjectionRealTime()).compareTo(other.isSetInjectionRealTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInjectionRealTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.injectionRealTime, other.injectionRealTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TRegistrationInfo(");
    boolean first = true;

    sb.append("registrationId:");
    sb.append(this.registrationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("registrationType:");
    sb.append(this.registrationType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("registrationTime:");
    sb.append(this.registrationTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventId:");
    sb.append(this.eventId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("childrenName:");
    if (this.childrenName == null) {
      sb.append("null");
    } else {
      sb.append(this.childrenName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("childrenDateOfBirth:");
    sb.append(this.childrenDateOfBirth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("childrenCarrierName:");
    if (this.childrenCarrierName == null) {
      sb.append("null");
    } else {
      sb.append(this.childrenCarrierName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("childrenCarrierPIN:");
    if (this.childrenCarrierPIN == null) {
      sb.append("null");
    } else {
      sb.append(this.childrenCarrierPIN);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("childrenCarrierPhoneNumber:");
    if (this.childrenCarrierPhoneNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.childrenCarrierPhoneNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("childrenCarrierEmail:");
    if (this.childrenCarrierEmail == null) {
      sb.append("null");
    } else {
      sb.append(this.childrenCarrierEmail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("childrenCarrierAddress:");
    if (this.childrenCarrierAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.childrenCarrierAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("injectionStatus:");
    sb.append(this.injectionStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("registrationCode:");
    if (this.registrationCode == null) {
      sb.append("null");
    } else {
      sb.append(this.registrationCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("injectionOrderNumber:");
    sb.append(this.injectionOrderNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("injectionTime:");
    if (this.injectionTime == null) {
      sb.append("null");
    } else {
      sb.append(this.injectionTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("injectionDate:");
    sb.append(this.injectionDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("injectionRealTime:");
    sb.append(this.injectionRealTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'registrationId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'registrationType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'registrationTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'eventId' because it's a primitive and you chose the non-beans generator.
    if (childrenName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'childrenName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'childrenDateOfBirth' because it's a primitive and you chose the non-beans generator.
    if (childrenCarrierName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'childrenCarrierName' was not present! Struct: " + toString());
    }
    if (childrenCarrierPIN == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'childrenCarrierPIN' was not present! Struct: " + toString());
    }
    if (childrenCarrierPhoneNumber == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'childrenCarrierPhoneNumber' was not present! Struct: " + toString());
    }
    if (childrenCarrierEmail == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'childrenCarrierEmail' was not present! Struct: " + toString());
    }
    if (childrenCarrierAddress == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'childrenCarrierAddress' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'injectionStatus' because it's a primitive and you chose the non-beans generator.
    if (registrationCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'registrationCode' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'injectionOrderNumber' because it's a primitive and you chose the non-beans generator.
    if (injectionTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'injectionTime' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'injectionDate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'injectionRealTime' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRegistrationInfoStandardSchemeFactory implements SchemeFactory {
    public TRegistrationInfoStandardScheme getScheme() {
      return new TRegistrationInfoStandardScheme();
    }
  }

  private static class TRegistrationInfoStandardScheme extends StandardScheme<TRegistrationInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRegistrationInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REGISTRATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.registrationId = iprot.readI64();
              struct.setRegistrationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REGISTRATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.registrationType = iprot.readI32();
              struct.setRegistrationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REGISTRATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.registrationTime = iprot.readI64();
              struct.setRegistrationTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventId = iprot.readI32();
              struct.setEventIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHILDREN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.childrenName = iprot.readString();
              struct.setChildrenNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHILDREN_DATE_OF_BIRTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.childrenDateOfBirth = iprot.readI64();
              struct.setChildrenDateOfBirthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHILDREN_CARRIER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.childrenCarrierName = iprot.readString();
              struct.setChildrenCarrierNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHILDREN_CARRIER_PIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.childrenCarrierPIN = iprot.readString();
              struct.setChildrenCarrierPINIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHILDREN_CARRIER_PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.childrenCarrierPhoneNumber = iprot.readString();
              struct.setChildrenCarrierPhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CHILDREN_CARRIER_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.childrenCarrierEmail = iprot.readString();
              struct.setChildrenCarrierEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CHILDREN_CARRIER_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.childrenCarrierAddress = iprot.readString();
              struct.setChildrenCarrierAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INJECTION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.injectionStatus = iprot.readI32();
              struct.setInjectionStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REGISTRATION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.registrationCode = iprot.readString();
              struct.setRegistrationCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // INJECTION_ORDER_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.injectionOrderNumber = iprot.readI32();
              struct.setInjectionOrderNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // INJECTION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.injectionTime = iprot.readString();
              struct.setInjectionTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // INJECTION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.injectionDate = iprot.readI64();
              struct.setInjectionDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // INJECTION_REAL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.injectionRealTime = iprot.readI64();
              struct.setInjectionRealTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRegistrationId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'registrationId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRegistrationType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'registrationType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRegistrationTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'registrationTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEventId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'eventId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetChildrenDateOfBirth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'childrenDateOfBirth' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInjectionStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'injectionStatus' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInjectionOrderNumber()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'injectionOrderNumber' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInjectionDate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'injectionDate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetInjectionRealTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'injectionRealTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRegistrationInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REGISTRATION_ID_FIELD_DESC);
      oprot.writeI64(struct.registrationId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGISTRATION_TYPE_FIELD_DESC);
      oprot.writeI32(struct.registrationType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGISTRATION_TIME_FIELD_DESC);
      oprot.writeI64(struct.registrationTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
      oprot.writeI32(struct.eventId);
      oprot.writeFieldEnd();
      if (struct.childrenName != null) {
        oprot.writeFieldBegin(CHILDREN_NAME_FIELD_DESC);
        oprot.writeString(struct.childrenName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHILDREN_DATE_OF_BIRTH_FIELD_DESC);
      oprot.writeI64(struct.childrenDateOfBirth);
      oprot.writeFieldEnd();
      if (struct.childrenCarrierName != null) {
        oprot.writeFieldBegin(CHILDREN_CARRIER_NAME_FIELD_DESC);
        oprot.writeString(struct.childrenCarrierName);
        oprot.writeFieldEnd();
      }
      if (struct.childrenCarrierPIN != null) {
        oprot.writeFieldBegin(CHILDREN_CARRIER_PIN_FIELD_DESC);
        oprot.writeString(struct.childrenCarrierPIN);
        oprot.writeFieldEnd();
      }
      if (struct.childrenCarrierPhoneNumber != null) {
        oprot.writeFieldBegin(CHILDREN_CARRIER_PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.childrenCarrierPhoneNumber);
        oprot.writeFieldEnd();
      }
      if (struct.childrenCarrierEmail != null) {
        oprot.writeFieldBegin(CHILDREN_CARRIER_EMAIL_FIELD_DESC);
        oprot.writeString(struct.childrenCarrierEmail);
        oprot.writeFieldEnd();
      }
      if (struct.childrenCarrierAddress != null) {
        oprot.writeFieldBegin(CHILDREN_CARRIER_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.childrenCarrierAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INJECTION_STATUS_FIELD_DESC);
      oprot.writeI32(struct.injectionStatus);
      oprot.writeFieldEnd();
      if (struct.registrationCode != null) {
        oprot.writeFieldBegin(REGISTRATION_CODE_FIELD_DESC);
        oprot.writeString(struct.registrationCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INJECTION_ORDER_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.injectionOrderNumber);
      oprot.writeFieldEnd();
      if (struct.injectionTime != null) {
        oprot.writeFieldBegin(INJECTION_TIME_FIELD_DESC);
        oprot.writeString(struct.injectionTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INJECTION_DATE_FIELD_DESC);
      oprot.writeI64(struct.injectionDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INJECTION_REAL_TIME_FIELD_DESC);
      oprot.writeI64(struct.injectionRealTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRegistrationInfoTupleSchemeFactory implements SchemeFactory {
    public TRegistrationInfoTupleScheme getScheme() {
      return new TRegistrationInfoTupleScheme();
    }
  }

  private static class TRegistrationInfoTupleScheme extends TupleScheme<TRegistrationInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRegistrationInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.registrationId);
      oprot.writeI32(struct.registrationType);
      oprot.writeI64(struct.registrationTime);
      oprot.writeI32(struct.eventId);
      oprot.writeString(struct.childrenName);
      oprot.writeI64(struct.childrenDateOfBirth);
      oprot.writeString(struct.childrenCarrierName);
      oprot.writeString(struct.childrenCarrierPIN);
      oprot.writeString(struct.childrenCarrierPhoneNumber);
      oprot.writeString(struct.childrenCarrierEmail);
      oprot.writeString(struct.childrenCarrierAddress);
      oprot.writeI32(struct.injectionStatus);
      oprot.writeString(struct.registrationCode);
      oprot.writeI32(struct.injectionOrderNumber);
      oprot.writeString(struct.injectionTime);
      oprot.writeI64(struct.injectionDate);
      oprot.writeI64(struct.injectionRealTime);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRegistrationInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.registrationId = iprot.readI64();
      struct.setRegistrationIdIsSet(true);
      struct.registrationType = iprot.readI32();
      struct.setRegistrationTypeIsSet(true);
      struct.registrationTime = iprot.readI64();
      struct.setRegistrationTimeIsSet(true);
      struct.eventId = iprot.readI32();
      struct.setEventIdIsSet(true);
      struct.childrenName = iprot.readString();
      struct.setChildrenNameIsSet(true);
      struct.childrenDateOfBirth = iprot.readI64();
      struct.setChildrenDateOfBirthIsSet(true);
      struct.childrenCarrierName = iprot.readString();
      struct.setChildrenCarrierNameIsSet(true);
      struct.childrenCarrierPIN = iprot.readString();
      struct.setChildrenCarrierPINIsSet(true);
      struct.childrenCarrierPhoneNumber = iprot.readString();
      struct.setChildrenCarrierPhoneNumberIsSet(true);
      struct.childrenCarrierEmail = iprot.readString();
      struct.setChildrenCarrierEmailIsSet(true);
      struct.childrenCarrierAddress = iprot.readString();
      struct.setChildrenCarrierAddressIsSet(true);
      struct.injectionStatus = iprot.readI32();
      struct.setInjectionStatusIsSet(true);
      struct.registrationCode = iprot.readString();
      struct.setRegistrationCodeIsSet(true);
      struct.injectionOrderNumber = iprot.readI32();
      struct.setInjectionOrderNumberIsSet(true);
      struct.injectionTime = iprot.readString();
      struct.setInjectionTimeIsSet(true);
      struct.injectionDate = iprot.readI64();
      struct.setInjectionDateIsSet(true);
      struct.injectionRealTime = iprot.readI64();
      struct.setInjectionRealTimeIsSet(true);
    }
  }

}

