/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package crdhn.vr.thrift.data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TRegistrationCodes implements org.apache.thrift.TBase<TRegistrationCodes, TRegistrationCodes._Fields>, java.io.Serializable, Cloneable, Comparable<TRegistrationCodes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRegistrationCodes");

  private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MAP_RCODE2_RID_FIELD_DESC = new org.apache.thrift.protocol.TField("mapRCode2RId", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TRegistrationCodesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TRegistrationCodesTupleSchemeFactory());
  }

  public int eventId; // required
  public Map<String,Long> mapRCode2RId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EVENT_ID((short)1, "eventId"),
    MAP_RCODE2_RID((short)2, "mapRCode2RId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EVENT_ID
          return EVENT_ID;
        case 2: // MAP_RCODE2_RID
          return MAP_RCODE2_RID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVENTID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TEID")));
    tmpMap.put(_Fields.MAP_RCODE2_RID, new org.apache.thrift.meta_data.FieldMetaData("mapRCode2RId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "TRID"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRegistrationCodes.class, metaDataMap);
  }

  public TRegistrationCodes() {
    this.eventId = -1;

  }

  public TRegistrationCodes(
    int eventId,
    Map<String,Long> mapRCode2RId)
  {
    this();
    this.eventId = eventId;
    setEventIdIsSet(true);
    this.mapRCode2RId = mapRCode2RId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRegistrationCodes(TRegistrationCodes other) {
    __isset_bitfield = other.__isset_bitfield;
    this.eventId = other.eventId;
    if (other.isSetMapRCode2RId()) {
      Map<String,Long> __this__mapRCode2RId = new HashMap<String,Long>(other.mapRCode2RId.size());
      for (Map.Entry<String, Long> other_element : other.mapRCode2RId.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__mapRCode2RId_copy_key = other_element_key;

        Long __this__mapRCode2RId_copy_value = other_element_value;

        __this__mapRCode2RId.put(__this__mapRCode2RId_copy_key, __this__mapRCode2RId_copy_value);
      }
      this.mapRCode2RId = __this__mapRCode2RId;
    }
  }

  public TRegistrationCodes deepCopy() {
    return new TRegistrationCodes(this);
  }

  @Override
  public void clear() {
    this.eventId = -1;

    this.mapRCode2RId = null;
  }

  public int getEventId() {
    return this.eventId;
  }

  public TRegistrationCodes setEventId(int eventId) {
    this.eventId = eventId;
    setEventIdIsSet(true);
    return this;
  }

  public void unsetEventId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
  public boolean isSetEventId() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTID_ISSET_ID);
  }

  public void setEventIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTID_ISSET_ID, value);
  }

  public int getMapRCode2RIdSize() {
    return (this.mapRCode2RId == null) ? 0 : this.mapRCode2RId.size();
  }

  public void putToMapRCode2RId(String key, long val) {
    if (this.mapRCode2RId == null) {
      this.mapRCode2RId = new HashMap<String,Long>();
    }
    this.mapRCode2RId.put(key, val);
  }

  public Map<String,Long> getMapRCode2RId() {
    return this.mapRCode2RId;
  }

  public TRegistrationCodes setMapRCode2RId(Map<String,Long> mapRCode2RId) {
    this.mapRCode2RId = mapRCode2RId;
    return this;
  }

  public void unsetMapRCode2RId() {
    this.mapRCode2RId = null;
  }

  /** Returns true if field mapRCode2RId is set (has been assigned a value) and false otherwise */
  public boolean isSetMapRCode2RId() {
    return this.mapRCode2RId != null;
  }

  public void setMapRCode2RIdIsSet(boolean value) {
    if (!value) {
      this.mapRCode2RId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EVENT_ID:
      if (value == null) {
        unsetEventId();
      } else {
        setEventId((Integer)value);
      }
      break;

    case MAP_RCODE2_RID:
      if (value == null) {
        unsetMapRCode2RId();
      } else {
        setMapRCode2RId((Map<String,Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EVENT_ID:
      return Integer.valueOf(getEventId());

    case MAP_RCODE2_RID:
      return getMapRCode2RId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EVENT_ID:
      return isSetEventId();
    case MAP_RCODE2_RID:
      return isSetMapRCode2RId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TRegistrationCodes)
      return this.equals((TRegistrationCodes)that);
    return false;
  }

  public boolean equals(TRegistrationCodes that) {
    if (that == null)
      return false;

    boolean this_present_eventId = true;
    boolean that_present_eventId = true;
    if (this_present_eventId || that_present_eventId) {
      if (!(this_present_eventId && that_present_eventId))
        return false;
      if (this.eventId != that.eventId)
        return false;
    }

    boolean this_present_mapRCode2RId = true && this.isSetMapRCode2RId();
    boolean that_present_mapRCode2RId = true && that.isSetMapRCode2RId();
    if (this_present_mapRCode2RId || that_present_mapRCode2RId) {
      if (!(this_present_mapRCode2RId && that_present_mapRCode2RId))
        return false;
      if (!this.mapRCode2RId.equals(that.mapRCode2RId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TRegistrationCodes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEventId()).compareTo(other.isSetEventId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, other.eventId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapRCode2RId()).compareTo(other.isSetMapRCode2RId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapRCode2RId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapRCode2RId, other.mapRCode2RId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TRegistrationCodes(");
    boolean first = true;

    sb.append("eventId:");
    sb.append(this.eventId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapRCode2RId:");
    if (this.mapRCode2RId == null) {
      sb.append("null");
    } else {
      sb.append(this.mapRCode2RId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'eventId' because it's a primitive and you chose the non-beans generator.
    if (mapRCode2RId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mapRCode2RId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRegistrationCodesStandardSchemeFactory implements SchemeFactory {
    public TRegistrationCodesStandardScheme getScheme() {
      return new TRegistrationCodesStandardScheme();
    }
  }

  private static class TRegistrationCodesStandardScheme extends StandardScheme<TRegistrationCodes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRegistrationCodes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventId = iprot.readI32();
              struct.setEventIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAP_RCODE2_RID
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map84 = iprot.readMapBegin();
                struct.mapRCode2RId = new HashMap<String,Long>(2*_map84.size);
                for (int _i85 = 0; _i85 < _map84.size; ++_i85)
                {
                  String _key86;
                  long _val87;
                  _key86 = iprot.readString();
                  _val87 = iprot.readI64();
                  struct.mapRCode2RId.put(_key86, _val87);
                }
                iprot.readMapEnd();
              }
              struct.setMapRCode2RIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetEventId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'eventId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRegistrationCodes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
      oprot.writeI32(struct.eventId);
      oprot.writeFieldEnd();
      if (struct.mapRCode2RId != null) {
        oprot.writeFieldBegin(MAP_RCODE2_RID_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.mapRCode2RId.size()));
          for (Map.Entry<String, Long> _iter88 : struct.mapRCode2RId.entrySet())
          {
            oprot.writeString(_iter88.getKey());
            oprot.writeI64(_iter88.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRegistrationCodesTupleSchemeFactory implements SchemeFactory {
    public TRegistrationCodesTupleScheme getScheme() {
      return new TRegistrationCodesTupleScheme();
    }
  }

  private static class TRegistrationCodesTupleScheme extends TupleScheme<TRegistrationCodes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRegistrationCodes struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.eventId);
      {
        oprot.writeI32(struct.mapRCode2RId.size());
        for (Map.Entry<String, Long> _iter89 : struct.mapRCode2RId.entrySet())
        {
          oprot.writeString(_iter89.getKey());
          oprot.writeI64(_iter89.getValue());
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRegistrationCodes struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.eventId = iprot.readI32();
      struct.setEventIdIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map90 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.mapRCode2RId = new HashMap<String,Long>(2*_map90.size);
        for (int _i91 = 0; _i91 < _map90.size; ++_i91)
        {
          String _key92;
          long _val93;
          _key92 = iprot.readString();
          _val93 = iprot.readI64();
          struct.mapRCode2RId.put(_key92, _val93);
        }
      }
      struct.setMapRCode2RIdIsSet(true);
    }
  }

}

