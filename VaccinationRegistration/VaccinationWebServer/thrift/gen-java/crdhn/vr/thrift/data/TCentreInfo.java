/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package crdhn.vr.thrift.data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCentreInfo implements org.apache.thrift.TBase<TCentreInfo, TCentreInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TCentreInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCentreInfo");

  private static final org.apache.thrift.protocol.TField CENTRE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("centreId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EVENT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("eventIds", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField VACCINE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("vaccineIds", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCentreInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCentreInfoTupleSchemeFactory());
  }

  public int centreId; // required
  public String name; // required
  public String address; // required
  public String phoneNumber; // required
  public List<Integer> eventIds; // required
  public List<Integer> vaccineIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CENTRE_ID((short)1, "centreId"),
    NAME((short)2, "name"),
    ADDRESS((short)3, "address"),
    PHONE_NUMBER((short)4, "phoneNumber"),
    EVENT_IDS((short)5, "eventIds"),
    VACCINE_IDS((short)6, "vaccineIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CENTRE_ID
          return CENTRE_ID;
        case 2: // NAME
          return NAME;
        case 3: // ADDRESS
          return ADDRESS;
        case 4: // PHONE_NUMBER
          return PHONE_NUMBER;
        case 5: // EVENT_IDS
          return EVENT_IDS;
        case 6: // VACCINE_IDS
          return VACCINE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CENTREID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CENTRE_ID, new org.apache.thrift.meta_data.FieldMetaData("centreId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TCID")));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_IDS, new org.apache.thrift.meta_data.FieldMetaData("eventIds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TEID"))));
    tmpMap.put(_Fields.VACCINE_IDS, new org.apache.thrift.meta_data.FieldMetaData("vaccineIds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TVID"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCentreInfo.class, metaDataMap);
  }

  public TCentreInfo() {
    this.centreId = -1;

    this.name = "";

    this.address = "";

    this.phoneNumber = "";

  }

  public TCentreInfo(
    int centreId,
    String name,
    String address,
    String phoneNumber,
    List<Integer> eventIds,
    List<Integer> vaccineIds)
  {
    this();
    this.centreId = centreId;
    setCentreIdIsSet(true);
    this.name = name;
    this.address = address;
    this.phoneNumber = phoneNumber;
    this.eventIds = eventIds;
    this.vaccineIds = vaccineIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCentreInfo(TCentreInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.centreId = other.centreId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetPhoneNumber()) {
      this.phoneNumber = other.phoneNumber;
    }
    if (other.isSetEventIds()) {
      List<Integer> __this__eventIds = new ArrayList<Integer>(other.eventIds.size());
      for (Integer other_element : other.eventIds) {
        __this__eventIds.add(other_element);
      }
      this.eventIds = __this__eventIds;
    }
    if (other.isSetVaccineIds()) {
      List<Integer> __this__vaccineIds = new ArrayList<Integer>(other.vaccineIds.size());
      for (Integer other_element : other.vaccineIds) {
        __this__vaccineIds.add(other_element);
      }
      this.vaccineIds = __this__vaccineIds;
    }
  }

  public TCentreInfo deepCopy() {
    return new TCentreInfo(this);
  }

  @Override
  public void clear() {
    this.centreId = -1;

    this.name = "";

    this.address = "";

    this.phoneNumber = "";

    this.eventIds = null;
    this.vaccineIds = null;
  }

  public int getCentreId() {
    return this.centreId;
  }

  public TCentreInfo setCentreId(int centreId) {
    this.centreId = centreId;
    setCentreIdIsSet(true);
    return this;
  }

  public void unsetCentreId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CENTREID_ISSET_ID);
  }

  /** Returns true if field centreId is set (has been assigned a value) and false otherwise */
  public boolean isSetCentreId() {
    return EncodingUtils.testBit(__isset_bitfield, __CENTREID_ISSET_ID);
  }

  public void setCentreIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CENTREID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public TCentreInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public TCentreInfo setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getPhoneNumber() {
    return this.phoneNumber;
  }

  public TCentreInfo setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  public void unsetPhoneNumber() {
    this.phoneNumber = null;
  }

  /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneNumber() {
    return this.phoneNumber != null;
  }

  public void setPhoneNumberIsSet(boolean value) {
    if (!value) {
      this.phoneNumber = null;
    }
  }

  public int getEventIdsSize() {
    return (this.eventIds == null) ? 0 : this.eventIds.size();
  }

  public java.util.Iterator<Integer> getEventIdsIterator() {
    return (this.eventIds == null) ? null : this.eventIds.iterator();
  }

  public void addToEventIds(int elem) {
    if (this.eventIds == null) {
      this.eventIds = new ArrayList<Integer>();
    }
    this.eventIds.add(elem);
  }

  public List<Integer> getEventIds() {
    return this.eventIds;
  }

  public TCentreInfo setEventIds(List<Integer> eventIds) {
    this.eventIds = eventIds;
    return this;
  }

  public void unsetEventIds() {
    this.eventIds = null;
  }

  /** Returns true if field eventIds is set (has been assigned a value) and false otherwise */
  public boolean isSetEventIds() {
    return this.eventIds != null;
  }

  public void setEventIdsIsSet(boolean value) {
    if (!value) {
      this.eventIds = null;
    }
  }

  public int getVaccineIdsSize() {
    return (this.vaccineIds == null) ? 0 : this.vaccineIds.size();
  }

  public java.util.Iterator<Integer> getVaccineIdsIterator() {
    return (this.vaccineIds == null) ? null : this.vaccineIds.iterator();
  }

  public void addToVaccineIds(int elem) {
    if (this.vaccineIds == null) {
      this.vaccineIds = new ArrayList<Integer>();
    }
    this.vaccineIds.add(elem);
  }

  public List<Integer> getVaccineIds() {
    return this.vaccineIds;
  }

  public TCentreInfo setVaccineIds(List<Integer> vaccineIds) {
    this.vaccineIds = vaccineIds;
    return this;
  }

  public void unsetVaccineIds() {
    this.vaccineIds = null;
  }

  /** Returns true if field vaccineIds is set (has been assigned a value) and false otherwise */
  public boolean isSetVaccineIds() {
    return this.vaccineIds != null;
  }

  public void setVaccineIdsIsSet(boolean value) {
    if (!value) {
      this.vaccineIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CENTRE_ID:
      if (value == null) {
        unsetCentreId();
      } else {
        setCentreId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case PHONE_NUMBER:
      if (value == null) {
        unsetPhoneNumber();
      } else {
        setPhoneNumber((String)value);
      }
      break;

    case EVENT_IDS:
      if (value == null) {
        unsetEventIds();
      } else {
        setEventIds((List<Integer>)value);
      }
      break;

    case VACCINE_IDS:
      if (value == null) {
        unsetVaccineIds();
      } else {
        setVaccineIds((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CENTRE_ID:
      return Integer.valueOf(getCentreId());

    case NAME:
      return getName();

    case ADDRESS:
      return getAddress();

    case PHONE_NUMBER:
      return getPhoneNumber();

    case EVENT_IDS:
      return getEventIds();

    case VACCINE_IDS:
      return getVaccineIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CENTRE_ID:
      return isSetCentreId();
    case NAME:
      return isSetName();
    case ADDRESS:
      return isSetAddress();
    case PHONE_NUMBER:
      return isSetPhoneNumber();
    case EVENT_IDS:
      return isSetEventIds();
    case VACCINE_IDS:
      return isSetVaccineIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCentreInfo)
      return this.equals((TCentreInfo)that);
    return false;
  }

  public boolean equals(TCentreInfo that) {
    if (that == null)
      return false;

    boolean this_present_centreId = true;
    boolean that_present_centreId = true;
    if (this_present_centreId || that_present_centreId) {
      if (!(this_present_centreId && that_present_centreId))
        return false;
      if (this.centreId != that.centreId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_phoneNumber = true && this.isSetPhoneNumber();
    boolean that_present_phoneNumber = true && that.isSetPhoneNumber();
    if (this_present_phoneNumber || that_present_phoneNumber) {
      if (!(this_present_phoneNumber && that_present_phoneNumber))
        return false;
      if (!this.phoneNumber.equals(that.phoneNumber))
        return false;
    }

    boolean this_present_eventIds = true && this.isSetEventIds();
    boolean that_present_eventIds = true && that.isSetEventIds();
    if (this_present_eventIds || that_present_eventIds) {
      if (!(this_present_eventIds && that_present_eventIds))
        return false;
      if (!this.eventIds.equals(that.eventIds))
        return false;
    }

    boolean this_present_vaccineIds = true && this.isSetVaccineIds();
    boolean that_present_vaccineIds = true && that.isSetVaccineIds();
    if (this_present_vaccineIds || that_present_vaccineIds) {
      if (!(this_present_vaccineIds && that_present_vaccineIds))
        return false;
      if (!this.vaccineIds.equals(that.vaccineIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TCentreInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCentreId()).compareTo(other.isSetCentreId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCentreId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.centreId, other.centreId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneNumber()).compareTo(other.isSetPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, other.phoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventIds()).compareTo(other.isSetEventIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventIds, other.eventIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVaccineIds()).compareTo(other.isSetVaccineIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVaccineIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vaccineIds, other.vaccineIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCentreInfo(");
    boolean first = true;

    sb.append("centreId:");
    sb.append(this.centreId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneNumber:");
    if (this.phoneNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.phoneNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventIds:");
    if (this.eventIds == null) {
      sb.append("null");
    } else {
      sb.append(this.eventIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vaccineIds:");
    if (this.vaccineIds == null) {
      sb.append("null");
    } else {
      sb.append(this.vaccineIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'centreId' because it's a primitive and you chose the non-beans generator.
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (address == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'address' was not present! Struct: " + toString());
    }
    if (phoneNumber == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'phoneNumber' was not present! Struct: " + toString());
    }
    if (eventIds == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eventIds' was not present! Struct: " + toString());
    }
    if (vaccineIds == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'vaccineIds' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCentreInfoStandardSchemeFactory implements SchemeFactory {
    public TCentreInfoStandardScheme getScheme() {
      return new TCentreInfoStandardScheme();
    }
  }

  private static class TCentreInfoStandardScheme extends StandardScheme<TCentreInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCentreInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CENTRE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.centreId = iprot.readI32();
              struct.setCentreIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phoneNumber = iprot.readString();
              struct.setPhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EVENT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.eventIds = new ArrayList<Integer>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  int _elem2;
                  _elem2 = iprot.readI32();
                  struct.eventIds.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setEventIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VACCINE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.vaccineIds = new ArrayList<Integer>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  int _elem5;
                  _elem5 = iprot.readI32();
                  struct.vaccineIds.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setVaccineIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCentreId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'centreId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCentreInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CENTRE_ID_FIELD_DESC);
      oprot.writeI32(struct.centreId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.phoneNumber != null) {
        oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.phoneNumber);
        oprot.writeFieldEnd();
      }
      if (struct.eventIds != null) {
        oprot.writeFieldBegin(EVENT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.eventIds.size()));
          for (int _iter6 : struct.eventIds)
          {
            oprot.writeI32(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.vaccineIds != null) {
        oprot.writeFieldBegin(VACCINE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.vaccineIds.size()));
          for (int _iter7 : struct.vaccineIds)
          {
            oprot.writeI32(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCentreInfoTupleSchemeFactory implements SchemeFactory {
    public TCentreInfoTupleScheme getScheme() {
      return new TCentreInfoTupleScheme();
    }
  }

  private static class TCentreInfoTupleScheme extends TupleScheme<TCentreInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCentreInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.centreId);
      oprot.writeString(struct.name);
      oprot.writeString(struct.address);
      oprot.writeString(struct.phoneNumber);
      {
        oprot.writeI32(struct.eventIds.size());
        for (int _iter8 : struct.eventIds)
        {
          oprot.writeI32(_iter8);
        }
      }
      {
        oprot.writeI32(struct.vaccineIds.size());
        for (int _iter9 : struct.vaccineIds)
        {
          oprot.writeI32(_iter9);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCentreInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.centreId = iprot.readI32();
      struct.setCentreIdIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.address = iprot.readString();
      struct.setAddressIsSet(true);
      struct.phoneNumber = iprot.readString();
      struct.setPhoneNumberIsSet(true);
      {
        org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.eventIds = new ArrayList<Integer>(_list10.size);
        for (int _i11 = 0; _i11 < _list10.size; ++_i11)
        {
          int _elem12;
          _elem12 = iprot.readI32();
          struct.eventIds.add(_elem12);
        }
      }
      struct.setEventIdsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.vaccineIds = new ArrayList<Integer>(_list13.size);
        for (int _i14 = 0; _i14 < _list13.size; ++_i14)
        {
          int _elem15;
          _elem15 = iprot.readI32();
          struct.vaccineIds.add(_elem15);
        }
      }
      struct.setVaccineIdsIsSet(true);
    }
  }

}

