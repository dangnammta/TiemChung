/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "vr_shared_types.h"

#include <algorithm>

namespace CRDHN { namespace VR { namespace Data {

int _kTEventStatusValues[] = {
  TES_AVAILABLE,
  TES_PENDING,
  TES_DISABLE,
  TES_DELETED
};
const char* _kTEventStatusNames[] = {
  "TES_AVAILABLE",
  "TES_PENDING",
  "TES_DISABLE",
  "TES_DELETED"
};
const std::map<int, const char*> _TEventStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTEventStatusValues, _kTEventStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTInjectionStatusValues[] = {
  TIS_REGISTED,
  TIS_VACCINATED,
  TIS_CANCELED
};
const char* _kTInjectionStatusNames[] = {
  "TIS_REGISTED",
  "TIS_VACCINATED",
  "TIS_CANCELED"
};
const std::map<int, const char*> _TInjectionStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTInjectionStatusValues, _kTInjectionStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTRegistrationTypeValues[] = {
  TRT_ONLINE,
  TRT_MANUAL
};
const char* _kTRegistrationTypeNames[] = {
  "TRT_ONLINE",
  "TRT_MANUAL"
};
const std::map<int, const char*> _TRegistrationType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTRegistrationTypeValues, _kTRegistrationTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* TCentreInfo::ascii_fingerprint = "7C4E4C49880E87B3D26B88B81CD8E58B";
const uint8_t TCentreInfo::binary_fingerprint[16] = {0x7C,0x4E,0x4C,0x49,0x88,0x0E,0x87,0xB3,0xD2,0x6B,0x88,0xB8,0x1C,0xD8,0xE5,0x8B};

uint32_t TCentreInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_centreId = false;
  bool isset_name = false;
  bool isset_address = false;
  bool isset_phoneNumber = false;
  bool isset_eventIds = false;
  bool isset_vaccineIds = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->centreId);
          isset_centreId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          isset_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phoneNumber);
          isset_phoneNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->eventIds.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->eventIds.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI32(this->eventIds[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_eventIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vaccineIds.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->vaccineIds.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI32(this->vaccineIds[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          isset_vaccineIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_centreId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_address)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_phoneNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vaccineIds)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TCentreInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TCentreInfo");

  xfer += oprot->writeFieldBegin("centreId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->centreId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phoneNumber", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->phoneNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventIds", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->eventIds.size()));
    std::vector<TEID> ::const_iterator _iter10;
    for (_iter10 = this->eventIds.begin(); _iter10 != this->eventIds.end(); ++_iter10)
    {
      xfer += oprot->writeI32((*_iter10));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vaccineIds", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->vaccineIds.size()));
    std::vector<TVID> ::const_iterator _iter11;
    for (_iter11 = this->vaccineIds.begin(); _iter11 != this->vaccineIds.end(); ++_iter11)
    {
      xfer += oprot->writeI32((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCentreInfo &a, TCentreInfo &b) {
  using ::std::swap;
  swap(a.centreId, b.centreId);
  swap(a.name, b.name);
  swap(a.address, b.address);
  swap(a.phoneNumber, b.phoneNumber);
  swap(a.eventIds, b.eventIds);
  swap(a.vaccineIds, b.vaccineIds);
}

const char* TVaccineInfo::ascii_fingerprint = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
const uint8_t TVaccineInfo::binary_fingerprint[16] = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

uint32_t TVaccineInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_vaccineId = false;
  bool isset_name = false;
  bool isset_description = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vaccineId);
          isset_vaccineId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          isset_description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_vaccineId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_description)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TVaccineInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TVaccineInfo");

  xfer += oprot->writeFieldBegin("vaccineId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->vaccineId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TVaccineInfo &a, TVaccineInfo &b) {
  using ::std::swap;
  swap(a.vaccineId, b.vaccineId);
  swap(a.name, b.name);
  swap(a.description, b.description);
}

const char* TInjectionOrderInfo::ascii_fingerprint = "A8A6BEAE03204D142B807E866EFAC13F";
const uint8_t TInjectionOrderInfo::binary_fingerprint[16] = {0xA8,0xA6,0xBE,0xAE,0x03,0x20,0x4D,0x14,0x2B,0x80,0x7E,0x86,0x6E,0xFA,0xC1,0x3F};

uint32_t TInjectionOrderInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_registrationCode = false;
  bool isset_injectionOrderNumber = false;
  bool isset_injectionDate = false;
  bool isset_injectionTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->registrationCode);
          isset_registrationCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->injectionOrderNumber);
          isset_injectionOrderNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->injectionDate);
          isset_injectionDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->injectionTime);
          isset_injectionTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_registrationCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_injectionOrderNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_injectionDate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_injectionTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TInjectionOrderInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TInjectionOrderInfo");

  xfer += oprot->writeFieldBegin("registrationCode", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->registrationCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("injectionOrderNumber", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->injectionOrderNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("injectionDate", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->injectionDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("injectionTime", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->injectionTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TInjectionOrderInfo &a, TInjectionOrderInfo &b) {
  using ::std::swap;
  swap(a.registrationCode, b.registrationCode);
  swap(a.injectionOrderNumber, b.injectionOrderNumber);
  swap(a.injectionDate, b.injectionDate);
  swap(a.injectionTime, b.injectionTime);
}

const char* TEventInfo::ascii_fingerprint = "BC5CC124D00A10F06390CC99811DD103";
const uint8_t TEventInfo::binary_fingerprint[16] = {0xBC,0x5C,0xC1,0x24,0xD0,0x0A,0x10,0xF0,0x63,0x90,0xCC,0x99,0x81,0x1D,0xD1,0x03};

uint32_t TEventInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventId = false;
  bool isset_eventName = false;
  bool isset_eventStatus = false;
  bool isset_startTimeRegistration = false;
  bool isset_startTimeInjection = false;
  bool isset_totalOfDoses = false;
  bool isset_numberOfInjectionsPerDay = false;
  bool isset_numberOfRegistrations = false;
  bool isset_numberOfVaccinatedChildren = false;
  bool isset_vaccineId = false;
  bool isset_centreId = false;
  bool isset_registrations = false;
  bool isset_workingShiftNames = false;
  bool isset_endTimeRegistration = false;
  bool isset_extendedRegistrations = false;
  bool isset_isWorkingOnSaturday = false;
  bool isset_isWorkingOnSunday = false;
  bool isset_vacationDays = false;
  bool isset_injectionOrderInfos = false;
  bool isset_mapDate2InjectionOrderNumbers = false;
  bool isset_registrationCodes = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventId);
          isset_eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventName);
          isset_eventName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventStatus);
          isset_eventStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTimeRegistration);
          isset_startTimeRegistration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTimeInjection);
          isset_startTimeInjection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalOfDoses);
          isset_totalOfDoses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfInjectionsPerDay);
          isset_numberOfInjectionsPerDay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfRegistrations);
          isset_numberOfRegistrations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfVaccinatedChildren);
          isset_numberOfVaccinatedChildren = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vaccineId);
          isset_vaccineId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->centreId);
          isset_centreId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->registrations.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->registrations.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readI64(this->registrations[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          isset_registrations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->workingShiftNames.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            this->workingShiftNames.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += iprot->readString(this->workingShiftNames[_i21]);
            }
            xfer += iprot->readListEnd();
          }
          isset_workingShiftNames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->endTimeRegistration);
          isset_endTimeRegistration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->extendedRegistrations.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->extendedRegistrations.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += iprot->readI64(this->extendedRegistrations[_i26]);
            }
            xfer += iprot->readListEnd();
          }
          isset_extendedRegistrations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isWorkingOnSaturday);
          isset_isWorkingOnSaturday = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isWorkingOnSunday);
          isset_isWorkingOnSunday = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->vacationDays.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readSetBegin(_etype30, _size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              TTIME _elem32;
              xfer += iprot->readI64(_elem32);
              this->vacationDays.insert(_elem32);
            }
            xfer += iprot->readSetEnd();
          }
          isset_vacationDays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->injectionOrderInfos.clear();
            uint32_t _size33;
            ::apache::thrift::protocol::TType _ktype34;
            ::apache::thrift::protocol::TType _vtype35;
            xfer += iprot->readMapBegin(_ktype34, _vtype35, _size33);
            uint32_t _i37;
            for (_i37 = 0; _i37 < _size33; ++_i37)
            {
              int32_t _key38;
              xfer += iprot->readI32(_key38);
              TInjectionOrderInfo& _val39 = this->injectionOrderInfos[_key38];
              xfer += _val39.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          isset_injectionOrderInfos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->mapDate2InjectionOrderNumbers.clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _ktype41;
            ::apache::thrift::protocol::TType _vtype42;
            xfer += iprot->readMapBegin(_ktype41, _vtype42, _size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              TTIME _key45;
              xfer += iprot->readI64(_key45);
              std::set<int32_t> & _val46 = this->mapDate2InjectionOrderNumbers[_key45];
              {
                _val46.clear();
                uint32_t _size47;
                ::apache::thrift::protocol::TType _etype50;
                xfer += iprot->readSetBegin(_etype50, _size47);
                uint32_t _i51;
                for (_i51 = 0; _i51 < _size47; ++_i51)
                {
                  int32_t _elem52;
                  xfer += iprot->readI32(_elem52);
                  _val46.insert(_elem52);
                }
                xfer += iprot->readSetEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          isset_mapDate2InjectionOrderNumbers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->registrationCodes.clear();
            uint32_t _size53;
            ::apache::thrift::protocol::TType _etype56;
            xfer += iprot->readSetBegin(_etype56, _size53);
            uint32_t _i57;
            for (_i57 = 0; _i57 < _size53; ++_i57)
            {
              std::string _elem58;
              xfer += iprot->readString(_elem58);
              this->registrationCodes.insert(_elem58);
            }
            xfer += iprot->readSetEnd();
          }
          isset_registrationCodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_startTimeRegistration)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_startTimeInjection)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_totalOfDoses)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numberOfInjectionsPerDay)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numberOfRegistrations)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_numberOfVaccinatedChildren)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vaccineId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_centreId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_registrations)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_workingShiftNames)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_endTimeRegistration)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_extendedRegistrations)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_isWorkingOnSaturday)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_isWorkingOnSunday)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vacationDays)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_injectionOrderInfos)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mapDate2InjectionOrderNumbers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_registrationCodes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TEventInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TEventInfo");

  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->eventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->eventName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventStatus", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->eventStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTimeRegistration", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->startTimeRegistration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTimeInjection", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->startTimeInjection);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalOfDoses", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->totalOfDoses);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfInjectionsPerDay", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->numberOfInjectionsPerDay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfRegistrations", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->numberOfRegistrations);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfVaccinatedChildren", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->numberOfVaccinatedChildren);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vaccineId", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->vaccineId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("centreId", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->centreId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("registrations", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->registrations.size()));
    std::vector<TRID> ::const_iterator _iter59;
    for (_iter59 = this->registrations.begin(); _iter59 != this->registrations.end(); ++_iter59)
    {
      xfer += oprot->writeI64((*_iter59));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("workingShiftNames", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->workingShiftNames.size()));
    std::vector<std::string> ::const_iterator _iter60;
    for (_iter60 = this->workingShiftNames.begin(); _iter60 != this->workingShiftNames.end(); ++_iter60)
    {
      xfer += oprot->writeString((*_iter60));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTimeRegistration", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->endTimeRegistration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extendedRegistrations", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->extendedRegistrations.size()));
    std::vector<TRID> ::const_iterator _iter61;
    for (_iter61 = this->extendedRegistrations.begin(); _iter61 != this->extendedRegistrations.end(); ++_iter61)
    {
      xfer += oprot->writeI64((*_iter61));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isWorkingOnSaturday", ::apache::thrift::protocol::T_BOOL, 16);
  xfer += oprot->writeBool(this->isWorkingOnSaturday);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isWorkingOnSunday", ::apache::thrift::protocol::T_BOOL, 17);
  xfer += oprot->writeBool(this->isWorkingOnSunday);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vacationDays", ::apache::thrift::protocol::T_SET, 18);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->vacationDays.size()));
    std::set<TTIME> ::const_iterator _iter62;
    for (_iter62 = this->vacationDays.begin(); _iter62 != this->vacationDays.end(); ++_iter62)
    {
      xfer += oprot->writeI64((*_iter62));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("injectionOrderInfos", ::apache::thrift::protocol::T_MAP, 19);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->injectionOrderInfos.size()));
    std::map<int32_t, TInjectionOrderInfo> ::const_iterator _iter63;
    for (_iter63 = this->injectionOrderInfos.begin(); _iter63 != this->injectionOrderInfos.end(); ++_iter63)
    {
      xfer += oprot->writeI32(_iter63->first);
      xfer += _iter63->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mapDate2InjectionOrderNumbers", ::apache::thrift::protocol::T_MAP, 20);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I64, ::apache::thrift::protocol::T_SET, static_cast<uint32_t>(this->mapDate2InjectionOrderNumbers.size()));
    std::map<TTIME, std::set<int32_t> > ::const_iterator _iter64;
    for (_iter64 = this->mapDate2InjectionOrderNumbers.begin(); _iter64 != this->mapDate2InjectionOrderNumbers.end(); ++_iter64)
    {
      xfer += oprot->writeI64(_iter64->first);
      {
        xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(_iter64->second.size()));
        std::set<int32_t> ::const_iterator _iter65;
        for (_iter65 = _iter64->second.begin(); _iter65 != _iter64->second.end(); ++_iter65)
        {
          xfer += oprot->writeI32((*_iter65));
        }
        xfer += oprot->writeSetEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("registrationCodes", ::apache::thrift::protocol::T_SET, 21);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->registrationCodes.size()));
    std::set<std::string> ::const_iterator _iter66;
    for (_iter66 = this->registrationCodes.begin(); _iter66 != this->registrationCodes.end(); ++_iter66)
    {
      xfer += oprot->writeString((*_iter66));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TEventInfo &a, TEventInfo &b) {
  using ::std::swap;
  swap(a.eventId, b.eventId);
  swap(a.eventName, b.eventName);
  swap(a.eventStatus, b.eventStatus);
  swap(a.startTimeRegistration, b.startTimeRegistration);
  swap(a.startTimeInjection, b.startTimeInjection);
  swap(a.totalOfDoses, b.totalOfDoses);
  swap(a.numberOfInjectionsPerDay, b.numberOfInjectionsPerDay);
  swap(a.numberOfRegistrations, b.numberOfRegistrations);
  swap(a.numberOfVaccinatedChildren, b.numberOfVaccinatedChildren);
  swap(a.vaccineId, b.vaccineId);
  swap(a.centreId, b.centreId);
  swap(a.registrations, b.registrations);
  swap(a.workingShiftNames, b.workingShiftNames);
  swap(a.endTimeRegistration, b.endTimeRegistration);
  swap(a.extendedRegistrations, b.extendedRegistrations);
  swap(a.isWorkingOnSaturday, b.isWorkingOnSaturday);
  swap(a.isWorkingOnSunday, b.isWorkingOnSunday);
  swap(a.vacationDays, b.vacationDays);
  swap(a.injectionOrderInfos, b.injectionOrderInfos);
  swap(a.mapDate2InjectionOrderNumbers, b.mapDate2InjectionOrderNumbers);
  swap(a.registrationCodes, b.registrationCodes);
}

const char* TRegistrationCodes::ascii_fingerprint = "9363DE063E60D682BE7B2E0EE221A4DF";
const uint8_t TRegistrationCodes::binary_fingerprint[16] = {0x93,0x63,0xDE,0x06,0x3E,0x60,0xD6,0x82,0xBE,0x7B,0x2E,0x0E,0xE2,0x21,0xA4,0xDF};

uint32_t TRegistrationCodes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventId = false;
  bool isset_mapRCode2RId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventId);
          isset_eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->mapRCode2RId.clear();
            uint32_t _size67;
            ::apache::thrift::protocol::TType _ktype68;
            ::apache::thrift::protocol::TType _vtype69;
            xfer += iprot->readMapBegin(_ktype68, _vtype69, _size67);
            uint32_t _i71;
            for (_i71 = 0; _i71 < _size67; ++_i71)
            {
              std::string _key72;
              xfer += iprot->readString(_key72);
              TRID& _val73 = this->mapRCode2RId[_key72];
              xfer += iprot->readI64(_val73);
            }
            xfer += iprot->readMapEnd();
          }
          isset_mapRCode2RId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mapRCode2RId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TRegistrationCodes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TRegistrationCodes");

  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->eventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mapRCode2RId", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->mapRCode2RId.size()));
    std::map<std::string, TRID> ::const_iterator _iter74;
    for (_iter74 = this->mapRCode2RId.begin(); _iter74 != this->mapRCode2RId.end(); ++_iter74)
    {
      xfer += oprot->writeString(_iter74->first);
      xfer += oprot->writeI64(_iter74->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TRegistrationCodes &a, TRegistrationCodes &b) {
  using ::std::swap;
  swap(a.eventId, b.eventId);
  swap(a.mapRCode2RId, b.mapRCode2RId);
}

const char* TEventBasicInfo::ascii_fingerprint = "74398DAEB072A5FC624BBF19785D901D";
const uint8_t TEventBasicInfo::binary_fingerprint[16] = {0x74,0x39,0x8D,0xAE,0xB0,0x72,0xA5,0xFC,0x62,0x4B,0xBF,0x19,0x78,0x5D,0x90,0x1D};

uint32_t TEventBasicInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_eventId = false;
  bool isset_eventName = false;
  bool isset_eventStatus = false;
  bool isset_startTimeRegistration = false;
  bool isset_vaccineId = false;
  bool isset_vaccineName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventId);
          isset_eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventName);
          isset_eventName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventStatus);
          isset_eventStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startTimeRegistration);
          isset_startTimeRegistration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vaccineId);
          isset_vaccineId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vaccineName);
          isset_vaccineName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_eventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_startTimeRegistration)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vaccineId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_vaccineName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TEventBasicInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TEventBasicInfo");

  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->eventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->eventName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventStatus", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->eventStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTimeRegistration", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->startTimeRegistration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vaccineId", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->vaccineId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vaccineName", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->vaccineName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TEventBasicInfo &a, TEventBasicInfo &b) {
  using ::std::swap;
  swap(a.eventId, b.eventId);
  swap(a.eventName, b.eventName);
  swap(a.eventStatus, b.eventStatus);
  swap(a.startTimeRegistration, b.startTimeRegistration);
  swap(a.vaccineId, b.vaccineId);
  swap(a.vaccineName, b.vaccineName);
}

const char* TRegistrationInfo::ascii_fingerprint = "0D3F3C8388E3DA2F40DB2C4013BB4588";
const uint8_t TRegistrationInfo::binary_fingerprint[16] = {0x0D,0x3F,0x3C,0x83,0x88,0xE3,0xDA,0x2F,0x40,0xDB,0x2C,0x40,0x13,0xBB,0x45,0x88};

uint32_t TRegistrationInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_registrationId = false;
  bool isset_registrationType = false;
  bool isset_registrationTime = false;
  bool isset_eventId = false;
  bool isset_childrenName = false;
  bool isset_childrenDateOfBirth = false;
  bool isset_childrenCarrierName = false;
  bool isset_childrenCarrierPIN = false;
  bool isset_childrenCarrierPhoneNumber = false;
  bool isset_childrenCarrierEmail = false;
  bool isset_childrenCarrierAddress = false;
  bool isset_injectionStatus = false;
  bool isset_registrationCode = false;
  bool isset_injectionOrderNumber = false;
  bool isset_injectionTime = false;
  bool isset_injectionDate = false;
  bool isset_injectionRealTime = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->registrationId);
          isset_registrationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->registrationType);
          isset_registrationType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->registrationTime);
          isset_registrationTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eventId);
          isset_eventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->childrenName);
          isset_childrenName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->childrenDateOfBirth);
          isset_childrenDateOfBirth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->childrenCarrierName);
          isset_childrenCarrierName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->childrenCarrierPIN);
          isset_childrenCarrierPIN = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->childrenCarrierPhoneNumber);
          isset_childrenCarrierPhoneNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->childrenCarrierEmail);
          isset_childrenCarrierEmail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->childrenCarrierAddress);
          isset_childrenCarrierAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->injectionStatus);
          isset_injectionStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->registrationCode);
          isset_registrationCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->injectionOrderNumber);
          isset_injectionOrderNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->injectionTime);
          isset_injectionTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->injectionDate);
          isset_injectionDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->injectionRealTime);
          isset_injectionRealTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_registrationId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_registrationType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_registrationTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_eventId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_childrenName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_childrenDateOfBirth)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_childrenCarrierName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_childrenCarrierPIN)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_childrenCarrierPhoneNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_childrenCarrierEmail)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_childrenCarrierAddress)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_injectionStatus)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_registrationCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_injectionOrderNumber)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_injectionTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_injectionDate)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_injectionRealTime)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TRegistrationInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TRegistrationInfo");

  xfer += oprot->writeFieldBegin("registrationId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->registrationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("registrationType", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->registrationType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("registrationTime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->registrationTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->eventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("childrenName", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->childrenName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("childrenDateOfBirth", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->childrenDateOfBirth);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("childrenCarrierName", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->childrenCarrierName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("childrenCarrierPIN", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->childrenCarrierPIN);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("childrenCarrierPhoneNumber", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->childrenCarrierPhoneNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("childrenCarrierEmail", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->childrenCarrierEmail);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("childrenCarrierAddress", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->childrenCarrierAddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("injectionStatus", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->injectionStatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("registrationCode", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->registrationCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("injectionOrderNumber", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->injectionOrderNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("injectionTime", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->injectionTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("injectionDate", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->injectionDate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("injectionRealTime", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->injectionRealTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TRegistrationInfo &a, TRegistrationInfo &b) {
  using ::std::swap;
  swap(a.registrationId, b.registrationId);
  swap(a.registrationType, b.registrationType);
  swap(a.registrationTime, b.registrationTime);
  swap(a.eventId, b.eventId);
  swap(a.childrenName, b.childrenName);
  swap(a.childrenDateOfBirth, b.childrenDateOfBirth);
  swap(a.childrenCarrierName, b.childrenCarrierName);
  swap(a.childrenCarrierPIN, b.childrenCarrierPIN);
  swap(a.childrenCarrierPhoneNumber, b.childrenCarrierPhoneNumber);
  swap(a.childrenCarrierEmail, b.childrenCarrierEmail);
  swap(a.childrenCarrierAddress, b.childrenCarrierAddress);
  swap(a.injectionStatus, b.injectionStatus);
  swap(a.registrationCode, b.registrationCode);
  swap(a.injectionOrderNumber, b.injectionOrderNumber);
  swap(a.injectionTime, b.injectionTime);
  swap(a.injectionDate, b.injectionDate);
  swap(a.injectionRealTime, b.injectionRealTime);
}

const char* TDailyRegistrations::ascii_fingerprint = "AED0FF6457343172D8ADAA9756E1239C";
const uint8_t TDailyRegistrations::binary_fingerprint[16] = {0xAE,0xD0,0xFF,0x64,0x57,0x34,0x31,0x72,0xD8,0xAD,0xAA,0x97,0x56,0xE1,0x23,0x9C};

uint32_t TDailyRegistrations::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->registrations.clear();
            uint32_t _size75;
            ::apache::thrift::protocol::TType _ktype76;
            ::apache::thrift::protocol::TType _vtype77;
            xfer += iprot->readMapBegin(_ktype76, _vtype77, _size75);
            uint32_t _i79;
            for (_i79 = 0; _i79 < _size75; ++_i79)
            {
              std::string _key80;
              xfer += iprot->readString(_key80);
              TRID& _val81 = this->registrations[_key80];
              xfer += iprot->readI64(_val81);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.registrations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDailyRegistrations::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TDailyRegistrations");

  xfer += oprot->writeFieldBegin("registrations", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->registrations.size()));
    std::map<std::string, TRID> ::const_iterator _iter82;
    for (_iter82 = this->registrations.begin(); _iter82 != this->registrations.end(); ++_iter82)
    {
      xfer += oprot->writeString(_iter82->first);
      xfer += oprot->writeI64(_iter82->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDailyRegistrations &a, TDailyRegistrations &b) {
  using ::std::swap;
  swap(a.registrations, b.registrations);
  swap(a.__isset, b.__isset);
}

const char* TDailyInjections::ascii_fingerprint = "E49D7D1A9013CC81CD0F69D631EF82E4";
const uint8_t TDailyInjections::binary_fingerprint[16] = {0xE4,0x9D,0x7D,0x1A,0x90,0x13,0xCC,0x81,0xCD,0x0F,0x69,0xD6,0x31,0xEF,0x82,0xE4};

uint32_t TDailyInjections::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->registrations.clear();
            uint32_t _size83;
            ::apache::thrift::protocol::TType _etype86;
            xfer += iprot->readListBegin(_etype86, _size83);
            this->registrations.resize(_size83);
            uint32_t _i87;
            for (_i87 = 0; _i87 < _size83; ++_i87)
            {
              xfer += iprot->readI64(this->registrations[_i87]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.registrations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDailyInjections::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TDailyInjections");

  xfer += oprot->writeFieldBegin("registrations", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->registrations.size()));
    std::vector<TRID> ::const_iterator _iter88;
    for (_iter88 = this->registrations.begin(); _iter88 != this->registrations.end(); ++_iter88)
    {
      xfer += oprot->writeI64((*_iter88));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDailyInjections &a, TDailyInjections &b) {
  using ::std::swap;
  swap(a.registrations, b.registrations);
  swap(a.__isset, b.__isset);
}

}}} // namespace
