/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TVRRegistrationInfoStoreService_H
#define TVRRegistrationInfoStoreService_H

#include <thrift/TDispatchProcessor.h>
#include "vrregistrationinfostoreservice_types.h"

namespace CRDHN { namespace VR {

class TVRRegistrationInfoStoreServiceIf {
 public:
  virtual ~TVRRegistrationInfoStoreServiceIf() {}
  virtual  ::CRDHN::VR::Data::TRID add(const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo) = 0;
  virtual bool update(const  ::CRDHN::VR::Data::TRID registrationId, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo) = 0;
  virtual void get( ::CRDHN::VR::Data::TRegistrationInfo& _return, const  ::CRDHN::VR::Data::TRID registrationId) = 0;
  virtual bool remove(const  ::CRDHN::VR::Data::TRID registrationId) = 0;
  virtual bool setRegistrationCode(const  ::CRDHN::VR::Data::TRID registrationId, const std::string& registrationCode) = 0;
  virtual bool updateInjectionStatus(const  ::CRDHN::VR::Data::TRID registrationId, const int32_t injectionStatus) = 0;
};

class TVRRegistrationInfoStoreServiceIfFactory {
 public:
  typedef TVRRegistrationInfoStoreServiceIf Handler;

  virtual ~TVRRegistrationInfoStoreServiceIfFactory() {}

  virtual TVRRegistrationInfoStoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TVRRegistrationInfoStoreServiceIf* /* handler */) = 0;
};

class TVRRegistrationInfoStoreServiceIfSingletonFactory : virtual public TVRRegistrationInfoStoreServiceIfFactory {
 public:
  TVRRegistrationInfoStoreServiceIfSingletonFactory(const boost::shared_ptr<TVRRegistrationInfoStoreServiceIf>& iface) : iface_(iface) {}
  virtual ~TVRRegistrationInfoStoreServiceIfSingletonFactory() {}

  virtual TVRRegistrationInfoStoreServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TVRRegistrationInfoStoreServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TVRRegistrationInfoStoreServiceIf> iface_;
};

class TVRRegistrationInfoStoreServiceNull : virtual public TVRRegistrationInfoStoreServiceIf {
 public:
  virtual ~TVRRegistrationInfoStoreServiceNull() {}
   ::CRDHN::VR::Data::TRID add(const  ::CRDHN::VR::Data::TRegistrationInfo& /* registrationInfo */) {
     ::CRDHN::VR::Data::TRID _return = 0;
    return _return;
  }
  bool update(const  ::CRDHN::VR::Data::TRID /* registrationId */, const  ::CRDHN::VR::Data::TRegistrationInfo& /* registrationInfo */) {
    bool _return = false;
    return _return;
  }
  void get( ::CRDHN::VR::Data::TRegistrationInfo& /* _return */, const  ::CRDHN::VR::Data::TRID /* registrationId */) {
    return;
  }
  bool remove(const  ::CRDHN::VR::Data::TRID /* registrationId */) {
    bool _return = false;
    return _return;
  }
  bool setRegistrationCode(const  ::CRDHN::VR::Data::TRID /* registrationId */, const std::string& /* registrationCode */) {
    bool _return = false;
    return _return;
  }
  bool updateInjectionStatus(const  ::CRDHN::VR::Data::TRID /* registrationId */, const int32_t /* injectionStatus */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _TVRRegistrationInfoStoreService_add_args__isset {
  _TVRRegistrationInfoStoreService_add_args__isset() : registrationInfo(false) {}
  bool registrationInfo;
} _TVRRegistrationInfoStoreService_add_args__isset;

class TVRRegistrationInfoStoreService_add_args {
 public:

  TVRRegistrationInfoStoreService_add_args() {
  }

  virtual ~TVRRegistrationInfoStoreService_add_args() throw() {}

   ::CRDHN::VR::Data::TRegistrationInfo registrationInfo;

  _TVRRegistrationInfoStoreService_add_args__isset __isset;

  void __set_registrationInfo(const  ::CRDHN::VR::Data::TRegistrationInfo& val) {
    registrationInfo = val;
  }

  bool operator == (const TVRRegistrationInfoStoreService_add_args & rhs) const
  {
    if (!(registrationInfo == rhs.registrationInfo))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationInfoStoreService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationInfoStoreService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRRegistrationInfoStoreService_add_pargs {
 public:


  virtual ~TVRRegistrationInfoStoreService_add_pargs() throw() {}

  const  ::CRDHN::VR::Data::TRegistrationInfo* registrationInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationInfoStoreService_add_result__isset {
  _TVRRegistrationInfoStoreService_add_result__isset() : success(false) {}
  bool success;
} _TVRRegistrationInfoStoreService_add_result__isset;

class TVRRegistrationInfoStoreService_add_result {
 public:

  TVRRegistrationInfoStoreService_add_result() : success(0) {
  }

  virtual ~TVRRegistrationInfoStoreService_add_result() throw() {}

   ::CRDHN::VR::Data::TRID success;

  _TVRRegistrationInfoStoreService_add_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Data::TRID val) {
    success = val;
  }

  bool operator == (const TVRRegistrationInfoStoreService_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationInfoStoreService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationInfoStoreService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationInfoStoreService_add_presult__isset {
  _TVRRegistrationInfoStoreService_add_presult__isset() : success(false) {}
  bool success;
} _TVRRegistrationInfoStoreService_add_presult__isset;

class TVRRegistrationInfoStoreService_add_presult {
 public:


  virtual ~TVRRegistrationInfoStoreService_add_presult() throw() {}

   ::CRDHN::VR::Data::TRID* success;

  _TVRRegistrationInfoStoreService_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRRegistrationInfoStoreService_update_args__isset {
  _TVRRegistrationInfoStoreService_update_args__isset() : registrationId(false), registrationInfo(false) {}
  bool registrationId;
  bool registrationInfo;
} _TVRRegistrationInfoStoreService_update_args__isset;

class TVRRegistrationInfoStoreService_update_args {
 public:

  TVRRegistrationInfoStoreService_update_args() : registrationId(0) {
  }

  virtual ~TVRRegistrationInfoStoreService_update_args() throw() {}

   ::CRDHN::VR::Data::TRID registrationId;
   ::CRDHN::VR::Data::TRegistrationInfo registrationInfo;

  _TVRRegistrationInfoStoreService_update_args__isset __isset;

  void __set_registrationId(const  ::CRDHN::VR::Data::TRID val) {
    registrationId = val;
  }

  void __set_registrationInfo(const  ::CRDHN::VR::Data::TRegistrationInfo& val) {
    registrationInfo = val;
  }

  bool operator == (const TVRRegistrationInfoStoreService_update_args & rhs) const
  {
    if (!(registrationId == rhs.registrationId))
      return false;
    if (!(registrationInfo == rhs.registrationInfo))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationInfoStoreService_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationInfoStoreService_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRRegistrationInfoStoreService_update_pargs {
 public:


  virtual ~TVRRegistrationInfoStoreService_update_pargs() throw() {}

  const  ::CRDHN::VR::Data::TRID* registrationId;
  const  ::CRDHN::VR::Data::TRegistrationInfo* registrationInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationInfoStoreService_update_result__isset {
  _TVRRegistrationInfoStoreService_update_result__isset() : success(false) {}
  bool success;
} _TVRRegistrationInfoStoreService_update_result__isset;

class TVRRegistrationInfoStoreService_update_result {
 public:

  TVRRegistrationInfoStoreService_update_result() : success(0) {
  }

  virtual ~TVRRegistrationInfoStoreService_update_result() throw() {}

  bool success;

  _TVRRegistrationInfoStoreService_update_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVRRegistrationInfoStoreService_update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationInfoStoreService_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationInfoStoreService_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationInfoStoreService_update_presult__isset {
  _TVRRegistrationInfoStoreService_update_presult__isset() : success(false) {}
  bool success;
} _TVRRegistrationInfoStoreService_update_presult__isset;

class TVRRegistrationInfoStoreService_update_presult {
 public:


  virtual ~TVRRegistrationInfoStoreService_update_presult() throw() {}

  bool* success;

  _TVRRegistrationInfoStoreService_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRRegistrationInfoStoreService_get_args__isset {
  _TVRRegistrationInfoStoreService_get_args__isset() : registrationId(false) {}
  bool registrationId;
} _TVRRegistrationInfoStoreService_get_args__isset;

class TVRRegistrationInfoStoreService_get_args {
 public:

  TVRRegistrationInfoStoreService_get_args() : registrationId(0) {
  }

  virtual ~TVRRegistrationInfoStoreService_get_args() throw() {}

   ::CRDHN::VR::Data::TRID registrationId;

  _TVRRegistrationInfoStoreService_get_args__isset __isset;

  void __set_registrationId(const  ::CRDHN::VR::Data::TRID val) {
    registrationId = val;
  }

  bool operator == (const TVRRegistrationInfoStoreService_get_args & rhs) const
  {
    if (!(registrationId == rhs.registrationId))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationInfoStoreService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationInfoStoreService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRRegistrationInfoStoreService_get_pargs {
 public:


  virtual ~TVRRegistrationInfoStoreService_get_pargs() throw() {}

  const  ::CRDHN::VR::Data::TRID* registrationId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationInfoStoreService_get_result__isset {
  _TVRRegistrationInfoStoreService_get_result__isset() : success(false) {}
  bool success;
} _TVRRegistrationInfoStoreService_get_result__isset;

class TVRRegistrationInfoStoreService_get_result {
 public:

  TVRRegistrationInfoStoreService_get_result() {
  }

  virtual ~TVRRegistrationInfoStoreService_get_result() throw() {}

   ::CRDHN::VR::Data::TRegistrationInfo success;

  _TVRRegistrationInfoStoreService_get_result__isset __isset;

  void __set_success(const  ::CRDHN::VR::Data::TRegistrationInfo& val) {
    success = val;
  }

  bool operator == (const TVRRegistrationInfoStoreService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationInfoStoreService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationInfoStoreService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationInfoStoreService_get_presult__isset {
  _TVRRegistrationInfoStoreService_get_presult__isset() : success(false) {}
  bool success;
} _TVRRegistrationInfoStoreService_get_presult__isset;

class TVRRegistrationInfoStoreService_get_presult {
 public:


  virtual ~TVRRegistrationInfoStoreService_get_presult() throw() {}

   ::CRDHN::VR::Data::TRegistrationInfo* success;

  _TVRRegistrationInfoStoreService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRRegistrationInfoStoreService_remove_args__isset {
  _TVRRegistrationInfoStoreService_remove_args__isset() : registrationId(false) {}
  bool registrationId;
} _TVRRegistrationInfoStoreService_remove_args__isset;

class TVRRegistrationInfoStoreService_remove_args {
 public:

  TVRRegistrationInfoStoreService_remove_args() : registrationId(0) {
  }

  virtual ~TVRRegistrationInfoStoreService_remove_args() throw() {}

   ::CRDHN::VR::Data::TRID registrationId;

  _TVRRegistrationInfoStoreService_remove_args__isset __isset;

  void __set_registrationId(const  ::CRDHN::VR::Data::TRID val) {
    registrationId = val;
  }

  bool operator == (const TVRRegistrationInfoStoreService_remove_args & rhs) const
  {
    if (!(registrationId == rhs.registrationId))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationInfoStoreService_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationInfoStoreService_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRRegistrationInfoStoreService_remove_pargs {
 public:


  virtual ~TVRRegistrationInfoStoreService_remove_pargs() throw() {}

  const  ::CRDHN::VR::Data::TRID* registrationId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationInfoStoreService_remove_result__isset {
  _TVRRegistrationInfoStoreService_remove_result__isset() : success(false) {}
  bool success;
} _TVRRegistrationInfoStoreService_remove_result__isset;

class TVRRegistrationInfoStoreService_remove_result {
 public:

  TVRRegistrationInfoStoreService_remove_result() : success(0) {
  }

  virtual ~TVRRegistrationInfoStoreService_remove_result() throw() {}

  bool success;

  _TVRRegistrationInfoStoreService_remove_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVRRegistrationInfoStoreService_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationInfoStoreService_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationInfoStoreService_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationInfoStoreService_remove_presult__isset {
  _TVRRegistrationInfoStoreService_remove_presult__isset() : success(false) {}
  bool success;
} _TVRRegistrationInfoStoreService_remove_presult__isset;

class TVRRegistrationInfoStoreService_remove_presult {
 public:


  virtual ~TVRRegistrationInfoStoreService_remove_presult() throw() {}

  bool* success;

  _TVRRegistrationInfoStoreService_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRRegistrationInfoStoreService_setRegistrationCode_args__isset {
  _TVRRegistrationInfoStoreService_setRegistrationCode_args__isset() : registrationId(false), registrationCode(false) {}
  bool registrationId;
  bool registrationCode;
} _TVRRegistrationInfoStoreService_setRegistrationCode_args__isset;

class TVRRegistrationInfoStoreService_setRegistrationCode_args {
 public:

  TVRRegistrationInfoStoreService_setRegistrationCode_args() : registrationId(0), registrationCode() {
  }

  virtual ~TVRRegistrationInfoStoreService_setRegistrationCode_args() throw() {}

   ::CRDHN::VR::Data::TRID registrationId;
  std::string registrationCode;

  _TVRRegistrationInfoStoreService_setRegistrationCode_args__isset __isset;

  void __set_registrationId(const  ::CRDHN::VR::Data::TRID val) {
    registrationId = val;
  }

  void __set_registrationCode(const std::string& val) {
    registrationCode = val;
  }

  bool operator == (const TVRRegistrationInfoStoreService_setRegistrationCode_args & rhs) const
  {
    if (!(registrationId == rhs.registrationId))
      return false;
    if (!(registrationCode == rhs.registrationCode))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationInfoStoreService_setRegistrationCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationInfoStoreService_setRegistrationCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRRegistrationInfoStoreService_setRegistrationCode_pargs {
 public:


  virtual ~TVRRegistrationInfoStoreService_setRegistrationCode_pargs() throw() {}

  const  ::CRDHN::VR::Data::TRID* registrationId;
  const std::string* registrationCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationInfoStoreService_setRegistrationCode_result__isset {
  _TVRRegistrationInfoStoreService_setRegistrationCode_result__isset() : success(false) {}
  bool success;
} _TVRRegistrationInfoStoreService_setRegistrationCode_result__isset;

class TVRRegistrationInfoStoreService_setRegistrationCode_result {
 public:

  TVRRegistrationInfoStoreService_setRegistrationCode_result() : success(0) {
  }

  virtual ~TVRRegistrationInfoStoreService_setRegistrationCode_result() throw() {}

  bool success;

  _TVRRegistrationInfoStoreService_setRegistrationCode_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVRRegistrationInfoStoreService_setRegistrationCode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationInfoStoreService_setRegistrationCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationInfoStoreService_setRegistrationCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationInfoStoreService_setRegistrationCode_presult__isset {
  _TVRRegistrationInfoStoreService_setRegistrationCode_presult__isset() : success(false) {}
  bool success;
} _TVRRegistrationInfoStoreService_setRegistrationCode_presult__isset;

class TVRRegistrationInfoStoreService_setRegistrationCode_presult {
 public:


  virtual ~TVRRegistrationInfoStoreService_setRegistrationCode_presult() throw() {}

  bool* success;

  _TVRRegistrationInfoStoreService_setRegistrationCode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TVRRegistrationInfoStoreService_updateInjectionStatus_args__isset {
  _TVRRegistrationInfoStoreService_updateInjectionStatus_args__isset() : registrationId(false), injectionStatus(false) {}
  bool registrationId;
  bool injectionStatus;
} _TVRRegistrationInfoStoreService_updateInjectionStatus_args__isset;

class TVRRegistrationInfoStoreService_updateInjectionStatus_args {
 public:

  TVRRegistrationInfoStoreService_updateInjectionStatus_args() : registrationId(0), injectionStatus(0) {
  }

  virtual ~TVRRegistrationInfoStoreService_updateInjectionStatus_args() throw() {}

   ::CRDHN::VR::Data::TRID registrationId;
  int32_t injectionStatus;

  _TVRRegistrationInfoStoreService_updateInjectionStatus_args__isset __isset;

  void __set_registrationId(const  ::CRDHN::VR::Data::TRID val) {
    registrationId = val;
  }

  void __set_injectionStatus(const int32_t val) {
    injectionStatus = val;
  }

  bool operator == (const TVRRegistrationInfoStoreService_updateInjectionStatus_args & rhs) const
  {
    if (!(registrationId == rhs.registrationId))
      return false;
    if (!(injectionStatus == rhs.injectionStatus))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationInfoStoreService_updateInjectionStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationInfoStoreService_updateInjectionStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TVRRegistrationInfoStoreService_updateInjectionStatus_pargs {
 public:


  virtual ~TVRRegistrationInfoStoreService_updateInjectionStatus_pargs() throw() {}

  const  ::CRDHN::VR::Data::TRID* registrationId;
  const int32_t* injectionStatus;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationInfoStoreService_updateInjectionStatus_result__isset {
  _TVRRegistrationInfoStoreService_updateInjectionStatus_result__isset() : success(false) {}
  bool success;
} _TVRRegistrationInfoStoreService_updateInjectionStatus_result__isset;

class TVRRegistrationInfoStoreService_updateInjectionStatus_result {
 public:

  TVRRegistrationInfoStoreService_updateInjectionStatus_result() : success(0) {
  }

  virtual ~TVRRegistrationInfoStoreService_updateInjectionStatus_result() throw() {}

  bool success;

  _TVRRegistrationInfoStoreService_updateInjectionStatus_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const TVRRegistrationInfoStoreService_updateInjectionStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TVRRegistrationInfoStoreService_updateInjectionStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVRRegistrationInfoStoreService_updateInjectionStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TVRRegistrationInfoStoreService_updateInjectionStatus_presult__isset {
  _TVRRegistrationInfoStoreService_updateInjectionStatus_presult__isset() : success(false) {}
  bool success;
} _TVRRegistrationInfoStoreService_updateInjectionStatus_presult__isset;

class TVRRegistrationInfoStoreService_updateInjectionStatus_presult {
 public:


  virtual ~TVRRegistrationInfoStoreService_updateInjectionStatus_presult() throw() {}

  bool* success;

  _TVRRegistrationInfoStoreService_updateInjectionStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TVRRegistrationInfoStoreServiceClient : virtual public TVRRegistrationInfoStoreServiceIf {
 public:
  TVRRegistrationInfoStoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TVRRegistrationInfoStoreServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
   ::CRDHN::VR::Data::TRID add(const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo);
  void send_add(const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo);
   ::CRDHN::VR::Data::TRID recv_add();
  bool update(const  ::CRDHN::VR::Data::TRID registrationId, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo);
  void send_update(const  ::CRDHN::VR::Data::TRID registrationId, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo);
  bool recv_update();
  void get( ::CRDHN::VR::Data::TRegistrationInfo& _return, const  ::CRDHN::VR::Data::TRID registrationId);
  void send_get(const  ::CRDHN::VR::Data::TRID registrationId);
  void recv_get( ::CRDHN::VR::Data::TRegistrationInfo& _return);
  bool remove(const  ::CRDHN::VR::Data::TRID registrationId);
  void send_remove(const  ::CRDHN::VR::Data::TRID registrationId);
  bool recv_remove();
  bool setRegistrationCode(const  ::CRDHN::VR::Data::TRID registrationId, const std::string& registrationCode);
  void send_setRegistrationCode(const  ::CRDHN::VR::Data::TRID registrationId, const std::string& registrationCode);
  bool recv_setRegistrationCode();
  bool updateInjectionStatus(const  ::CRDHN::VR::Data::TRID registrationId, const int32_t injectionStatus);
  void send_updateInjectionStatus(const  ::CRDHN::VR::Data::TRID registrationId, const int32_t injectionStatus);
  bool recv_updateInjectionStatus();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TVRRegistrationInfoStoreServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TVRRegistrationInfoStoreServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TVRRegistrationInfoStoreServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setRegistrationCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateInjectionStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TVRRegistrationInfoStoreServiceProcessor(boost::shared_ptr<TVRRegistrationInfoStoreServiceIf> iface) :
    iface_(iface) {
    processMap_["add"] = &TVRRegistrationInfoStoreServiceProcessor::process_add;
    processMap_["update"] = &TVRRegistrationInfoStoreServiceProcessor::process_update;
    processMap_["get"] = &TVRRegistrationInfoStoreServiceProcessor::process_get;
    processMap_["remove"] = &TVRRegistrationInfoStoreServiceProcessor::process_remove;
    processMap_["setRegistrationCode"] = &TVRRegistrationInfoStoreServiceProcessor::process_setRegistrationCode;
    processMap_["updateInjectionStatus"] = &TVRRegistrationInfoStoreServiceProcessor::process_updateInjectionStatus;
  }

  virtual ~TVRRegistrationInfoStoreServiceProcessor() {}
};

class TVRRegistrationInfoStoreServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TVRRegistrationInfoStoreServiceProcessorFactory(const ::boost::shared_ptr< TVRRegistrationInfoStoreServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TVRRegistrationInfoStoreServiceIfFactory > handlerFactory_;
};

class TVRRegistrationInfoStoreServiceMultiface : virtual public TVRRegistrationInfoStoreServiceIf {
 public:
  TVRRegistrationInfoStoreServiceMultiface(std::vector<boost::shared_ptr<TVRRegistrationInfoStoreServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TVRRegistrationInfoStoreServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TVRRegistrationInfoStoreServiceIf> > ifaces_;
  TVRRegistrationInfoStoreServiceMultiface() {}
  void add(boost::shared_ptr<TVRRegistrationInfoStoreServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
   ::CRDHN::VR::Data::TRID add(const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(registrationInfo);
    }
    return ifaces_[i]->add(registrationInfo);
  }

  bool update(const  ::CRDHN::VR::Data::TRID registrationId, const  ::CRDHN::VR::Data::TRegistrationInfo& registrationInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update(registrationId, registrationInfo);
    }
    return ifaces_[i]->update(registrationId, registrationInfo);
  }

  void get( ::CRDHN::VR::Data::TRegistrationInfo& _return, const  ::CRDHN::VR::Data::TRID registrationId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, registrationId);
    }
    ifaces_[i]->get(_return, registrationId);
    return;
  }

  bool remove(const  ::CRDHN::VR::Data::TRID registrationId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(registrationId);
    }
    return ifaces_[i]->remove(registrationId);
  }

  bool setRegistrationCode(const  ::CRDHN::VR::Data::TRID registrationId, const std::string& registrationCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setRegistrationCode(registrationId, registrationCode);
    }
    return ifaces_[i]->setRegistrationCode(registrationId, registrationCode);
  }

  bool updateInjectionStatus(const  ::CRDHN::VR::Data::TRID registrationId, const int32_t injectionStatus) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateInjectionStatus(registrationId, injectionStatus);
    }
    return ifaces_[i]->updateInjectionStatus(registrationId, injectionStatus);
  }

};

}} // namespace

#endif
